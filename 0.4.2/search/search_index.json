{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zillionare-backtest \u00b6 zillionare-backtest\u662f\u5927\u5bcc\u7fc1\u7684\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5b83\u8ddf zillionare-omega , zillionare-omicron , zillionare-alpha , zillionare-trader-client \u5171\u540c\u6784\u6210\u56de\u6d4b\u6846\u67b6\u3002 zillionare-backtest\u7684\u529f\u80fd\u662f\u63d0\u4f9b\u8d26\u6237\u7ba1\u7406\u3001\u4ea4\u6613\u64ae\u5408\u548c\u7b56\u7565\u8bc4\u4f30\u3002zillionare-backtest\u4f7f\u7528omicron\u6765\u63d0\u4f9b\u64ae\u5408\u6570\u636e\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u81ea\u5199\u5f00\u53d1\u64ae\u5408\u6570\u636e\u7684\u63d0\u4f9b\u5668 1 \u3002 \u4e0e\u666e\u901a\u7684\u56de\u6d4b\u6846\u67b6\u4e0d\u540c\uff0c\u5927\u5bcc\u7fc1\u56de\u6d4b\u6846\u67b6\u5e76\u975e\u662f\u4fb5\u5165\u5f0f\u7684\u3002\u5728\u60a8\u7684\u7b56\u7565\u4e2d\uff0c\u53ea\u9700\u8981\u63a5\u5165\u6211\u4eec\u7684trader-client,\u5e76\u5728\u7b56\u7565\u53d1\u51fa\u4ea4\u6613\u4fe1\u53f7\u65f6\uff0c\u5411backtest server\u53d1\u51fa\u5bf9\u5e94\u7684\u4ea4\u6613\u6307\u4ee4\uff0c\u5373\u53ef\u5b8c\u6210\u56de\u6d4b\u3002\u5f53\u56de\u6d4b\u5b8c\u6210\uff0c\u8f6c\u5411\u5b9e\u76d8\u65f6\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u7b56\u7565\u4ee3\u7801\uff0c\u4ec5\u9700\u8981\u6307\u56de\u6d4b\u670d\u52a1\u5668url\u6307\u5411 zillionare-trader-server \u5373\u53ef\u3002zillionare-backtest\u4e0ezillionare-trader-server\u7684API\u7edd\u5927\u591a\u6570\u5730\u65b9\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u610f\u5473\u7740\uff0c\u60a8\u7684\u7b56\u7565\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5927\u5bcc\u7fc1\u6570\u636e\u6846\u67b6\uff0c\u751a\u81f3\u53ef\u4ee5\u4e0d\u4f7f\u7528zillionare-trader-client\uff08\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u5957\u63a5\u53e3\u5e76\u5b9e\u73b0\uff0c\u4f7f\u4e4b\u80fd\u540c\u65f6\u9002\u914d\u60a8\u7684\u4ea4\u6613\u63a5\u53e3\u548cbacktest\u63a5\u53e3\uff09\u3002\u56e0\u6b64\uff0c\u60a8\u7684\u7b56\u7565\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u5207\u6362\u5230\u6700\u9002\u5408\u7684\u91cf\u5316\u6846\u67b6\u3002 \u529f\u80fd \u00b6 \u8d26\u6237\u7ba1\u7406 \u00b6 \u5f53\u60a8\u5f00\u59cb\u56de\u6d4b\u65f6\uff0c\u5148\u901a\u8fc7 start_backtest \u6765\u521b\u5efa\u4e00\u4e2a\u8d26\u6237\u3002\u5728\u77e5\u9053\u8be5\u8d26\u6237\u7684 name \u4e0e token \u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5728\u968f\u540e\u901a\u8fc7 delete_accounts \u6765\u5220\u9664\u8d26\u6237\u3002 \u5728\u56de\u6d4b\u5b8c\u6210\u65f6\uff0c\u8bf7\u8bb0\u5f97\u8c03\u7528stop_backtest\u3002 \u5728\u56de\u6d4b\u5b8c\u6210\u65f6\uff0cstop_backtest\u4f1a\u5c06\u8d44\u4ea7\u8868\u66f4\u65b0\u5230\u56de\u6d4b\u7ed3\u675f\u65e5\uff08\u5426\u5219\uff0c\u53ea\u66f4\u65b0\u5230\u6700\u540e\u4e00\u6b21\u4ea4\u6613\u5f53\u5929\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u5b8c\u5168\u7531\u5ba2\u6237\u7aef\u6765\u9a71\u52a8\uff0c\u81ea\u5df1\u6ca1\u6709\u65f6\u95f4\u6982\u5ff5\uff09\u3002\u4f46\u5e76\u4e0d\u4f1a\u5bf9\u5f53\u524d\u6301\u4ed3\u8fdb\u884c\u5356\u51fa\u64cd\u4f5c\uff0c\u539f\u56e0\u662f\uff1a 1. \u5356\u51fa\u64cd\u4f5c\u5c06\u4fee\u6539transactions\u8868\u3002\u800c\u65b0\u589e\u7684transaction\u5e76\u4e0d\u662f\u7b56\u7565\u89e6\u53d1\u7684 2. \u4e0d\u5229\u4e8e\u8bc4\u4f30\u7b56\u7565\u7684\u771f\u5b9e\u60c5\u51b5\u3002\u5982\u679c\u5728\u56de\u6d4b\u671f\u51fa\u73b0\u4ec5\u6709\u4e00\u7b14\u771f\u5b9e\u4ea4\u6613\uff0c\u5176\u5b83\u90fd\u662f\u88ab\u7ec8\u672b\u5f3a\u5e73\u7684\u8bdd\uff0c\u90a3\u4e48\u6b64\u6b21\u56de\u6d4b\u5b9e\u9645\u4e0a\u53ef\u80fd\u5728\u65f6\u95f4\u4e0a\u3001\u6216\u8005\u7b56\u7565\u5468\u671f\u4e0a\u6ca1\u6709\u9009\u597d\u3002\u5982\u679c\u56de\u6d4b\u7cfb\u7edf\u8fdb\u884c\u5f3a\u5e73\uff0c\u5c31\u53ef\u80fd\u63a9\u76d6\u8fd9\u79cd\u4e8b\u5b9e\u3002 3. \u5728\u56de\u6d4b\u7ec8\u672b\u671f\uff0c\u53ef\u80fd\u5b58\u5728\u80a1\u7968\u56e0\u8dcc\u505c\u800c\u65e0\u6cd5\u5356\u51fa\u7684\u60c5\u51b5\uff1b\u6216\u8005\u80a1\u7968\u505c\u724c\u4e2d\uff0c\u65e0\u6cd5\u5356\u51fa\u3002\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6a21\u62df\u5356\u51fa\u4e5f\u6709\u96be\u5ea6\u3002 \u4ea4\u6613\u64ae\u5408 \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7 buy , market_buy , sell , market_sell \u548c sell_percent \u6765\u8fdb\u884c\u4ea4\u6613\u3002 \u72b6\u6001\u8ddf\u8e2a \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7 info \u6765\u67e5\u770b\u8d26\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53\u524d\u603b\u8d44\u4ea7\u3001\u6301\u4ed3\u3001\u672c\u91d1\u3001\u76c8\u5229\u7b49\u3002\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 positions \u3001 bills \u6765\u67e5\u770b\u8d26\u6237\u7684\u6301\u4ed3\u3001\u4ea4\u6613\u5386\u53f2\u8bb0\u5f55 \u7b56\u7565\u8bc4\u4f30 \u00b6 metrics \u65b9\u6cd5\u5c06\u8fd4\u56de\u7b56\u7565\u7684\u5404\u9879\u6307\u6807\uff0c\u6bd4\u5982sharpe, sortino, calmar, win rate, max drawdown\u7b49\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u53c2\u8003\u6807\u7684\uff0cbacktest\u5c06\u5bf9\u53c2\u8003\u6807\u7684\u4e5f\u540c\u6837\u8ba1\u7b97\u4e0a\u8ff0\u6307\u6807\u3002 \u5173\u952e\u6982\u5ff5 \u00b6 \u590d\u6743\u5904\u7406 \u00b6 \u60a8\u7684\u7b56\u7565\u5728\u53d1\u51fa\u4e70\u5356\u4fe1\u53f7\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528\u4e0e order_time \u4e00\u81f4\u7684\u73b0\u4ef7\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u590d\u6743\u4ef7\u3002\u5982\u679c\u60a8\u7684\u6301\u4ed3\u5728\u6301\u6709\u671f\u95f4\uff0c\u53d1\u751f\u4e86\u5206\u7ea2\u9001\u80a1\uff0c\u56de\u6d4b\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u5c06\u5206\u7ea2\u9001\u80a1\u8f6c\u6362\u6210\u80a1\u6570\u52a0\u5230\u60a8\u7684\u6301\u4ed3\u4e2d\u3002\u5f53\u60a8\u6700\u7ec8\u6e05\u7a7a\u6301\u4ed3\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 bills \u63a5\u53e3\u67e5\u8be2\u5230\u5206\u7ea2\u9001\u80a1\u7684\u6210\u4ea4\u60c5\u51b5\uff08\u8bb0\u5f55\u4e3aXDXR\u7c7b\u578b\u7684\u59d4\u6258\uff09\u3002 \u64ae\u5408\u673a\u5236 \u00b6 \u5728\u64ae\u5408\u65f6\uff0cbacktest\u9996\u5148\u4ecedata feeder\u4e2d\u83b7\u53d6 order_time \u4ee5\u540e\uff08\u542b\uff09\u7684\u884c\u60c5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u53bb\u6389\u5904\u5728\u6da8\u8dcc\u505c\u4e2d\u7684\u90a3\u4e9bbar\uff08\u5982\u679c\u662f\u59d4\u4e70\uff0c\u5219\u53bb\u6389\u5df2\u5904\u5728\u6da8\u505c\u671f\u95f4\u7684bar\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u5728\u5269\u4e0b\u7684bar\u4e2d\uff0cbacktest\u4f1a\u9009\u62e9\u4ef7\u683c\u4f4e\u4e8e\u59d4\u6258\u4ef7\u7684\u90a3\u4e9bbar\uff08\u5982\u679c\u662f\u59d4\u5356\uff0c\u5219\u9009\u62e9\u4ef7\u683c\u9ad8\u4e8e\u59d4\u6258\u4ef7\u7684\u90a3\u4e9bbar\uff09,\u4f9d\u987a\u5e8f\u5339\u914d\u59d4\u6258\u91cf\uff0c\u76f4\u5230\u59d4\u6258\u91cf\u5168\u90e8\u88ab\u5339\u914d\u4e3a\u6b62\u3002\u6700\u540e\uff0cbacktest\u5c06\u5339\u914d\u5230\u7684bar\u7684\u91cf\u548c\u4ef7\u683c\u8fdb\u884c\u52a0\u6743\u5e73\u5747\uff0c\u5f97\u5230\u6210\u4ea4\u5747\u4ef7\u3002 \u5f53backtest\u4f7f\u7528zillionare-feed\u6765\u63d0\u4f9b\u64ae\u5408\u6570\u636e\u65f6\uff0c\u7531\u4e8e\u7f3a\u5c11\u76d8\u53e3\u6570\u636e\uff0czillionare-feed\u4f7f\u7528\u5206\u949f\u7ea7\u884c\u60c5\u6570\u636e\u4e2d\u7684 close \u4ef7\u683c\u548c volume \u6765\u8fdb\u884c\u64ae\u5408\u3002\u56e0\u6b64\uff0c\u53ef\u80fd\u51fa\u73b0\u67d0\u4e00\u5206\u949f\u7684\u6700\u9ad8\u4ef7\u6216\u8005\u6700\u4f4e\u4ef7\u53ef\u80fd\u6ee1\u8db3\u8fc7\u60a8\u7684\u59d4\u6258\u4ef7\u8981\u6c42\uff0c\u4f46backtest\u5e76\u672a\u6210\u4ea4\u64ae\u5408\u7684\u60c5\u51b5\u3002\u6211\u4eec\u8fd9\u6837\u8bbe\u8ba1\uff0c\u4e3b\u8981\u8003\u8651\u5230\u5f53\u80a1\u4ef7\u8fbe\u5230\u6700\u9ad8\u6216\u8005\u6700\u4f4e\u70b9\u65f6\uff0c\u5f53\u65f6\u7684\u6210\u4ea4\u91cf\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u59d4\u6258\u91cf\u3002\u73b0\u5728backtest\u7684\u8bbe\u8ba1\uff0c\u53ef\u80fd\u7b56\u7565\u7684\u9c81\u68d2\u6027\u66f4\u597d\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5916\uff0c\u5982\u679c\u59d4\u6258\u65f6\u7684 order_time \u4e3a9:31\u5206\u4e4b\u524d\uff0cbacktest\u5c06\u4f1a\u4f7f\u75289:31\u5206\u949f\u7ebf\u7684\u5f00\u76d8\u4ef7\uff0c\u800c\u4e0d\u662f9:31\u5206\u7684\u6536\u76d8\u4ef7\u6765\u8fdb\u884c\u64ae\u5408\uff0c\u4ee5\u6ee1\u8db3\u90e8\u5206\u7b56\u7565\u9700\u8981\u4ee5 \u6b21\u65e5\u5f00\u76d8\u4ef7 \u4e70\u5165\u7684\u9700\u6c42\u3002 \u53e6\u5916\uff0c\u60a8\u4e5f\u5e94\u8be5\u6ce8\u610f\u5230\uff0czillionare-feed\u4f7f\u7528\u5206\u949f\u7ebf\u6765\u66ff\u4ee3\u4e86\u76d8\u53e3\u6570\u636e\uff0c\u5c3d\u7ba1\u5728\u7edd\u5927\u591a\u6570\u60c5\u5f62\u4e0b\uff0c\u8fd9\u6837\u505a\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u4e24\u8005\u6bd5\u7adf\u662f\u4e0d\u540c\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6210\u4ea4\u91cf\u80af\u5b9a\u5c0f\u4e8e\u76d8\u53e3\u7684\u59d4\u4e70\u59d4\u5356\u91cf\u3002\u56e0\u6b64\uff0c\u5728\u56de\u6d4b\u4e2d\u51fa\u73b0\u4e70\u5356\u59d4\u6258\u91cf\u4e0d\u8db3\u7684\u60c5\u51b5\u65f6\uff0c\u5bf9\u5e94\u7684\u5b9e\u76d8\u5219\u4e0d\u4e00\u5b9a\u51fa\u73b0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u9002\u5f53\u8c03\u4f4e\u7b56\u7565\u7684\u672c\u91d1\u8bbe\u7f6e\u3002\u53e6\u5916\u4e00\u4e2a\u5dee\u5f02\u662f\uff0c\u5206\u949f\u6210\u4ea4\u4ef7\u5fc5\u7136\u4e0d\u7b49\u540c\u4e8e\u76d8\u53e3\u6210\u4ea4\u4ef7\uff0c\u56e0\u6b64\u4f1a\u5f15\u5165\u4e00\u5b9a\u7684\u8bef\u5dee\u3002\u4e0d\u8fc7\u957f\u671f\u6765\u770b\uff0c\u8fd9\u79cd\u8bef\u5dee\u5e94\u8be5\u662f\u96f6\u5747\u503c\u7684\uff0c\u56e0\u6b64\u5bf9\u7edd\u5927\u591a\u6570\u7b56\u7565\u4e0d\u4f1a\u4ea7\u751f\u5b9e\u8d28\u5f71\u54cd\u3002 Info \u4e86\u89e3backtest\u7684\u64ae\u5408\u673a\u5236\u540e\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u660e\u767d\uff0c\u6b63\u786e\u8bbe\u5b9a\u7b56\u7565\u7684\u672c\u91d1( principal )\u4f1a\u4f7f\u5f97\u56de\u6d4b\u7684\u7cfb\u7edf\u8bef\u5dee\u66f4\u5c0f\u3002 \u59d4\u4e70\u59d4\u5356 \u00b6 \u59d4\u4e70\u65f6\uff0c\u59d4\u4e70\u91cf\u5fc5\u987b\u662f100\u80a1\u7684\u6574\u6570\u500d\u3002\u8fd9\u4e2a\u9650\u5236\u4e0e\u5b9e\u76d8\u662f\u4e00\u81f4\u7684\u3002\u540c\u6837\uff0c\u60a8\u7684\u5238\u5546\u5bf9\u59d4\u5356\u4ea4\u6613\u4e5f\u505a\u4e86\u9650\u5236\uff0c\u4f46\u56de\u6d4b\u670d\u52a1\u5668\u5e76\u672a\u5bf9\u6b64\u8fdb\u884c\u9650\u5236\u3002\u7ecf\u8bc4\u4f30\uff0c\u53bb\u6389\u8fd9\u4e2a\u9650\u5236\u5e76\u4e0d\u4f1a\u5bf9\u7b56\u7565\u7684\u6709\u6548\u6027\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff0c\u4f46\u4f1a\u7b80\u5316\u7b56\u7565\u7684\u7f16\u5199\u3002 \u505c\u724c\u5904\u7406 \u00b6 \u5982\u679c\u67d0\u652f\u6301\u4ed3\u80a1\u5f53\u524d\u505c\u724c\uff0c\u5728\u8ba1\u7b97\u6301\u4ed3\u5e02\u503c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528\u505c\u724c\u524d\u7684\u6536\u76d8\u4ef7\u6765\u8ba1\u7b97\u5e02\u503c\u3002\u4e3a\u6027\u80fd\u4f18\u5316\u8003\u9a8c\uff0c\u5982\u679c\u4e00\u652f\u80a1\u7968\u505c\u724c\u65f6\u95f4\u8d85\u8fc7500\u4e2a\u4ea4\u6613\u65e5\uff0c\u5219\u7cfb\u7edf\u5c06\u653e\u5f03\u7ee7\u7eed\u5411\u524d\u641c\u7d22\u505c\u724c\u524d\u7684\u6536\u76d8\u4ef7\uff0c\u6539\u7528\u4e70\u5165\u65f6\u7684\u6210\u4ea4\u5747\u4ef7\u6765\u4ee3\u66ff\u3002\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u76f8\u5f53\u7f55\u89c1\u3002 \u7248\u672c\u5386\u53f2 \u00b6 \u5173\u4e8e\u7248\u672c\u5386\u53f2\uff0c\u8bf7\u67e5\u9605 \u7248\u672c\u5386\u53f2 Credits \u00b6 Zillionare-backtest\u9879\u76ee\u662f\u901a\u8fc7 Python Project Wizard \u521b\u5efa\u7684\u3002 ../\u6b64\u529f\u80fd\u57280.4.x\u7248\u672c\u4e2d\u5c1a\u4e0d\u53ef\u7528\u3002 \u21a9","title":"home"},{"location":"#zillionare-backtest","text":"zillionare-backtest\u662f\u5927\u5bcc\u7fc1\u7684\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5b83\u8ddf zillionare-omega , zillionare-omicron , zillionare-alpha , zillionare-trader-client \u5171\u540c\u6784\u6210\u56de\u6d4b\u6846\u67b6\u3002 zillionare-backtest\u7684\u529f\u80fd\u662f\u63d0\u4f9b\u8d26\u6237\u7ba1\u7406\u3001\u4ea4\u6613\u64ae\u5408\u548c\u7b56\u7565\u8bc4\u4f30\u3002zillionare-backtest\u4f7f\u7528omicron\u6765\u63d0\u4f9b\u64ae\u5408\u6570\u636e\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u81ea\u5199\u5f00\u53d1\u64ae\u5408\u6570\u636e\u7684\u63d0\u4f9b\u5668 1 \u3002 \u4e0e\u666e\u901a\u7684\u56de\u6d4b\u6846\u67b6\u4e0d\u540c\uff0c\u5927\u5bcc\u7fc1\u56de\u6d4b\u6846\u67b6\u5e76\u975e\u662f\u4fb5\u5165\u5f0f\u7684\u3002\u5728\u60a8\u7684\u7b56\u7565\u4e2d\uff0c\u53ea\u9700\u8981\u63a5\u5165\u6211\u4eec\u7684trader-client,\u5e76\u5728\u7b56\u7565\u53d1\u51fa\u4ea4\u6613\u4fe1\u53f7\u65f6\uff0c\u5411backtest server\u53d1\u51fa\u5bf9\u5e94\u7684\u4ea4\u6613\u6307\u4ee4\uff0c\u5373\u53ef\u5b8c\u6210\u56de\u6d4b\u3002\u5f53\u56de\u6d4b\u5b8c\u6210\uff0c\u8f6c\u5411\u5b9e\u76d8\u65f6\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u7b56\u7565\u4ee3\u7801\uff0c\u4ec5\u9700\u8981\u6307\u56de\u6d4b\u670d\u52a1\u5668url\u6307\u5411 zillionare-trader-server \u5373\u53ef\u3002zillionare-backtest\u4e0ezillionare-trader-server\u7684API\u7edd\u5927\u591a\u6570\u5730\u65b9\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u610f\u5473\u7740\uff0c\u60a8\u7684\u7b56\u7565\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5927\u5bcc\u7fc1\u6570\u636e\u6846\u67b6\uff0c\u751a\u81f3\u53ef\u4ee5\u4e0d\u4f7f\u7528zillionare-trader-client\uff08\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u5957\u63a5\u53e3\u5e76\u5b9e\u73b0\uff0c\u4f7f\u4e4b\u80fd\u540c\u65f6\u9002\u914d\u60a8\u7684\u4ea4\u6613\u63a5\u53e3\u548cbacktest\u63a5\u53e3\uff09\u3002\u56e0\u6b64\uff0c\u60a8\u7684\u7b56\u7565\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u5207\u6362\u5230\u6700\u9002\u5408\u7684\u91cf\u5316\u6846\u67b6\u3002","title":"zillionare-backtest"},{"location":"#\u529f\u80fd","text":"","title":"\u529f\u80fd"},{"location":"#\u8d26\u6237\u7ba1\u7406","text":"\u5f53\u60a8\u5f00\u59cb\u56de\u6d4b\u65f6\uff0c\u5148\u901a\u8fc7 start_backtest \u6765\u521b\u5efa\u4e00\u4e2a\u8d26\u6237\u3002\u5728\u77e5\u9053\u8be5\u8d26\u6237\u7684 name \u4e0e token \u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5728\u968f\u540e\u901a\u8fc7 delete_accounts \u6765\u5220\u9664\u8d26\u6237\u3002 \u5728\u56de\u6d4b\u5b8c\u6210\u65f6\uff0c\u8bf7\u8bb0\u5f97\u8c03\u7528stop_backtest\u3002 \u5728\u56de\u6d4b\u5b8c\u6210\u65f6\uff0cstop_backtest\u4f1a\u5c06\u8d44\u4ea7\u8868\u66f4\u65b0\u5230\u56de\u6d4b\u7ed3\u675f\u65e5\uff08\u5426\u5219\uff0c\u53ea\u66f4\u65b0\u5230\u6700\u540e\u4e00\u6b21\u4ea4\u6613\u5f53\u5929\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u5b8c\u5168\u7531\u5ba2\u6237\u7aef\u6765\u9a71\u52a8\uff0c\u81ea\u5df1\u6ca1\u6709\u65f6\u95f4\u6982\u5ff5\uff09\u3002\u4f46\u5e76\u4e0d\u4f1a\u5bf9\u5f53\u524d\u6301\u4ed3\u8fdb\u884c\u5356\u51fa\u64cd\u4f5c\uff0c\u539f\u56e0\u662f\uff1a 1. \u5356\u51fa\u64cd\u4f5c\u5c06\u4fee\u6539transactions\u8868\u3002\u800c\u65b0\u589e\u7684transaction\u5e76\u4e0d\u662f\u7b56\u7565\u89e6\u53d1\u7684 2. \u4e0d\u5229\u4e8e\u8bc4\u4f30\u7b56\u7565\u7684\u771f\u5b9e\u60c5\u51b5\u3002\u5982\u679c\u5728\u56de\u6d4b\u671f\u51fa\u73b0\u4ec5\u6709\u4e00\u7b14\u771f\u5b9e\u4ea4\u6613\uff0c\u5176\u5b83\u90fd\u662f\u88ab\u7ec8\u672b\u5f3a\u5e73\u7684\u8bdd\uff0c\u90a3\u4e48\u6b64\u6b21\u56de\u6d4b\u5b9e\u9645\u4e0a\u53ef\u80fd\u5728\u65f6\u95f4\u4e0a\u3001\u6216\u8005\u7b56\u7565\u5468\u671f\u4e0a\u6ca1\u6709\u9009\u597d\u3002\u5982\u679c\u56de\u6d4b\u7cfb\u7edf\u8fdb\u884c\u5f3a\u5e73\uff0c\u5c31\u53ef\u80fd\u63a9\u76d6\u8fd9\u79cd\u4e8b\u5b9e\u3002 3. \u5728\u56de\u6d4b\u7ec8\u672b\u671f\uff0c\u53ef\u80fd\u5b58\u5728\u80a1\u7968\u56e0\u8dcc\u505c\u800c\u65e0\u6cd5\u5356\u51fa\u7684\u60c5\u51b5\uff1b\u6216\u8005\u80a1\u7968\u505c\u724c\u4e2d\uff0c\u65e0\u6cd5\u5356\u51fa\u3002\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6a21\u62df\u5356\u51fa\u4e5f\u6709\u96be\u5ea6\u3002","title":"\u8d26\u6237\u7ba1\u7406"},{"location":"#\u4ea4\u6613\u64ae\u5408","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 buy , market_buy , sell , market_sell \u548c sell_percent \u6765\u8fdb\u884c\u4ea4\u6613\u3002","title":"\u4ea4\u6613\u64ae\u5408"},{"location":"#\u72b6\u6001\u8ddf\u8e2a","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 info \u6765\u67e5\u770b\u8d26\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53\u524d\u603b\u8d44\u4ea7\u3001\u6301\u4ed3\u3001\u672c\u91d1\u3001\u76c8\u5229\u7b49\u3002\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 positions \u3001 bills \u6765\u67e5\u770b\u8d26\u6237\u7684\u6301\u4ed3\u3001\u4ea4\u6613\u5386\u53f2\u8bb0\u5f55","title":"\u72b6\u6001\u8ddf\u8e2a"},{"location":"#\u7b56\u7565\u8bc4\u4f30","text":"metrics \u65b9\u6cd5\u5c06\u8fd4\u56de\u7b56\u7565\u7684\u5404\u9879\u6307\u6807\uff0c\u6bd4\u5982sharpe, sortino, calmar, win rate, max drawdown\u7b49\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u53c2\u8003\u6807\u7684\uff0cbacktest\u5c06\u5bf9\u53c2\u8003\u6807\u7684\u4e5f\u540c\u6837\u8ba1\u7b97\u4e0a\u8ff0\u6307\u6807\u3002","title":"\u7b56\u7565\u8bc4\u4f30"},{"location":"#\u5173\u952e\u6982\u5ff5","text":"","title":"\u5173\u952e\u6982\u5ff5"},{"location":"#\u590d\u6743\u5904\u7406","text":"\u60a8\u7684\u7b56\u7565\u5728\u53d1\u51fa\u4e70\u5356\u4fe1\u53f7\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528\u4e0e order_time \u4e00\u81f4\u7684\u73b0\u4ef7\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u590d\u6743\u4ef7\u3002\u5982\u679c\u60a8\u7684\u6301\u4ed3\u5728\u6301\u6709\u671f\u95f4\uff0c\u53d1\u751f\u4e86\u5206\u7ea2\u9001\u80a1\uff0c\u56de\u6d4b\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u5c06\u5206\u7ea2\u9001\u80a1\u8f6c\u6362\u6210\u80a1\u6570\u52a0\u5230\u60a8\u7684\u6301\u4ed3\u4e2d\u3002\u5f53\u60a8\u6700\u7ec8\u6e05\u7a7a\u6301\u4ed3\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 bills \u63a5\u53e3\u67e5\u8be2\u5230\u5206\u7ea2\u9001\u80a1\u7684\u6210\u4ea4\u60c5\u51b5\uff08\u8bb0\u5f55\u4e3aXDXR\u7c7b\u578b\u7684\u59d4\u6258\uff09\u3002","title":"\u590d\u6743\u5904\u7406"},{"location":"#\u64ae\u5408\u673a\u5236","text":"\u5728\u64ae\u5408\u65f6\uff0cbacktest\u9996\u5148\u4ecedata feeder\u4e2d\u83b7\u53d6 order_time \u4ee5\u540e\uff08\u542b\uff09\u7684\u884c\u60c5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u53bb\u6389\u5904\u5728\u6da8\u8dcc\u505c\u4e2d\u7684\u90a3\u4e9bbar\uff08\u5982\u679c\u662f\u59d4\u4e70\uff0c\u5219\u53bb\u6389\u5df2\u5904\u5728\u6da8\u505c\u671f\u95f4\u7684bar\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u5728\u5269\u4e0b\u7684bar\u4e2d\uff0cbacktest\u4f1a\u9009\u62e9\u4ef7\u683c\u4f4e\u4e8e\u59d4\u6258\u4ef7\u7684\u90a3\u4e9bbar\uff08\u5982\u679c\u662f\u59d4\u5356\uff0c\u5219\u9009\u62e9\u4ef7\u683c\u9ad8\u4e8e\u59d4\u6258\u4ef7\u7684\u90a3\u4e9bbar\uff09,\u4f9d\u987a\u5e8f\u5339\u914d\u59d4\u6258\u91cf\uff0c\u76f4\u5230\u59d4\u6258\u91cf\u5168\u90e8\u88ab\u5339\u914d\u4e3a\u6b62\u3002\u6700\u540e\uff0cbacktest\u5c06\u5339\u914d\u5230\u7684bar\u7684\u91cf\u548c\u4ef7\u683c\u8fdb\u884c\u52a0\u6743\u5e73\u5747\uff0c\u5f97\u5230\u6210\u4ea4\u5747\u4ef7\u3002 \u5f53backtest\u4f7f\u7528zillionare-feed\u6765\u63d0\u4f9b\u64ae\u5408\u6570\u636e\u65f6\uff0c\u7531\u4e8e\u7f3a\u5c11\u76d8\u53e3\u6570\u636e\uff0czillionare-feed\u4f7f\u7528\u5206\u949f\u7ea7\u884c\u60c5\u6570\u636e\u4e2d\u7684 close \u4ef7\u683c\u548c volume \u6765\u8fdb\u884c\u64ae\u5408\u3002\u56e0\u6b64\uff0c\u53ef\u80fd\u51fa\u73b0\u67d0\u4e00\u5206\u949f\u7684\u6700\u9ad8\u4ef7\u6216\u8005\u6700\u4f4e\u4ef7\u53ef\u80fd\u6ee1\u8db3\u8fc7\u60a8\u7684\u59d4\u6258\u4ef7\u8981\u6c42\uff0c\u4f46backtest\u5e76\u672a\u6210\u4ea4\u64ae\u5408\u7684\u60c5\u51b5\u3002\u6211\u4eec\u8fd9\u6837\u8bbe\u8ba1\uff0c\u4e3b\u8981\u8003\u8651\u5230\u5f53\u80a1\u4ef7\u8fbe\u5230\u6700\u9ad8\u6216\u8005\u6700\u4f4e\u70b9\u65f6\uff0c\u5f53\u65f6\u7684\u6210\u4ea4\u91cf\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u59d4\u6258\u91cf\u3002\u73b0\u5728backtest\u7684\u8bbe\u8ba1\uff0c\u53ef\u80fd\u7b56\u7565\u7684\u9c81\u68d2\u6027\u66f4\u597d\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5916\uff0c\u5982\u679c\u59d4\u6258\u65f6\u7684 order_time \u4e3a9:31\u5206\u4e4b\u524d\uff0cbacktest\u5c06\u4f1a\u4f7f\u75289:31\u5206\u949f\u7ebf\u7684\u5f00\u76d8\u4ef7\uff0c\u800c\u4e0d\u662f9:31\u5206\u7684\u6536\u76d8\u4ef7\u6765\u8fdb\u884c\u64ae\u5408\uff0c\u4ee5\u6ee1\u8db3\u90e8\u5206\u7b56\u7565\u9700\u8981\u4ee5 \u6b21\u65e5\u5f00\u76d8\u4ef7 \u4e70\u5165\u7684\u9700\u6c42\u3002 \u53e6\u5916\uff0c\u60a8\u4e5f\u5e94\u8be5\u6ce8\u610f\u5230\uff0czillionare-feed\u4f7f\u7528\u5206\u949f\u7ebf\u6765\u66ff\u4ee3\u4e86\u76d8\u53e3\u6570\u636e\uff0c\u5c3d\u7ba1\u5728\u7edd\u5927\u591a\u6570\u60c5\u5f62\u4e0b\uff0c\u8fd9\u6837\u505a\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u4e24\u8005\u6bd5\u7adf\u662f\u4e0d\u540c\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6210\u4ea4\u91cf\u80af\u5b9a\u5c0f\u4e8e\u76d8\u53e3\u7684\u59d4\u4e70\u59d4\u5356\u91cf\u3002\u56e0\u6b64\uff0c\u5728\u56de\u6d4b\u4e2d\u51fa\u73b0\u4e70\u5356\u59d4\u6258\u91cf\u4e0d\u8db3\u7684\u60c5\u51b5\u65f6\uff0c\u5bf9\u5e94\u7684\u5b9e\u76d8\u5219\u4e0d\u4e00\u5b9a\u51fa\u73b0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u9002\u5f53\u8c03\u4f4e\u7b56\u7565\u7684\u672c\u91d1\u8bbe\u7f6e\u3002\u53e6\u5916\u4e00\u4e2a\u5dee\u5f02\u662f\uff0c\u5206\u949f\u6210\u4ea4\u4ef7\u5fc5\u7136\u4e0d\u7b49\u540c\u4e8e\u76d8\u53e3\u6210\u4ea4\u4ef7\uff0c\u56e0\u6b64\u4f1a\u5f15\u5165\u4e00\u5b9a\u7684\u8bef\u5dee\u3002\u4e0d\u8fc7\u957f\u671f\u6765\u770b\uff0c\u8fd9\u79cd\u8bef\u5dee\u5e94\u8be5\u662f\u96f6\u5747\u503c\u7684\uff0c\u56e0\u6b64\u5bf9\u7edd\u5927\u591a\u6570\u7b56\u7565\u4e0d\u4f1a\u4ea7\u751f\u5b9e\u8d28\u5f71\u54cd\u3002 Info \u4e86\u89e3backtest\u7684\u64ae\u5408\u673a\u5236\u540e\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u660e\u767d\uff0c\u6b63\u786e\u8bbe\u5b9a\u7b56\u7565\u7684\u672c\u91d1( principal )\u4f1a\u4f7f\u5f97\u56de\u6d4b\u7684\u7cfb\u7edf\u8bef\u5dee\u66f4\u5c0f\u3002","title":"\u64ae\u5408\u673a\u5236"},{"location":"#\u59d4\u4e70\u59d4\u5356","text":"\u59d4\u4e70\u65f6\uff0c\u59d4\u4e70\u91cf\u5fc5\u987b\u662f100\u80a1\u7684\u6574\u6570\u500d\u3002\u8fd9\u4e2a\u9650\u5236\u4e0e\u5b9e\u76d8\u662f\u4e00\u81f4\u7684\u3002\u540c\u6837\uff0c\u60a8\u7684\u5238\u5546\u5bf9\u59d4\u5356\u4ea4\u6613\u4e5f\u505a\u4e86\u9650\u5236\uff0c\u4f46\u56de\u6d4b\u670d\u52a1\u5668\u5e76\u672a\u5bf9\u6b64\u8fdb\u884c\u9650\u5236\u3002\u7ecf\u8bc4\u4f30\uff0c\u53bb\u6389\u8fd9\u4e2a\u9650\u5236\u5e76\u4e0d\u4f1a\u5bf9\u7b56\u7565\u7684\u6709\u6548\u6027\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff0c\u4f46\u4f1a\u7b80\u5316\u7b56\u7565\u7684\u7f16\u5199\u3002","title":"\u59d4\u4e70\u59d4\u5356"},{"location":"#\u505c\u724c\u5904\u7406","text":"\u5982\u679c\u67d0\u652f\u6301\u4ed3\u80a1\u5f53\u524d\u505c\u724c\uff0c\u5728\u8ba1\u7b97\u6301\u4ed3\u5e02\u503c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528\u505c\u724c\u524d\u7684\u6536\u76d8\u4ef7\u6765\u8ba1\u7b97\u5e02\u503c\u3002\u4e3a\u6027\u80fd\u4f18\u5316\u8003\u9a8c\uff0c\u5982\u679c\u4e00\u652f\u80a1\u7968\u505c\u724c\u65f6\u95f4\u8d85\u8fc7500\u4e2a\u4ea4\u6613\u65e5\uff0c\u5219\u7cfb\u7edf\u5c06\u653e\u5f03\u7ee7\u7eed\u5411\u524d\u641c\u7d22\u505c\u724c\u524d\u7684\u6536\u76d8\u4ef7\uff0c\u6539\u7528\u4e70\u5165\u65f6\u7684\u6210\u4ea4\u5747\u4ef7\u6765\u4ee3\u66ff\u3002\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u76f8\u5f53\u7f55\u89c1\u3002","title":"\u505c\u724c\u5904\u7406"},{"location":"#\u7248\u672c\u5386\u53f2","text":"\u5173\u4e8e\u7248\u672c\u5386\u53f2\uff0c\u8bf7\u67e5\u9605 \u7248\u672c\u5386\u53f2","title":"\u7248\u672c\u5386\u53f2"},{"location":"#credits","text":"Zillionare-backtest\u9879\u76ee\u662f\u901a\u8fc7 Python Project Wizard \u521b\u5efa\u7684\u3002 ../\u6b64\u529f\u80fd\u57280.4.x\u7248\u672c\u4e2d\u5c1a\u4e0d\u53ef\u7528\u3002 \u21a9","title":"Credits"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Aaron Yang aaron_yang@jieyu.ai Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Aaron Yang aaron_yang@jieyu.ai","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/zillionare/backtest/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 zillionare-backtest could always use more documentation, whether as part of the official zillionare-backtest docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/zillionare/backtest/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up backtest for local development. Fork the backtest repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/backtest.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/backtest/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_backtest ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/zillionare/backtest/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"zillionare-backtest could always use more documentation, whether as part of the official zillionare-backtest docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/zillionare/backtest/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up backtest for local development. Fork the backtest repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/backtest.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/backtest/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_backtest ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"developer/","text":"\u6784\u5efa\u548c\u53d1\u5e03docker\u5bb9\u5668 \u00b6 \u5728backtest/docker\u76ee\u5f55\u4e0b\uff0c\u6709\u4e00\u4e2abuild.sh\u6587\u4ef6\uff0c\u8fd0\u884c\u5b83\u5c06\u6784\u5efa\u56de\u6d4b\u670d\u52a1\u5668\u955c\u50cf\u3002\u5982\u679c\u8981\u5c06\u6b64\u53d1\u5e03\u5230hub.docker.com\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a 1 ./build.sh --publish \u6d4b\u8bd5\u6a21\u5f0f \u00b6 backtest\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f00\u53d1\u6a21\u5f0f\u3002\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0cbacktest\u670d\u52a1\u5668\u5c06\u81ea\u5e26\u5c11\u91cf\u6570\u636e\uff0c\u65b9\u4fbf\u4e0e trader-client \u8fdb\u884c\u8054\u8c03\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 echo \"\u521d\u59cb\u5316redis\u5bb9\u5668\" sudo docker run -d --name tox-redis -p 6379:6379 redis echo \"\u521d\u59cb\u5316influxdb\u5bb9\u5668\" sudo docker run -d -p 8086:8086 --name tox-influxdb influxdb sleep 5 sudo docker exec -i tox-influxdb bash -c 'influx setup --username my-user --password my-password --org my-org --bucket my-bucket --token my-token --force' sleep 1 docker run -d --name tox-bt -e MODE=TEST -e PORT=3180 -p 3180:3180 backtest docker network create tox-bt-net docker network connect --alias redis tox-bt-net tox-redis docker network connect --alias influxdb tox-bt-net tox-influxdb docker network connect --alias bt tox-bt-net tox-bt \u63d0\u4f9b\u7684\u6570\u636e\u5305\u542b\u4e86\u5929\u57df\u751f\u6001\u3001\u6d77\u8054\u91d1\u6c47\u52303\u67081\u65e5\u52303\u670814\u65e5\u6b62\u7684\u65e5\u7ebf\u548c\u5206\u949f\u7ebf\u548c\u6da8\u8dcc\u505c\u4ef7\u683c\uff0c\u7528\u4ee5\u64ae\u5408\u6210\u4ea4\u548c\u63d0\u4f9b\u6536\u76d8\u4ef7\u6570\u636e\uff08\u672a\u590d\u6743\uff0c\u5e26\u590d\u6743\u56e0\u5b50\uff09\u3002 \u6ce8\u610f\u8fd9\u91cc\u542f\u52a8backtest\u5bb9\u5668\u7684\u53c2\u6570\u4e0e\u6b63\u5f0f\u8fd0\u884c\u7565\u6709\u4e0d\u540c\uff0c\u5373\u591a\u4e86\u4e00\u4e2a -e MODE=TEST \u53c2\u6570\u3002\u901a\u8fc7\u8fd9\u4e2a\u53c2\u6570\uff0c\u5bb9\u5668\u5728\u542f\u52a8\u65f6\uff0c\u5c06\u6267\u884c\u4ee5\u4e0b\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 if [ $MODE = \"TEST\" ]; then if [ ! -f /root/.zillionare/backtest/config/defaults.yaml ]; then echo \"in $MODE mode, config file not found, exit\" echo `ls /root/.zillionare/backtest/config` exit fi if [ ! -f /root/.zillionare/backtest/init_db.py ]; then echo \"init_db.py not found, exit\" exit fi export __cfg4py_server_role__=TEST;python3 ~/.zillionare/backtest/init_db.py export __cfg4py_server_role__=TEST;python3 -m backtest.app start $PORT fi trader-client\u7684\u5355\u5143\u6d4b\u8bd5\u4e2d\uff0c\u4f1a\u81ea\u52a8\u542f\u52a8\u8fd9\u4e2a\u5bb9\u5668\uff08\u9700\u8981\u4e8b\u5148\u5c06\u6b63\u786e\u7248\u672c\u7684image\u62c9\u53d6\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u5426\u5219\uff0c\u81ea\u52a8\u62c9\u53d6\u7684\u6c38\u8fdc\u662f\u6700\u65b0\u7684\u7248\u672c\uff09\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u6392\u9519 \u00b6 backtest\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5bf9\u8d26\u65e5\u5fd7\u6587\u4ef6\uff0c /var/log/backtest/entrust.log\u548c/var/log/backtest/trade.log\uff08\u7f3a\u7701\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684entrust\u548ctrade\u4e24\u9879\u4e2d\u7684filename)\u3002\u5176\u4e2dtrade.log\u5305\u62ec\u4e86\u4e70\u5356\u6210\u4ea4\u8bb0\u5f55\u3002\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6587\u4ef6\u548ctests/data/validation.xlsx\u914d\u5408\u6765\u8fdb\u884c\u5bf9\u8d26\u3002 \u6ce8\u610f\u4e24\u4e2a\u6587\u4ef6\u7684tsv\u6587\u4ef6\u3002 \u5982\u679c\u5bb9\u5668\u6784\u5efa\u5931\u8d25\uff0c\u53ef\u4ee5\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u8fdb\u5165\u5bb9\u5668\u8c03\u8bd5: 1 docker run -d --name tox-bt -e MODE=TEST -e PORT=3180 -p 3180:3180 backtest \u6587\u6863\u53d1\u5e03 \u00b6 backtest\u9075\u7167 ppw \u6807\u51c6\u8fdb\u884c\u5de5\u7a0b\u7ba1\u7406\uff0c\u56e0\u6b64\uff0c\u6587\u6863\u7684\u53d1\u5e03\u662f\u81ea\u52a8\u7684\u3002\u4f46\u662f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u624b\u52a8\u6784\u5efa\u548c\u53d1\u5e03\uff1a 1 2 mike deploy -p $version mike set-default -p $version","title":"developer"},{"location":"developer/#\u6784\u5efa\u548c\u53d1\u5e03docker\u5bb9\u5668","text":"\u5728backtest/docker\u76ee\u5f55\u4e0b\uff0c\u6709\u4e00\u4e2abuild.sh\u6587\u4ef6\uff0c\u8fd0\u884c\u5b83\u5c06\u6784\u5efa\u56de\u6d4b\u670d\u52a1\u5668\u955c\u50cf\u3002\u5982\u679c\u8981\u5c06\u6b64\u53d1\u5e03\u5230hub.docker.com\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a 1 ./build.sh --publish","title":"\u6784\u5efa\u548c\u53d1\u5e03docker\u5bb9\u5668"},{"location":"developer/#\u6d4b\u8bd5\u6a21\u5f0f","text":"backtest\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f00\u53d1\u6a21\u5f0f\u3002\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0cbacktest\u670d\u52a1\u5668\u5c06\u81ea\u5e26\u5c11\u91cf\u6570\u636e\uff0c\u65b9\u4fbf\u4e0e trader-client \u8fdb\u884c\u8054\u8c03\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 echo \"\u521d\u59cb\u5316redis\u5bb9\u5668\" sudo docker run -d --name tox-redis -p 6379:6379 redis echo \"\u521d\u59cb\u5316influxdb\u5bb9\u5668\" sudo docker run -d -p 8086:8086 --name tox-influxdb influxdb sleep 5 sudo docker exec -i tox-influxdb bash -c 'influx setup --username my-user --password my-password --org my-org --bucket my-bucket --token my-token --force' sleep 1 docker run -d --name tox-bt -e MODE=TEST -e PORT=3180 -p 3180:3180 backtest docker network create tox-bt-net docker network connect --alias redis tox-bt-net tox-redis docker network connect --alias influxdb tox-bt-net tox-influxdb docker network connect --alias bt tox-bt-net tox-bt \u63d0\u4f9b\u7684\u6570\u636e\u5305\u542b\u4e86\u5929\u57df\u751f\u6001\u3001\u6d77\u8054\u91d1\u6c47\u52303\u67081\u65e5\u52303\u670814\u65e5\u6b62\u7684\u65e5\u7ebf\u548c\u5206\u949f\u7ebf\u548c\u6da8\u8dcc\u505c\u4ef7\u683c\uff0c\u7528\u4ee5\u64ae\u5408\u6210\u4ea4\u548c\u63d0\u4f9b\u6536\u76d8\u4ef7\u6570\u636e\uff08\u672a\u590d\u6743\uff0c\u5e26\u590d\u6743\u56e0\u5b50\uff09\u3002 \u6ce8\u610f\u8fd9\u91cc\u542f\u52a8backtest\u5bb9\u5668\u7684\u53c2\u6570\u4e0e\u6b63\u5f0f\u8fd0\u884c\u7565\u6709\u4e0d\u540c\uff0c\u5373\u591a\u4e86\u4e00\u4e2a -e MODE=TEST \u53c2\u6570\u3002\u901a\u8fc7\u8fd9\u4e2a\u53c2\u6570\uff0c\u5bb9\u5668\u5728\u542f\u52a8\u65f6\uff0c\u5c06\u6267\u884c\u4ee5\u4e0b\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 if [ $MODE = \"TEST\" ]; then if [ ! -f /root/.zillionare/backtest/config/defaults.yaml ]; then echo \"in $MODE mode, config file not found, exit\" echo `ls /root/.zillionare/backtest/config` exit fi if [ ! -f /root/.zillionare/backtest/init_db.py ]; then echo \"init_db.py not found, exit\" exit fi export __cfg4py_server_role__=TEST;python3 ~/.zillionare/backtest/init_db.py export __cfg4py_server_role__=TEST;python3 -m backtest.app start $PORT fi trader-client\u7684\u5355\u5143\u6d4b\u8bd5\u4e2d\uff0c\u4f1a\u81ea\u52a8\u542f\u52a8\u8fd9\u4e2a\u5bb9\u5668\uff08\u9700\u8981\u4e8b\u5148\u5c06\u6b63\u786e\u7248\u672c\u7684image\u62c9\u53d6\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u5426\u5219\uff0c\u81ea\u52a8\u62c9\u53d6\u7684\u6c38\u8fdc\u662f\u6700\u65b0\u7684\u7248\u672c\uff09\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u6d4b\u8bd5\u6a21\u5f0f"},{"location":"developer/#\u6392\u9519","text":"backtest\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5bf9\u8d26\u65e5\u5fd7\u6587\u4ef6\uff0c /var/log/backtest/entrust.log\u548c/var/log/backtest/trade.log\uff08\u7f3a\u7701\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684entrust\u548ctrade\u4e24\u9879\u4e2d\u7684filename)\u3002\u5176\u4e2dtrade.log\u5305\u62ec\u4e86\u4e70\u5356\u6210\u4ea4\u8bb0\u5f55\u3002\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6587\u4ef6\u548ctests/data/validation.xlsx\u914d\u5408\u6765\u8fdb\u884c\u5bf9\u8d26\u3002 \u6ce8\u610f\u4e24\u4e2a\u6587\u4ef6\u7684tsv\u6587\u4ef6\u3002 \u5982\u679c\u5bb9\u5668\u6784\u5efa\u5931\u8d25\uff0c\u53ef\u4ee5\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u8fdb\u5165\u5bb9\u5668\u8c03\u8bd5: 1 docker run -d --name tox-bt -e MODE=TEST -e PORT=3180 -p 3180:3180 backtest","title":"\u6392\u9519"},{"location":"developer/#\u6587\u6863\u53d1\u5e03","text":"backtest\u9075\u7167 ppw \u6807\u51c6\u8fdb\u884c\u5de5\u7a0b\u7ba1\u7406\uff0c\u56e0\u6b64\uff0c\u6587\u6863\u7684\u53d1\u5e03\u662f\u81ea\u52a8\u7684\u3002\u4f46\u662f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u624b\u52a8\u6784\u5efa\u548c\u53d1\u5e03\uff1a 1 2 mike deploy -p $version mike set-default -p $version","title":"\u6587\u6863\u53d1\u5e03"},{"location":"history/","text":"History \u00b6 Info (#{number}) means an issue of this project. You may check details of the issue by visiting https://github.com/zillionare/backtesting/issues/ {number} 0.4.2 \uff082023-11-5\uff09 \u00b6 1 2 * \u5f15\u5165zillionare-core-types 0.6.2\u7684\u5f02\u5e38\u7c7b\u4f53\u7cfb\uff0c\u5b9e\u73b0\u4e86\u5c42\u6b21\u5316\u7684\u5f02\u5e38\uff0c\u4ee5\u53ca\u5f02\u5e38\u4e32\u884c\u5316\uff08\u53ef\u4ecebacktesting\u4f20\u9001\u5230traderclient\u5e76\u6062\u590d\uff09 * \u5f15\u5165omicron.core.backtestlog\uff0c\u5b9e\u73b0\u56de\u6d4b\u65f6\u65e5\u5fd7\u8f93\u51fa\u4f7f\u7528\u56de\u6d4b\u65f6\u95f4\uff0c\u800c\u975e\u7cfb\u7edf\u65f6\u95f4\u3002 0.4.17 (2022-11-15) \u00b6 1 [#31](https://github.com/zillionare/backtesting/issues/31) \u64ae\u5408\u65f6\uff0c\u5982\u679c\u4ef7\u683c\u80fd\u5339\u914d\uff0c\u4f46\u6210\u4ea4\u91cf\u4e3a\u96f6\uff0c\u5219\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u4e70\u5165/\u5356\u51fa\u5747\u4ef7\u9519\u8bef\u3002\u4fee\u590d\u540e\uff0c\u9047\u5230\u6b64\u79cd\u60c5\u51b5\uff0c\u4f1a\u629b\u51faVOLUME_NOT_ENOUGH\u5f02\u5e38\uff0c\u5ba2\u6237\u7aef\u9700\u8981\u4ee5\u5408\u9002\u7684\u4ef7\u683c\u91cd\u65b0\u586b\u5355\u4ee5\u5b8c\u6210\u4ea4\u6613\u3002 0.4.16 (2022-11-07) \u00b6 #29 \u80a1\u7968\u8fdb\u884c\u4e86\u5206\u7ea2\u914d\u80a1\u540e\uff0c\u67e5\u8be2\u6709\u6301\u4ed3\uff0c\u5374\u65e0\u6cd5\u5356\u51fa\u3002 #30 \u6301\u4ed3\u663e\u793a\u4e2a\u80a1\u80a1\u6570\u4e3a\u5f88\u5c0f\u7684\u5c0f\u6570 0.4.13 (2022-09-08) \u00b6 #28 \u901a\u8fc7\u5347\u7ea7omicron\u52302.0.0.a45\uff0c\u4fee\u590d\u6b64\u95ee\u9898\u3002 0.4.12 \uff082022-09-03\uff09 \u00b6 * #27 \u901a\u8fc7\u5347\u7ea7omicron\u52302.0.0.a41,\u4fee\u590d\u6b64\u95ee\u9898\u3002 0.4.11 \u00b6 * #26 \u5bb9\u5668\u4e2d\u4f7f\u7528\u4e86\u9519\u8bef\u7684numpy\u7248\u672c\uff0c\u5bfc\u81f4\u4e86\u672c\u9519\u8bef\u3002 0.4.10 \u00b6 #22 bills\u63a5\u53e3\u8fd4\u56de\u7684'tx'\u5b57\u6bb5\u4e2d\u7684pprofit\u8ba1\u7b97\u9519\u8bef #25 get_assets\u4e2d\uff0c\u5982\u679c\u4f20\u5165\u4e86start\u53c2\u6570\uff0c\u5219\u4f1a\u629b\u51fa\"operands could not be broadcast\"\u5f02\u5e38\u3002 0.4.9 \u00b6 \u5f15\u5165omicron 2.0.0.a37 #18 \u5c06\u5bb9\u5668\u4e2d\u7684/var/log/backtest\u76ee\u5f55\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u3002 #19 \u5206\u7ea2\u9001\u80a1\u989d\u663e\u793a\u5f02\u5e38 #20 \u83b7\u53d6600361\u57282022-08-11\u7684\u884c\u60c5\u6570\u636e\u5931\u8d25\u3002 0.4.8 \u00b6 (#17) \u5f53\u6301\u4ed3\u80a1\u5b58\u5728\u9664\u6743\u9664\u606f\u65f6\uff0c\u4f1a\u5bfc\u81f4\u65b0\u589e\u7684\u7c7b\u578b\u4e3aEntrustSide.XDXR\u7684Trader,\u5176price\u5b57\u6bb5\u4e3a\u6570\u7ec4\uff0c\u4ece\u800c\u5bfc\u81f4metrics\u8ba1\u7b97\u5931\u8bef\uff08\u5f53\u7136\u4e5f\u4f1a\u5f15\u8d77\u5176\u5b83\u9519\u8bef\uff09\u3002 (#18) \u5141\u8bb8\u5c06\u65e5\u5fd7\u6587\u4ef6\u76ee\u5f55/var/log/backtest\u6620\u5c04\u5230host\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\u3002 0.4.7 \u00b6 (#16) \u5f53\u6301\u4ed3\u4e2d\u6709\u505c\u724c\u7684\u80a1\u7968\u65f6\uff0c\u8ba1\u7b97assets\u65f6\uff0c\u56e0\u53d6\u4e0d\u5230\u6307\u5b9a\u671f\u7684\u4ef7\u683c\u6570\u636e\uff0c\u5bfc\u81f4\u8ba1\u7b97\u9519\u8bef\u3002 0.4.6 \u00b6 (#15) \u5982\u679c\u6301\u4ed3\u4e2d\u6709\u957f\u671f\u505c\u724c\u7684\u80a1\u7968\uff0c\u53ef\u80fd\u5bfc\u81f4\u629b\u51fa\u5f02\u5e38\u3002 0.4.5 \u00b6 (#14) \u5982\u679c\u6301\u4ed3\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u6301\u4ed3\u80a1\u5904\u5728\u505c\u724c\u671f\uff0c\u6b64\u65f6\u5176\u5b83\u80a1\u7968\u4e5f\u4e0d\u80fd\u4ea4\u6613\uff08\u4e70\u5165\u6216\u8005\u5356\u51fa\uff09\u3002 0.4.4 \u00b6 \u5728\u5356\u51fa\u65f6\uff0c\u5141\u8bb8\u59d4\u5356\u80a1\u4e3a\u975e\u6574\u6570 (#12) \u4fee\u590d\u4e86\u5728\u6ca1\u6709\u8fdb\u884c\u8fc7\u4ea4\u6613\u4e4b\u524d\u5c31\u901a\u8fc7get_assets\u67e5\u8be2\u8d44\u4ea7\u65f6\u62a5\u9519 (#13) \u4fee\u590d\u4e86\u5206\u7ea2\u548c\u9001\u8f6c\u80a1\u65e0\u6cd5\u5356\u51fa\u7684\u95ee\u9898 0.4.3 \uff082022-06-22\uff09 \u00b6 (#9, #8) \u901a\u8fc7bills\u548cpositions\u63a5\u53e3\u53d6\u5f97\u7684\u6301\u4ed3\u6570\u636e\u5305\u542b\u6301\u4ed3\u80a1\u6570\u4e3a\u96f6\u7684\u6570\u636e\uff0c\u5df2\u6392\u9664 \u6027\u80fd\u589e\u5f3a\uff1a\u5982\u679c\u6301\u4ed3\u8868\u4e2d\u67d0\u9879\u80a1\u6570\u4e3a\u96f6\uff0c\u5219\u5728\u8ba1\u7b97\u5e02\u503c\u65f6\u76f4\u63a5\u8df3\u8fc7\uff0c\u4e0d\u518d\u67e5\u8be2\u6536\u76d8\u4ef7\u548c\u9664\u6743\u9664\u606f\u4fe1\u606f\u3002 bill\u63a5\u53e3\u4e2d\u7684\u6301\u4ed3\u6570\u636e\u6ca1\u6709\u5305\u542b\u65e5\u671f(#7) 0.4.1 (2022-06-06) \u00b6 \u5728datetime\uff08\u800c\u4e0d\u662fdate)\u7ea7\u522b\u4e0a\u9650\u5236\u59d4\u6258\u65f6\u95f4\u5fc5\u987b\u4e25\u683c\u9012\u589e\u3002 \u589e\u52a0stop_backtest\u63a5\u53e3 \u6027\u80fd\u6539\u8fdb\uff1a\u5c06\u8ba1\u7b97\u8d44\u4ea7(assets)\u7684\u65f6\u95f4\u8fdb\u884c\u5206\u644a\uff0c\u4ee5\u4fbf\u56de\u6d4b\u7ed3\u675f\u65f6\uff0c\u53ef\u4ee5\u66f4\u5feb\u5f97\u5230metrics the root '/' path will now display greeting message along with endpoint information in json. 0.4 (2022-06-05) \u00b6 add get_assets interface 0.3.1 (2022-05-31) \u00b6 if order_time <= 09:31, then use open price to match support xdxr 0.1.0 (2022-03-09) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"Info (#{number}) means an issue of this project. You may check details of the issue by visiting https://github.com/zillionare/backtesting/issues/ {number}","title":"History"},{"location":"history/#042-2023-11-5","text":"1 2 * \u5f15\u5165zillionare-core-types 0.6.2\u7684\u5f02\u5e38\u7c7b\u4f53\u7cfb\uff0c\u5b9e\u73b0\u4e86\u5c42\u6b21\u5316\u7684\u5f02\u5e38\uff0c\u4ee5\u53ca\u5f02\u5e38\u4e32\u884c\u5316\uff08\u53ef\u4ecebacktesting\u4f20\u9001\u5230traderclient\u5e76\u6062\u590d\uff09 * \u5f15\u5165omicron.core.backtestlog\uff0c\u5b9e\u73b0\u56de\u6d4b\u65f6\u65e5\u5fd7\u8f93\u51fa\u4f7f\u7528\u56de\u6d4b\u65f6\u95f4\uff0c\u800c\u975e\u7cfb\u7edf\u65f6\u95f4\u3002","title":"0.4.2 \uff082023-11-5\uff09"},{"location":"history/#0417-2022-11-15","text":"1 [#31](https://github.com/zillionare/backtesting/issues/31) \u64ae\u5408\u65f6\uff0c\u5982\u679c\u4ef7\u683c\u80fd\u5339\u914d\uff0c\u4f46\u6210\u4ea4\u91cf\u4e3a\u96f6\uff0c\u5219\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u4e70\u5165/\u5356\u51fa\u5747\u4ef7\u9519\u8bef\u3002\u4fee\u590d\u540e\uff0c\u9047\u5230\u6b64\u79cd\u60c5\u51b5\uff0c\u4f1a\u629b\u51faVOLUME_NOT_ENOUGH\u5f02\u5e38\uff0c\u5ba2\u6237\u7aef\u9700\u8981\u4ee5\u5408\u9002\u7684\u4ef7\u683c\u91cd\u65b0\u586b\u5355\u4ee5\u5b8c\u6210\u4ea4\u6613\u3002","title":"0.4.17 (2022-11-15)"},{"location":"history/#0416-2022-11-07","text":"#29 \u80a1\u7968\u8fdb\u884c\u4e86\u5206\u7ea2\u914d\u80a1\u540e\uff0c\u67e5\u8be2\u6709\u6301\u4ed3\uff0c\u5374\u65e0\u6cd5\u5356\u51fa\u3002 #30 \u6301\u4ed3\u663e\u793a\u4e2a\u80a1\u80a1\u6570\u4e3a\u5f88\u5c0f\u7684\u5c0f\u6570","title":"0.4.16 (2022-11-07)"},{"location":"history/#0413-2022-09-08","text":"#28 \u901a\u8fc7\u5347\u7ea7omicron\u52302.0.0.a45\uff0c\u4fee\u590d\u6b64\u95ee\u9898\u3002","title":"0.4.13 (2022-09-08)"},{"location":"history/#0412-2022-09-03","text":"* #27 \u901a\u8fc7\u5347\u7ea7omicron\u52302.0.0.a41,\u4fee\u590d\u6b64\u95ee\u9898\u3002","title":"0.4.12 \uff082022-09-03\uff09"},{"location":"history/#0411","text":"* #26 \u5bb9\u5668\u4e2d\u4f7f\u7528\u4e86\u9519\u8bef\u7684numpy\u7248\u672c\uff0c\u5bfc\u81f4\u4e86\u672c\u9519\u8bef\u3002","title":"0.4.11"},{"location":"history/#0410","text":"#22 bills\u63a5\u53e3\u8fd4\u56de\u7684'tx'\u5b57\u6bb5\u4e2d\u7684pprofit\u8ba1\u7b97\u9519\u8bef #25 get_assets\u4e2d\uff0c\u5982\u679c\u4f20\u5165\u4e86start\u53c2\u6570\uff0c\u5219\u4f1a\u629b\u51fa\"operands could not be broadcast\"\u5f02\u5e38\u3002","title":"0.4.10"},{"location":"history/#049","text":"\u5f15\u5165omicron 2.0.0.a37 #18 \u5c06\u5bb9\u5668\u4e2d\u7684/var/log/backtest\u76ee\u5f55\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u3002 #19 \u5206\u7ea2\u9001\u80a1\u989d\u663e\u793a\u5f02\u5e38 #20 \u83b7\u53d6600361\u57282022-08-11\u7684\u884c\u60c5\u6570\u636e\u5931\u8d25\u3002","title":"0.4.9"},{"location":"history/#048","text":"(#17) \u5f53\u6301\u4ed3\u80a1\u5b58\u5728\u9664\u6743\u9664\u606f\u65f6\uff0c\u4f1a\u5bfc\u81f4\u65b0\u589e\u7684\u7c7b\u578b\u4e3aEntrustSide.XDXR\u7684Trader,\u5176price\u5b57\u6bb5\u4e3a\u6570\u7ec4\uff0c\u4ece\u800c\u5bfc\u81f4metrics\u8ba1\u7b97\u5931\u8bef\uff08\u5f53\u7136\u4e5f\u4f1a\u5f15\u8d77\u5176\u5b83\u9519\u8bef\uff09\u3002 (#18) \u5141\u8bb8\u5c06\u65e5\u5fd7\u6587\u4ef6\u76ee\u5f55/var/log/backtest\u6620\u5c04\u5230host\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\u3002","title":"0.4.8"},{"location":"history/#047","text":"(#16) \u5f53\u6301\u4ed3\u4e2d\u6709\u505c\u724c\u7684\u80a1\u7968\u65f6\uff0c\u8ba1\u7b97assets\u65f6\uff0c\u56e0\u53d6\u4e0d\u5230\u6307\u5b9a\u671f\u7684\u4ef7\u683c\u6570\u636e\uff0c\u5bfc\u81f4\u8ba1\u7b97\u9519\u8bef\u3002","title":"0.4.7"},{"location":"history/#046","text":"(#15) \u5982\u679c\u6301\u4ed3\u4e2d\u6709\u957f\u671f\u505c\u724c\u7684\u80a1\u7968\uff0c\u53ef\u80fd\u5bfc\u81f4\u629b\u51fa\u5f02\u5e38\u3002","title":"0.4.6"},{"location":"history/#045","text":"(#14) \u5982\u679c\u6301\u4ed3\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u6301\u4ed3\u80a1\u5904\u5728\u505c\u724c\u671f\uff0c\u6b64\u65f6\u5176\u5b83\u80a1\u7968\u4e5f\u4e0d\u80fd\u4ea4\u6613\uff08\u4e70\u5165\u6216\u8005\u5356\u51fa\uff09\u3002","title":"0.4.5"},{"location":"history/#044","text":"\u5728\u5356\u51fa\u65f6\uff0c\u5141\u8bb8\u59d4\u5356\u80a1\u4e3a\u975e\u6574\u6570 (#12) \u4fee\u590d\u4e86\u5728\u6ca1\u6709\u8fdb\u884c\u8fc7\u4ea4\u6613\u4e4b\u524d\u5c31\u901a\u8fc7get_assets\u67e5\u8be2\u8d44\u4ea7\u65f6\u62a5\u9519 (#13) \u4fee\u590d\u4e86\u5206\u7ea2\u548c\u9001\u8f6c\u80a1\u65e0\u6cd5\u5356\u51fa\u7684\u95ee\u9898","title":"0.4.4"},{"location":"history/#043-2022-06-22","text":"(#9, #8) \u901a\u8fc7bills\u548cpositions\u63a5\u53e3\u53d6\u5f97\u7684\u6301\u4ed3\u6570\u636e\u5305\u542b\u6301\u4ed3\u80a1\u6570\u4e3a\u96f6\u7684\u6570\u636e\uff0c\u5df2\u6392\u9664 \u6027\u80fd\u589e\u5f3a\uff1a\u5982\u679c\u6301\u4ed3\u8868\u4e2d\u67d0\u9879\u80a1\u6570\u4e3a\u96f6\uff0c\u5219\u5728\u8ba1\u7b97\u5e02\u503c\u65f6\u76f4\u63a5\u8df3\u8fc7\uff0c\u4e0d\u518d\u67e5\u8be2\u6536\u76d8\u4ef7\u548c\u9664\u6743\u9664\u606f\u4fe1\u606f\u3002 bill\u63a5\u53e3\u4e2d\u7684\u6301\u4ed3\u6570\u636e\u6ca1\u6709\u5305\u542b\u65e5\u671f(#7)","title":"0.4.3 \uff082022-06-22\uff09"},{"location":"history/#041-2022-06-06","text":"\u5728datetime\uff08\u800c\u4e0d\u662fdate)\u7ea7\u522b\u4e0a\u9650\u5236\u59d4\u6258\u65f6\u95f4\u5fc5\u987b\u4e25\u683c\u9012\u589e\u3002 \u589e\u52a0stop_backtest\u63a5\u53e3 \u6027\u80fd\u6539\u8fdb\uff1a\u5c06\u8ba1\u7b97\u8d44\u4ea7(assets)\u7684\u65f6\u95f4\u8fdb\u884c\u5206\u644a\uff0c\u4ee5\u4fbf\u56de\u6d4b\u7ed3\u675f\u65f6\uff0c\u53ef\u4ee5\u66f4\u5feb\u5f97\u5230metrics the root '/' path will now display greeting message along with endpoint information in json.","title":"0.4.1 (2022-06-06)"},{"location":"history/#04-2022-06-05","text":"add get_assets interface","title":"0.4 (2022-06-05)"},{"location":"history/#031-2022-05-31","text":"if order_time <= 09:31, then use open price to match support xdxr","title":"0.3.1 (2022-05-31)"},{"location":"history/#010-2022-03-09","text":"First release on PyPI.","title":"0.1.0 (2022-03-09)"},{"location":"installation/","text":"\u4ee5docker\u5bb9\u5668\u8fd0\u884c \u00b6 docker run -d --name bt -v /host/config:/config -v /var/log/backtest:/var/log/backtest -e PORT=3180 -p 3180:3180 backtest \u4e0a\u8ff0\u547d\u4ee4\u4e2d\uff0c\u5c06\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55/host/config\u6620\u5c04\u5230\u5bb9\u5668\u4e2d\u7684/config\u76ee\u5f55\uff0c\u5c06\u672c\u5730\u7684/var/log/backtest\u6620\u5c04\u5230\u5bb9\u5668\u7684/var/log/backtest\uff0c\u5e76\u4e14\u6307\u5b9a\u73af\u5883\u53d8\u91cfPORT=3180,\u5e76\u4e14\u5c06\u5bb9\u5668\u76843180\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u76843180\u7aef\u53e3\u3002\u8fd9\u91cc\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55\u6620\u5c04\u662f\u5fc5\u987b\u7684\uff0c\u5426\u5219\u670d\u52a1\u5668\u65e0\u6cd5\u542f\u52a8\u3002\u5982\u679c\u6307\u5b9a\u4e86/var/log/backtest\u7684\u6620\u5c04\uff0c\u5219\u5bb9\u5668\u7684\u65e5\u5fd7\u5c06\u8f93\u51fa\u5230\u5bbf\u4e3b\u673a\u7684/var/log/backtest\u76ee\u5f55\u4e2d\u3002 \u5982\u679c\u4e0d\u6307\u5b9aPORT\uff0c\u5219\u9ed8\u8ba4\u4e3a7080\uff0c\u6b64\u65f6\u7aef\u53e3\u6620\u5c04\u4e5f\u5e94\u8be5\u76f8\u5e94\u4fee\u6539\u4e3a -p 7080:7080\u3002 Info \u8fd9\u91cc-e PORT 3180\u7684\u4f5c\u7528\u662f\uff0c\u8ba9\u5bb9\u5668\u5185\u90e8\u7684backtest\u670d\u52a1\u5668\u76d1\u542c\u57283180\u7aef\u53e3\uff0c\u800c-p 3180:3180\u5219\u662f\u8ba9\u5bb9\u5668\u76843180\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u76843180\u7aef\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u5916\u90e8\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u5bb9\u5668\u91cc\u7684\u670d\u52a1\u3002 \u5728/host/config\u76ee\u5f55\uff08\u8fd9\u662f\u4e00\u4e2ahost\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\uff09\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3adefaults.yaml\u7684\u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u89c1 \u914d\u7f6e\u6587\u4ef6 \u6ce8\u610fbacktest\u5e76\u4e0d\u652f\u6301https\u3002\u5982\u679chttps\u5bf9\u60a8\u800c\u8a00\u6bd4\u8f83\u91cd\u8981\uff0c\u8bf7\u5728backtest server\u4e4b\u524d\u589e\u52a0nginx\u4e00\u7c7b\u7684\u670d\u52a1\u6765\u5b9e\u73b0\u3002 \u672c\u5730\u5b89\u88c5\u8fd0\u884c \u00b6 To install zillionare-backtest, run this command in your terminal: 1 $ pip install zillionare-backtest \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u901a\u8fc7\u547d\u4ee4\u542f\u52a8\u670d\u52a1\uff1a 1 bt start \u7ec8\u6b62\u670d\u52a1\uff1a 1 bt stop \u67e5\u770b\u670d\u52a1\u72b6\u6001\uff1a 1 bt status \u914d\u7f6e\u6587\u4ef6 \u00b6 \u8fd0\u884cbacktest\u4e4b\u524d\uff0c\u5fc5\u987b\u8981\u7ed9\u5176\u914d\u7f6e\u6570\u636e\u6e90\u7b49\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\u3002\u8be5\u6587\u4ef6\u4e3ayaml\u6587\u4ef6\uff0c\u5176\u4f4d\u7f6e\u548c\u89e3\u6790\u8bf7\u53c2\u8003 cfg4py \u7684\u89c4\u8303\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #auto generated by Cfg4Py: https://github.com/jieyu-tech/cfg4py logging : version : 1 disable_existing_loggers : false formatters : default : format : '%(bt_date)s %(levelname)-1.1s %(name)s:%(funcName)s:%(lineno)s | %(message)s' bare : format : '%(message)s' handlers : console : class : logging.StreamHandler formatter : default file : class : logging.handlers.RotatingFileHandler formatter : default filename : /var/log/backtest/backtest.log maxBytes : 10485760 backupCount : 10 encoding : utf-8 entrust : class : logging.handlers.RotatingFileHandler formatter : bare filename : /var/log/backtest/entrust.log maxBytes : 10485760 backupCount : 10 encoding : utf-8 trade : class : logging.handlers.RotatingFileHandler formatter : bare filename : /var/log/backtest/trade.log maxBytes : 10485760 backupCount : 10 encoding : utf-8 loggers : apscheduler : level : INFO sanic : level : WARNING cfg4py : level : WARNING entrust : level : INFO handlers : [ entrust ] propagate : false trade : level : INFO handlers : [ trade ] propagate : false root : handlers : - file level : INFO metrics : risk_free_rate : 0.03 annual_days : 252 server : prefix : /backtest/api/trade/ auth : admin : bGZJGEZ feed : # the only type currently supported type : zillionare redis : dsn : redis://${REDIS_HOST}:${REDIS_PORT} influxdb : url : http://${INFLUXDB_HOST}:${INFLUXDB_PORT} token : ${INFLUXDB_TOKEN} org : ${INFLUXDB_ORG} bucket_name : ${INFLUXDB_BUCKET_NAME} enable_compress : true Important \u6ce8\u610f\u901a\u8fc7\u5bb9\u5668\u6765\u4f7f\u7528backtest\u65f6\uff0c\u8bf7\u786e\u4fdd\u65e5\u5fd7\u6587\u4ef6\u4f7f\u7528\u9ed8\u8ba4\u4f4d\u7f6e\uff0c\u5373/var/log/backtest\uff0c\u53ea\u6709\u8fd9\u6837\uff0c\u60a8\u624d\u80fd\u5c06\u5176\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u4e0a\u7684\u67d0\u4e2a\u6587\u4ef6\u5939\uff0c\u56e0\u4e3a\u5728\u5bb9\u5668\u91cc\uff0c\u6211\u4eec\u4e3a\u65e5\u5fd7\u6587\u4ef6\u6307\u5b9a\u7684\u5377(VOLUME)\u56fa\u5b9a\u4e3a/var/log/backtest. Important \u6ce8\u610f\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 /backtest/api/trade/ \uff0c\u5b83\u7528\u6765\u6307\u5b9abacktest server\u76d1\u542c\u7aef\u70b9\u7684\u524d\u7f00\uff0c\u4ee5\u4fbf\u60a8\u5728\u591a\u7ec4\u670d\u52a1\u95f4\u8fdb\u884c\u533a\u5206\u3002\u800c\u6700\u7ec8\u7684\u76d1\u542c\u7aef\u70b9\uff0c\u5219\u662fprefix + version + command\u3002\u6bd4\u5982\uff0c\u5047\u8bbe\u60a8\u7684\u670d\u52a1\u5668\u5730\u5740\u4e3a192.168.1.1\uff0c\u800c\u7aef\u53e3\u8bbe\u7f6e\u4e3a3180\uff0c\u5f53\u524d\u7248\u672c\u4e3a0.3\uff0c\u5219\u60a8\u7684 traderclient \u5e94\u8be5\u6307\u5411 http://192.168.1.1:3180/backtest/api/trade/v0.3/ \u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee http://192.168.1.1:3180/ \u6765\u5f97\u5230\u8fd9\u4e2a\u76d1\u542c\u7aef\u70b9\u5730\u5740\u3002 Info \u8fd9\u91cc\u7684 bt_date \u5e76\u975e Python \u4e2d logging \u6a21\u5757\u652f\u6301\u7684\u6a21\u5f0f\u4e32\u5173\u952e\u5b57\uff0c\u5b83\u6765\u81ea\u4e8e omicron.core.backtestlog \uff0c\u8be5\u529f\u80fd\u4eceomicron 2.0.0.a76\u7248\u672c\u4e4b\u540e\u63d0\u4f9b\u3002 \u7b2c\u4e00\u90e8\u5206\u662f\u544a\u8bc9backtest\u5982\u4f55\u8f93\u51fa\u65e5\u5fd7\u3002\u6ce8\u610f\u8fd9\u91cc\u9664\u4e86\u914d\u7f6e\u4e00\u822c\u65e5\u5fd7\u5916\uff0c\u8fd8\u914d\u7f6e\u4e86entrust\u548ctrade\u4e24\u4e2a\u4e8b\u52a1\u65e5\u5fd7\uff0c\u8fd9\u4e24\u4e2a\u65e5\u5fd7\u662f\u4f9b\u6570\u636e\u6821\u9a8c\u4f7f\u7528\u7684\u3002 \u7136\u540e\u662f\u5173\u4e8e\u8ba1\u7b97metrics\u65f6\u7684\u53c2\u6570\u914d\u7f6e\u3002risk_free_rate\u662f\u65e0\u98ce\u9669\u6536\u76ca\u7387\uff0cannual_days\u662f\u4e00\u5e74\u7684\u5929\u6570\uff0c\u8fd9\u4e9b\u90fd\u662f\u5728\u8ba1\u7b97\u4e00\u4e9b\u6307\u6807\uff0c\u6bd4\u5982sharpe\u7387\u7b49\u65f6\u9700\u8981\u7684\u3002 auth \u5b57\u6bb5\u7528\u4e8e\u9a8c\u8bc1\u7ba1\u7406\u5458\u8eab\u4efd\u3002 feed \u5b57\u6bb5\u76ee\u524d\u7528\u4e8e\u914d\u7f6e\u6570\u636e\u6e90\u3002\u5f53\u524d\u53ea\u652f\u6301\u4e00\u79cd\u6570\u636e\u6e90\u5373zillionare\u6570\u636e\u6e90\u3002\u5b83\u8981\u6c42\u60a8\u7684\u7cfb\u7edf\u4e2d\u5b89\u88c5\u6709 omega\u670d\u52a1 \u3002 \u968f\u540e\u51fa\u73b0\u7684 redis \u548c influxdb \u5b57\u6bb5\u6b63\u662fomega\u670d\u52a1\u4e2d\uff0c\u7f13\u5b58\u548c\u6301\u4e45\u5316\u6570\u636e\u6240\u9700\u8981\u7684\u6570\u636e\u5e93\u914d\u7f6e\u3002","title":"installation"},{"location":"installation/#\u4ee5docker\u5bb9\u5668\u8fd0\u884c","text":"docker run -d --name bt -v /host/config:/config -v /var/log/backtest:/var/log/backtest -e PORT=3180 -p 3180:3180 backtest \u4e0a\u8ff0\u547d\u4ee4\u4e2d\uff0c\u5c06\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55/host/config\u6620\u5c04\u5230\u5bb9\u5668\u4e2d\u7684/config\u76ee\u5f55\uff0c\u5c06\u672c\u5730\u7684/var/log/backtest\u6620\u5c04\u5230\u5bb9\u5668\u7684/var/log/backtest\uff0c\u5e76\u4e14\u6307\u5b9a\u73af\u5883\u53d8\u91cfPORT=3180,\u5e76\u4e14\u5c06\u5bb9\u5668\u76843180\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u76843180\u7aef\u53e3\u3002\u8fd9\u91cc\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55\u6620\u5c04\u662f\u5fc5\u987b\u7684\uff0c\u5426\u5219\u670d\u52a1\u5668\u65e0\u6cd5\u542f\u52a8\u3002\u5982\u679c\u6307\u5b9a\u4e86/var/log/backtest\u7684\u6620\u5c04\uff0c\u5219\u5bb9\u5668\u7684\u65e5\u5fd7\u5c06\u8f93\u51fa\u5230\u5bbf\u4e3b\u673a\u7684/var/log/backtest\u76ee\u5f55\u4e2d\u3002 \u5982\u679c\u4e0d\u6307\u5b9aPORT\uff0c\u5219\u9ed8\u8ba4\u4e3a7080\uff0c\u6b64\u65f6\u7aef\u53e3\u6620\u5c04\u4e5f\u5e94\u8be5\u76f8\u5e94\u4fee\u6539\u4e3a -p 7080:7080\u3002 Info \u8fd9\u91cc-e PORT 3180\u7684\u4f5c\u7528\u662f\uff0c\u8ba9\u5bb9\u5668\u5185\u90e8\u7684backtest\u670d\u52a1\u5668\u76d1\u542c\u57283180\u7aef\u53e3\uff0c\u800c-p 3180:3180\u5219\u662f\u8ba9\u5bb9\u5668\u76843180\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u76843180\u7aef\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u5916\u90e8\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u5bb9\u5668\u91cc\u7684\u670d\u52a1\u3002 \u5728/host/config\u76ee\u5f55\uff08\u8fd9\u662f\u4e00\u4e2ahost\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\uff09\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3adefaults.yaml\u7684\u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u89c1 \u914d\u7f6e\u6587\u4ef6 \u6ce8\u610fbacktest\u5e76\u4e0d\u652f\u6301https\u3002\u5982\u679chttps\u5bf9\u60a8\u800c\u8a00\u6bd4\u8f83\u91cd\u8981\uff0c\u8bf7\u5728backtest server\u4e4b\u524d\u589e\u52a0nginx\u4e00\u7c7b\u7684\u670d\u52a1\u6765\u5b9e\u73b0\u3002","title":"\u4ee5docker\u5bb9\u5668\u8fd0\u884c"},{"location":"installation/#\u672c\u5730\u5b89\u88c5\u8fd0\u884c","text":"To install zillionare-backtest, run this command in your terminal: 1 $ pip install zillionare-backtest \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u901a\u8fc7\u547d\u4ee4\u542f\u52a8\u670d\u52a1\uff1a 1 bt start \u7ec8\u6b62\u670d\u52a1\uff1a 1 bt stop \u67e5\u770b\u670d\u52a1\u72b6\u6001\uff1a 1 bt status","title":"\u672c\u5730\u5b89\u88c5\u8fd0\u884c"},{"location":"installation/#\u914d\u7f6e\u6587\u4ef6","text":"\u8fd0\u884cbacktest\u4e4b\u524d\uff0c\u5fc5\u987b\u8981\u7ed9\u5176\u914d\u7f6e\u6570\u636e\u6e90\u7b49\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\u3002\u8be5\u6587\u4ef6\u4e3ayaml\u6587\u4ef6\uff0c\u5176\u4f4d\u7f6e\u548c\u89e3\u6790\u8bf7\u53c2\u8003 cfg4py \u7684\u89c4\u8303\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #auto generated by Cfg4Py: https://github.com/jieyu-tech/cfg4py logging : version : 1 disable_existing_loggers : false formatters : default : format : '%(bt_date)s %(levelname)-1.1s %(name)s:%(funcName)s:%(lineno)s | %(message)s' bare : format : '%(message)s' handlers : console : class : logging.StreamHandler formatter : default file : class : logging.handlers.RotatingFileHandler formatter : default filename : /var/log/backtest/backtest.log maxBytes : 10485760 backupCount : 10 encoding : utf-8 entrust : class : logging.handlers.RotatingFileHandler formatter : bare filename : /var/log/backtest/entrust.log maxBytes : 10485760 backupCount : 10 encoding : utf-8 trade : class : logging.handlers.RotatingFileHandler formatter : bare filename : /var/log/backtest/trade.log maxBytes : 10485760 backupCount : 10 encoding : utf-8 loggers : apscheduler : level : INFO sanic : level : WARNING cfg4py : level : WARNING entrust : level : INFO handlers : [ entrust ] propagate : false trade : level : INFO handlers : [ trade ] propagate : false root : handlers : - file level : INFO metrics : risk_free_rate : 0.03 annual_days : 252 server : prefix : /backtest/api/trade/ auth : admin : bGZJGEZ feed : # the only type currently supported type : zillionare redis : dsn : redis://${REDIS_HOST}:${REDIS_PORT} influxdb : url : http://${INFLUXDB_HOST}:${INFLUXDB_PORT} token : ${INFLUXDB_TOKEN} org : ${INFLUXDB_ORG} bucket_name : ${INFLUXDB_BUCKET_NAME} enable_compress : true Important \u6ce8\u610f\u901a\u8fc7\u5bb9\u5668\u6765\u4f7f\u7528backtest\u65f6\uff0c\u8bf7\u786e\u4fdd\u65e5\u5fd7\u6587\u4ef6\u4f7f\u7528\u9ed8\u8ba4\u4f4d\u7f6e\uff0c\u5373/var/log/backtest\uff0c\u53ea\u6709\u8fd9\u6837\uff0c\u60a8\u624d\u80fd\u5c06\u5176\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\u4e0a\u7684\u67d0\u4e2a\u6587\u4ef6\u5939\uff0c\u56e0\u4e3a\u5728\u5bb9\u5668\u91cc\uff0c\u6211\u4eec\u4e3a\u65e5\u5fd7\u6587\u4ef6\u6307\u5b9a\u7684\u5377(VOLUME)\u56fa\u5b9a\u4e3a/var/log/backtest. Important \u6ce8\u610f\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 /backtest/api/trade/ \uff0c\u5b83\u7528\u6765\u6307\u5b9abacktest server\u76d1\u542c\u7aef\u70b9\u7684\u524d\u7f00\uff0c\u4ee5\u4fbf\u60a8\u5728\u591a\u7ec4\u670d\u52a1\u95f4\u8fdb\u884c\u533a\u5206\u3002\u800c\u6700\u7ec8\u7684\u76d1\u542c\u7aef\u70b9\uff0c\u5219\u662fprefix + version + command\u3002\u6bd4\u5982\uff0c\u5047\u8bbe\u60a8\u7684\u670d\u52a1\u5668\u5730\u5740\u4e3a192.168.1.1\uff0c\u800c\u7aef\u53e3\u8bbe\u7f6e\u4e3a3180\uff0c\u5f53\u524d\u7248\u672c\u4e3a0.3\uff0c\u5219\u60a8\u7684 traderclient \u5e94\u8be5\u6307\u5411 http://192.168.1.1:3180/backtest/api/trade/v0.3/ \u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee http://192.168.1.1:3180/ \u6765\u5f97\u5230\u8fd9\u4e2a\u76d1\u542c\u7aef\u70b9\u5730\u5740\u3002 Info \u8fd9\u91cc\u7684 bt_date \u5e76\u975e Python \u4e2d logging \u6a21\u5757\u652f\u6301\u7684\u6a21\u5f0f\u4e32\u5173\u952e\u5b57\uff0c\u5b83\u6765\u81ea\u4e8e omicron.core.backtestlog \uff0c\u8be5\u529f\u80fd\u4eceomicron 2.0.0.a76\u7248\u672c\u4e4b\u540e\u63d0\u4f9b\u3002 \u7b2c\u4e00\u90e8\u5206\u662f\u544a\u8bc9backtest\u5982\u4f55\u8f93\u51fa\u65e5\u5fd7\u3002\u6ce8\u610f\u8fd9\u91cc\u9664\u4e86\u914d\u7f6e\u4e00\u822c\u65e5\u5fd7\u5916\uff0c\u8fd8\u914d\u7f6e\u4e86entrust\u548ctrade\u4e24\u4e2a\u4e8b\u52a1\u65e5\u5fd7\uff0c\u8fd9\u4e24\u4e2a\u65e5\u5fd7\u662f\u4f9b\u6570\u636e\u6821\u9a8c\u4f7f\u7528\u7684\u3002 \u7136\u540e\u662f\u5173\u4e8e\u8ba1\u7b97metrics\u65f6\u7684\u53c2\u6570\u914d\u7f6e\u3002risk_free_rate\u662f\u65e0\u98ce\u9669\u6536\u76ca\u7387\uff0cannual_days\u662f\u4e00\u5e74\u7684\u5929\u6570\uff0c\u8fd9\u4e9b\u90fd\u662f\u5728\u8ba1\u7b97\u4e00\u4e9b\u6307\u6807\uff0c\u6bd4\u5982sharpe\u7387\u7b49\u65f6\u9700\u8981\u7684\u3002 auth \u5b57\u6bb5\u7528\u4e8e\u9a8c\u8bc1\u7ba1\u7406\u5458\u8eab\u4efd\u3002 feed \u5b57\u6bb5\u76ee\u524d\u7528\u4e8e\u914d\u7f6e\u6570\u636e\u6e90\u3002\u5f53\u524d\u53ea\u652f\u6301\u4e00\u79cd\u6570\u636e\u6e90\u5373zillionare\u6570\u636e\u6e90\u3002\u5b83\u8981\u6c42\u60a8\u7684\u7cfb\u7edf\u4e2d\u5b89\u88c5\u6709 omega\u670d\u52a1 \u3002 \u968f\u540e\u51fa\u73b0\u7684 redis \u548c influxdb \u5b57\u6bb5\u6b63\u662fomega\u670d\u52a1\u4e2d\uff0c\u7f13\u5b58\u548c\u6301\u4e45\u5316\u6570\u636e\u6240\u9700\u8981\u7684\u6570\u636e\u5e93\u914d\u7f6e\u3002","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"usage/","text":"\u5ba2\u6237\u7aef\u5b89\u88c5\u548c\u4f7f\u7528 \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e94\u8be5\u901a\u8fc7 trader-client \u6765\u8fde\u63a5\u548c\u4f7f\u7528\u56de\u6d4b\uff0ctrader-client\u76f8\u5f53\u4e8e\u56de\u6d4b\u670d\u52a1\u5668\u7684client sdk\u3002 \u670d\u52a1\u5668\u914d\u7f6e \u00b6 \u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\u4f7f\u7528yaml\u683c\u5f0f\u3002\u8bf7\u53c2\u89c1 \u914d\u7f6e\u6587\u4ef6 \u4e00\u8282\u3002","title":"usage"},{"location":"usage/#\u5ba2\u6237\u7aef\u5b89\u88c5\u548c\u4f7f\u7528","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e94\u8be5\u901a\u8fc7 trader-client \u6765\u8fde\u63a5\u548c\u4f7f\u7528\u56de\u6d4b\uff0ctrader-client\u76f8\u5f53\u4e8e\u56de\u6d4b\u670d\u52a1\u5668\u7684client sdk\u3002","title":"\u5ba2\u6237\u7aef\u5b89\u88c5\u548c\u4f7f\u7528"},{"location":"usage/#\u670d\u52a1\u5668\u914d\u7f6e","text":"\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\u4f7f\u7528yaml\u683c\u5f0f\u3002\u8bf7\u53c2\u89c1 \u914d\u7f6e\u6587\u4ef6 \u4e00\u8282\u3002","title":"\u670d\u52a1\u5668\u914d\u7f6e"},{"location":"api/common/","text":"helper \u00b6 jsonify ( obj ) \u00b6 \u5c06\u5bf9\u8c61 obj \u8f6c\u6362\u6210\u4e3a\u53ef\u4ee5\u901a\u8fc7json.dumps\u5e8f\u5217\u5316\u7684\u5b57\u5178 \u672c\u65b9\u6cd5\u53ef\u4ee5\u5c06str, int, float, bool, datetime.date, datetime.datetime, \u6216\u8005\u63d0\u4f9b\u4e86isoformat\u65b9\u6cd5\u7684\u5176\u5b83\u65f6\u95f4\u7c7b\u578b\uff0c \u63d0\u4f9b\u4e86to_dict\u65b9\u6cd5\u7684\u5bf9\u8c61\u7c7b\u578b\uff08\u6bd4\u5982\u81ea\u5b9a\u4e49\u5bf9\u8c61\uff09\uff0c\u63d0\u4f9b\u4e86tolist\u6216\u8005__iter__\u65b9\u6cd5\u7684\u5e8f\u5217\u5bf9\u8c61\uff08\u6bd4\u5982numpy\u6570\u7ec4\uff09\uff0c\u6216\u8005\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e0a\u8ff0\u5bf9\u8c61\u7684\u590d\u5408\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u88ab\u6b63\u786e\u5730\u8f6c\u6362\u3002 \u8f6c\u6362\u4e2d\u4f9d\u7167\u4ee5\u4e0b\u987a\u5e8f\u8fdb\u884c\uff1a \u7b80\u5355\u7c7b\u578b\uff0c\u5982str, int, float, bool \u63d0\u4f9b\u4e86to_dict\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u5982\u679c\u662fnumpy\u6570\u7ec4\uff0c\u4f18\u5148\u6309tolist\u65b9\u6cd5\u8fdb\u884c\u8f6c\u6362 \u5982\u679c\u662f\u63d0\u4f9b\u4e86isoformat\u7684\u65f6\u95f4\u7c7b\u578b\uff0c\u4f18\u5148\u8f6c\u6362 \u5982\u679c\u5bf9\u8c61\u662fdict, \u6309dict\u8fdb\u884c\u8f6c\u6362 \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__iter__\u65b9\u6cd5\uff0c\u6309\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362 \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\uff0c\u6309dict\u8fdb\u884c\u8f6c\u6362 \u629b\u51fa\u5f02\u5e38 Parameters: Name Type Description Default obj object to convert required Returns: Type Description dict A dict able to be json dumps Source code in backtest/common/helper.py def jsonify ( obj ) -> dict : \"\"\"\u5c06\u5bf9\u8c61`obj`\u8f6c\u6362\u6210\u4e3a\u53ef\u4ee5\u901a\u8fc7json.dumps\u5e8f\u5217\u5316\u7684\u5b57\u5178 \u672c\u65b9\u6cd5\u53ef\u4ee5\u5c06str, int, float, bool, datetime.date, datetime.datetime, \u6216\u8005\u63d0\u4f9b\u4e86isoformat\u65b9\u6cd5\u7684\u5176\u5b83\u65f6\u95f4\u7c7b\u578b\uff0c \u63d0\u4f9b\u4e86to_dict\u65b9\u6cd5\u7684\u5bf9\u8c61\u7c7b\u578b\uff08\u6bd4\u5982\u81ea\u5b9a\u4e49\u5bf9\u8c61\uff09\uff0c\u63d0\u4f9b\u4e86tolist\u6216\u8005__iter__\u65b9\u6cd5\u7684\u5e8f\u5217\u5bf9\u8c61\uff08\u6bd4\u5982numpy\u6570\u7ec4\uff09\uff0c\u6216\u8005\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e0a\u8ff0\u5bf9\u8c61\u7684\u590d\u5408\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u88ab\u6b63\u786e\u5730\u8f6c\u6362\u3002 \u8f6c\u6362\u4e2d\u4f9d\u7167\u4ee5\u4e0b\u987a\u5e8f\u8fdb\u884c\uff1a 1. \u7b80\u5355\u7c7b\u578b\uff0c\u5982str, int, float, bool 2. \u63d0\u4f9b\u4e86to_dict\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b 3. \u5982\u679c\u662fnumpy\u6570\u7ec4\uff0c\u4f18\u5148\u6309tolist\u65b9\u6cd5\u8fdb\u884c\u8f6c\u6362 4. \u5982\u679c\u662f\u63d0\u4f9b\u4e86isoformat\u7684\u65f6\u95f4\u7c7b\u578b\uff0c\u4f18\u5148\u8f6c\u6362 5. \u5982\u679c\u5bf9\u8c61\u662fdict, \u6309dict\u8fdb\u884c\u8f6c\u6362 6. \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__iter__\u65b9\u6cd5\uff0c\u6309\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362 7. \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\uff0c\u6309dict\u8fdb\u884c\u8f6c\u6362 8. \u629b\u51fa\u5f02\u5e38 Args: obj : object to convert Returns: A dict able to be json dumps \"\"\" if obj is None or isinstance ( obj , ( str , int , float , bool )): return obj # type: ignore elif getattr ( obj , \"to_dict\" , False ): return jsonify ( obj . to_dict ()) elif getattr ( obj , \"tolist\" , False ): # for numpy array return jsonify ( obj . tolist ()) elif getattr ( obj , \"isoformat\" , False ): return obj . isoformat () elif isinstance ( obj , dict ): return { k : jsonify ( v ) for k , v in obj . items ()} elif getattr ( obj , \"__iter__\" , False ): # \u6ce8\u610fdict\u7c7b\u578b\u4e5f\u6709__iter__ return [ jsonify ( x ) for x in obj ] # type: ignore elif getattr ( obj , \"__dict__\" , False ): return { k : jsonify ( v ) for k , v in obj . __dict__ . items ()} else : raise ValueError ( f \" { obj } is not jsonable\" ) protected ( wrapped ) \u00b6 check token and duplicated request Source code in backtest/common/helper.py def protected ( wrapped ): \"\"\"check token and duplicated request\"\"\" def decorator ( f ): @wraps ( f ) async def decorated_function ( request , * args , ** kwargs ): is_authenticated = check_token ( request ) is_duplicated = check_duplicated_request ( request ) params = request . json or request . args command = request . server_path . split ( \"/\" )[ - 1 ] if is_authenticated and not is_duplicated : try : logger . info ( \"received request: %s , params %s \" , command , params ) result = await f ( request , * args , ** kwargs ) logger . info ( \"finished request: %s , params %s \" , command , params ) return result except TradeError as e1 : logger . exception ( e1 ) logger . warning ( \"request: %s failed: %s \" , command , params ) return response . json ( e1 . as_json (), status = 499 ) except Exception as e : logger . exception ( e ) logger . warning ( \" %s error: %s \" , f . __name__ , params ) e2 = TradeError ( str ( e )) return response . json ( e2 . as_json (), status = 499 ) elif not is_authenticated : logger . warning ( \"token is invalid: [ %s ]\" , request . token ) return response . json ({ \"msg\" : \"token is invalid\" }, 401 ) elif is_duplicated : return response . json ({ \"msg\" : \"duplicated request\" }, 200 ) return decorated_function return decorator ( wrapped ) protected_admin ( wrapped ) \u00b6 check token and duplicated request Source code in backtest/common/helper.py def protected_admin ( wrapped ): \"\"\"check token and duplicated request\"\"\" def decorator ( f ): @wraps ( f ) async def decorated_function ( request , * args , ** kwargs ): is_authenticated = check_admin_token ( request ) is_duplicated = check_duplicated_request ( request ) if is_authenticated and not is_duplicated : try : result = await f ( request , * args , ** kwargs ) return result except Exception as e : logger . exception ( e ) return response . text ( str ( e ), status = 500 ) elif not is_authenticated : logger . warning ( \"admin token is invalid: [ %s ]\" , request . token ) return response . text ( f \"token( { request . token } ) is invalid\" , 401 ) elif is_duplicated : return response . text ( f \"duplicated request: { request . ctx . request_id } \" , 200 ) return decorated_function return decorator ( wrapped ) tabulate_numpy_array ( arr ) \u00b6 \u5c06numpy structured array \u683c\u5f0f\u5316\u4e3a\u8868\u683c\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32 Parameters: Name Type Description Default arr description required Returns: Type Description str description Source code in backtest/common/helper.py def tabulate_numpy_array ( arr : np . ndarray ) -> str : \"\"\"\u5c06numpy structured array \u683c\u5f0f\u5316\u4e3a\u8868\u683c\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32 Args: arr : _description_ Returns: _description_ \"\"\" table = tabulate ( arr , headers = arr . dtype . names , tablefmt = \"fancy_grid\" ) return table","title":"Common"},{"location":"api/common/#backtest.common.helper","text":"","title":"helper"},{"location":"api/common/#backtest.common.helper.jsonify","text":"\u5c06\u5bf9\u8c61 obj \u8f6c\u6362\u6210\u4e3a\u53ef\u4ee5\u901a\u8fc7json.dumps\u5e8f\u5217\u5316\u7684\u5b57\u5178 \u672c\u65b9\u6cd5\u53ef\u4ee5\u5c06str, int, float, bool, datetime.date, datetime.datetime, \u6216\u8005\u63d0\u4f9b\u4e86isoformat\u65b9\u6cd5\u7684\u5176\u5b83\u65f6\u95f4\u7c7b\u578b\uff0c \u63d0\u4f9b\u4e86to_dict\u65b9\u6cd5\u7684\u5bf9\u8c61\u7c7b\u578b\uff08\u6bd4\u5982\u81ea\u5b9a\u4e49\u5bf9\u8c61\uff09\uff0c\u63d0\u4f9b\u4e86tolist\u6216\u8005__iter__\u65b9\u6cd5\u7684\u5e8f\u5217\u5bf9\u8c61\uff08\u6bd4\u5982numpy\u6570\u7ec4\uff09\uff0c\u6216\u8005\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e0a\u8ff0\u5bf9\u8c61\u7684\u590d\u5408\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u88ab\u6b63\u786e\u5730\u8f6c\u6362\u3002 \u8f6c\u6362\u4e2d\u4f9d\u7167\u4ee5\u4e0b\u987a\u5e8f\u8fdb\u884c\uff1a \u7b80\u5355\u7c7b\u578b\uff0c\u5982str, int, float, bool \u63d0\u4f9b\u4e86to_dict\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u5982\u679c\u662fnumpy\u6570\u7ec4\uff0c\u4f18\u5148\u6309tolist\u65b9\u6cd5\u8fdb\u884c\u8f6c\u6362 \u5982\u679c\u662f\u63d0\u4f9b\u4e86isoformat\u7684\u65f6\u95f4\u7c7b\u578b\uff0c\u4f18\u5148\u8f6c\u6362 \u5982\u679c\u5bf9\u8c61\u662fdict, \u6309dict\u8fdb\u884c\u8f6c\u6362 \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__iter__\u65b9\u6cd5\uff0c\u6309\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362 \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\uff0c\u6309dict\u8fdb\u884c\u8f6c\u6362 \u629b\u51fa\u5f02\u5e38 Parameters: Name Type Description Default obj object to convert required Returns: Type Description dict A dict able to be json dumps Source code in backtest/common/helper.py def jsonify ( obj ) -> dict : \"\"\"\u5c06\u5bf9\u8c61`obj`\u8f6c\u6362\u6210\u4e3a\u53ef\u4ee5\u901a\u8fc7json.dumps\u5e8f\u5217\u5316\u7684\u5b57\u5178 \u672c\u65b9\u6cd5\u53ef\u4ee5\u5c06str, int, float, bool, datetime.date, datetime.datetime, \u6216\u8005\u63d0\u4f9b\u4e86isoformat\u65b9\u6cd5\u7684\u5176\u5b83\u65f6\u95f4\u7c7b\u578b\uff0c \u63d0\u4f9b\u4e86to_dict\u65b9\u6cd5\u7684\u5bf9\u8c61\u7c7b\u578b\uff08\u6bd4\u5982\u81ea\u5b9a\u4e49\u5bf9\u8c61\uff09\uff0c\u63d0\u4f9b\u4e86tolist\u6216\u8005__iter__\u65b9\u6cd5\u7684\u5e8f\u5217\u5bf9\u8c61\uff08\u6bd4\u5982numpy\u6570\u7ec4\uff09\uff0c\u6216\u8005\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e0a\u8ff0\u5bf9\u8c61\u7684\u590d\u5408\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u88ab\u6b63\u786e\u5730\u8f6c\u6362\u3002 \u8f6c\u6362\u4e2d\u4f9d\u7167\u4ee5\u4e0b\u987a\u5e8f\u8fdb\u884c\uff1a 1. \u7b80\u5355\u7c7b\u578b\uff0c\u5982str, int, float, bool 2. \u63d0\u4f9b\u4e86to_dict\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b 3. \u5982\u679c\u662fnumpy\u6570\u7ec4\uff0c\u4f18\u5148\u6309tolist\u65b9\u6cd5\u8fdb\u884c\u8f6c\u6362 4. \u5982\u679c\u662f\u63d0\u4f9b\u4e86isoformat\u7684\u65f6\u95f4\u7c7b\u578b\uff0c\u4f18\u5148\u8f6c\u6362 5. \u5982\u679c\u5bf9\u8c61\u662fdict, \u6309dict\u8fdb\u884c\u8f6c\u6362 6. \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__iter__\u65b9\u6cd5\uff0c\u6309\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362 7. \u5982\u679c\u5bf9\u8c61\u63d0\u4f9b\u4e86__dict__\u65b9\u6cd5\uff0c\u6309dict\u8fdb\u884c\u8f6c\u6362 8. \u629b\u51fa\u5f02\u5e38 Args: obj : object to convert Returns: A dict able to be json dumps \"\"\" if obj is None or isinstance ( obj , ( str , int , float , bool )): return obj # type: ignore elif getattr ( obj , \"to_dict\" , False ): return jsonify ( obj . to_dict ()) elif getattr ( obj , \"tolist\" , False ): # for numpy array return jsonify ( obj . tolist ()) elif getattr ( obj , \"isoformat\" , False ): return obj . isoformat () elif isinstance ( obj , dict ): return { k : jsonify ( v ) for k , v in obj . items ()} elif getattr ( obj , \"__iter__\" , False ): # \u6ce8\u610fdict\u7c7b\u578b\u4e5f\u6709__iter__ return [ jsonify ( x ) for x in obj ] # type: ignore elif getattr ( obj , \"__dict__\" , False ): return { k : jsonify ( v ) for k , v in obj . __dict__ . items ()} else : raise ValueError ( f \" { obj } is not jsonable\" )","title":"jsonify()"},{"location":"api/common/#backtest.common.helper.protected","text":"check token and duplicated request Source code in backtest/common/helper.py def protected ( wrapped ): \"\"\"check token and duplicated request\"\"\" def decorator ( f ): @wraps ( f ) async def decorated_function ( request , * args , ** kwargs ): is_authenticated = check_token ( request ) is_duplicated = check_duplicated_request ( request ) params = request . json or request . args command = request . server_path . split ( \"/\" )[ - 1 ] if is_authenticated and not is_duplicated : try : logger . info ( \"received request: %s , params %s \" , command , params ) result = await f ( request , * args , ** kwargs ) logger . info ( \"finished request: %s , params %s \" , command , params ) return result except TradeError as e1 : logger . exception ( e1 ) logger . warning ( \"request: %s failed: %s \" , command , params ) return response . json ( e1 . as_json (), status = 499 ) except Exception as e : logger . exception ( e ) logger . warning ( \" %s error: %s \" , f . __name__ , params ) e2 = TradeError ( str ( e )) return response . json ( e2 . as_json (), status = 499 ) elif not is_authenticated : logger . warning ( \"token is invalid: [ %s ]\" , request . token ) return response . json ({ \"msg\" : \"token is invalid\" }, 401 ) elif is_duplicated : return response . json ({ \"msg\" : \"duplicated request\" }, 200 ) return decorated_function return decorator ( wrapped )","title":"protected()"},{"location":"api/common/#backtest.common.helper.protected_admin","text":"check token and duplicated request Source code in backtest/common/helper.py def protected_admin ( wrapped ): \"\"\"check token and duplicated request\"\"\" def decorator ( f ): @wraps ( f ) async def decorated_function ( request , * args , ** kwargs ): is_authenticated = check_admin_token ( request ) is_duplicated = check_duplicated_request ( request ) if is_authenticated and not is_duplicated : try : result = await f ( request , * args , ** kwargs ) return result except Exception as e : logger . exception ( e ) return response . text ( str ( e ), status = 500 ) elif not is_authenticated : logger . warning ( \"admin token is invalid: [ %s ]\" , request . token ) return response . text ( f \"token( { request . token } ) is invalid\" , 401 ) elif is_duplicated : return response . text ( f \"duplicated request: { request . ctx . request_id } \" , 200 ) return decorated_function return decorator ( wrapped )","title":"protected_admin()"},{"location":"api/common/#backtest.common.helper.tabulate_numpy_array","text":"\u5c06numpy structured array \u683c\u5f0f\u5316\u4e3a\u8868\u683c\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32 Parameters: Name Type Description Default arr description required Returns: Type Description str description Source code in backtest/common/helper.py def tabulate_numpy_array ( arr : np . ndarray ) -> str : \"\"\"\u5c06numpy structured array \u683c\u5f0f\u5316\u4e3a\u8868\u683c\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32 Args: arr : _description_ Returns: _description_ \"\"\" table = tabulate ( arr , headers = arr . dtype . names , tablefmt = \"fancy_grid\" ) return table","title":"tabulate_numpy_array()"},{"location":"api/feed/","text":"Feed\u6a21\u5757\u7528\u4ee5\u7ed9backtest server\u63d0\u4f9b\u64ae\u5408\u6570\u636e\u3002 backtest server\u5728\u8fdb\u884c\u64ae\u5408\u65f6\uff0c\u9700\u8981\u83b7\u53d6\u4ece\u4e0b\u5355\u65f6\u95f4\u8d77\u4e4b\u540e\u5230\u5f53\u5929\u7ed3\u675f\u65f6\u7684\u64ae\u5408\u6570\u636e\u3002backtest server\u672c\u8eab\u5e76\u4e0d\u63d0\u4f9b\u8fd9\u6837\u7684\u6570\u636e\uff0c\u5b83\u4f9d\u8d56data feed\u6765\u63d0\u4f9b\u3002 backtest server\u672c\u8eab\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e zillionare-omicron \u63a5\u53e3\u7684data feed\uff0c\u8be5feeder\u57fa\u4e8e\u5206\u949f\u7ebf\u6570\u636e\u63d0\u4f9b\u64ae\u5408\u6570\u636e\u3002 basefeed \u00b6 BaseFeed \u00b6 Source code in backtest/feed/basefeed.py class BaseFeed ( metaclass = ABCMeta ): def __init__ ( self , * args , ** kwargs ): pass @abstractmethod async def init ( self , * args , ** kwargs ): pass @classmethod async def create_instance ( cls , interface = \"zillionare\" , ** kwargs ): \"\"\" \u521b\u5efafeed\u5b9e\u4f8b\u3002\u5f53\u524d\u4ec5\u652f\u6301zillionare\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8981\u6c42\u4f7f\u7528[zillionare-omicron](https://zillionare.github.io/omicron/)\u6765\u63d0\u4f9b\u6570\u636e\u3002 \"\"\" from backtest.feed.zillionarefeed import ZillionareFeed if interface == \"zillionare\" : feed = ZillionareFeed ( ** kwargs ) await feed . init () return feed else : raise TypeError ( f \" { interface } is not supported\" ) @abstractmethod async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : \"\"\"\u83b7\u53d6\u4ece`start`\u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec`frame`\u3001`price`\u3001`volume`\u4e09\u5217\u3002 Args: security : \u8bc1\u5238\u4ee3\u7801 start : \u8d77\u59cb\u65f6\u95f4 Returns: a numpy array which dtype is `match_data_dtype` \"\"\" raise NotImplementedError @abstractmethod async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> float : \"\"\" \u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728`date`\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: sec: \u8bc1\u5238\u4ee3\u7801 date: \u65e5\u671f fq: \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 Returns: `sec`\u5728`date`\u65e5\u7684\u6536\u76d8\u4ef7 \"\"\" raise NotImplementedError @abstractmethod async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , np . array ]: \"\"\"\u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: secs: \u8bc1\u5238\u4ee3\u7801\u5217\u8868 frames: \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed fq: \u662f\u5426\u590d\u6743\u3002 Returns: a dict which key is `sec` and value is a numpy array which dtype is `[(\"frame\", \"O\"), (\"close\", \"f4\")]` \"\"\" raise NotImplementedError @abstractmethod async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> Tuple : \"\"\"\u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238`sec`\u5728`date`\u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Args: sec : \u8bc1\u5238\u4ee3\u7801 date : \u65e5\u671f Returns: \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) \"\"\" raise NotImplementedError @abstractmethod async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . array ]: \"\"\"\u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Args: secs: \u80a1\u7968\u4ee3\u7801 frames: \u65e5\u671f\u5217\u8868 Returns: \u8fd4\u56de\u4e00\u4e2adict \"\"\" raise NotImplementedError batch_get_close_price_in_range ( self , secs , frames , fq = False ) async \u00b6 \u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default secs List[str] \u8bc1\u5238\u4ee3\u7801\u5217\u8868 required frames List[datetime.date] \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed required fq \u662f\u5426\u590d\u6743\u3002 False Returns: Type Description Dict[str, <built-in function array>] a dict which key is sec and value is a numpy array which dtype is [(\"frame\", \"O\"), (\"close\", \"f4\")] Source code in backtest/feed/basefeed.py @abstractmethod async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , np . array ]: \"\"\"\u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: secs: \u8bc1\u5238\u4ee3\u7801\u5217\u8868 frames: \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed fq: \u662f\u5426\u590d\u6743\u3002 Returns: a dict which key is `sec` and value is a numpy array which dtype is `[(\"frame\", \"O\"), (\"close\", \"f4\")]` \"\"\" raise NotImplementedError create_instance ( interface = 'zillionare' , ** kwargs ) async classmethod \u00b6 \u521b\u5efafeed\u5b9e\u4f8b\u3002\u5f53\u524d\u4ec5\u652f\u6301zillionare\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8981\u6c42\u4f7f\u7528 zillionare-omicron \u6765\u63d0\u4f9b\u6570\u636e\u3002 Source code in backtest/feed/basefeed.py @classmethod async def create_instance ( cls , interface = \"zillionare\" , ** kwargs ): \"\"\" \u521b\u5efafeed\u5b9e\u4f8b\u3002\u5f53\u524d\u4ec5\u652f\u6301zillionare\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8981\u6c42\u4f7f\u7528[zillionare-omicron](https://zillionare.github.io/omicron/)\u6765\u63d0\u4f9b\u6570\u636e\u3002 \"\"\" from backtest.feed.zillionarefeed import ZillionareFeed if interface == \"zillionare\" : feed = ZillionareFeed ( ** kwargs ) await feed . init () return feed else : raise TypeError ( f \" { interface } is not supported\" ) get_close_price ( self , sec , date , fq = False ) async \u00b6 \u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728 date \u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required date date \u65e5\u671f required fq \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 False Returns: Type Description float sec \u5728 date \u65e5\u7684\u6536\u76d8\u4ef7 Source code in backtest/feed/basefeed.py @abstractmethod async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> float : \"\"\" \u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728`date`\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: sec: \u8bc1\u5238\u4ee3\u7801 date: \u65e5\u671f fq: \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 Returns: `sec`\u5728`date`\u65e5\u7684\u6536\u76d8\u4ef7 \"\"\" raise NotImplementedError get_dr_factor ( self , secs , frames ) async \u00b6 \u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Parameters: Name Type Description Default secs Union[str, List[str]] \u80a1\u7968\u4ee3\u7801 required frames List[datetime.date] \u65e5\u671f\u5217\u8868 required Returns: Type Description Dict[str, <built-in function array>] \u8fd4\u56de\u4e00\u4e2adict Source code in backtest/feed/basefeed.py @abstractmethod async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . array ]: \"\"\"\u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Args: secs: \u80a1\u7968\u4ee3\u7801 frames: \u65e5\u671f\u5217\u8868 Returns: \u8fd4\u56de\u4e00\u4e2adict \"\"\" raise NotImplementedError get_price_for_match ( self , security , start ) async \u00b6 \u83b7\u53d6\u4ece start \u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec frame \u3001 price \u3001 volume \u4e09\u5217\u3002 Parameters: Name Type Description Default security \u8bc1\u5238\u4ee3\u7801 required start \u8d77\u59cb\u65f6\u95f4 required Returns: Type Description ndarray a numpy array which dtype is match_data_dtype Source code in backtest/feed/basefeed.py @abstractmethod async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : \"\"\"\u83b7\u53d6\u4ece`start`\u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec`frame`\u3001`price`\u3001`volume`\u4e09\u5217\u3002 Args: security : \u8bc1\u5238\u4ee3\u7801 start : \u8d77\u59cb\u65f6\u95f4 Returns: a numpy array which dtype is `match_data_dtype` \"\"\" raise NotImplementedError get_trade_price_limits ( self , sec , date ) async \u00b6 \u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238 sec \u5728 date \u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Parameters: Name Type Description Default sec \u8bc1\u5238\u4ee3\u7801 required date \u65e5\u671f required Returns: Type Description Tuple \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) Source code in backtest/feed/basefeed.py @abstractmethod async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> Tuple : \"\"\"\u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238`sec`\u5728`date`\u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Args: sec : \u8bc1\u5238\u4ee3\u7801 date : \u65e5\u671f Returns: \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) \"\"\" raise NotImplementedError zillionarefeed \u00b6 ZillionareFeed ( BaseFeed ) \u00b6 Source code in backtest/feed/zillionarefeed.py class ZillionareFeed ( BaseFeed ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) async def init ( self , * args , ** kwargs ): pass async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : end = datetime . datetime . combine ( start . date (), datetime . time ( 15 )) bars = await Stock . get_bars ( security , 240 , FrameType . MIN1 , end ) if start . hour * 60 + start . minute <= 571 : # 09:31 bars [ 0 ][ \"close\" ] = bars [ 0 ][ \"open\" ] return bars [ bars [ \"frame\" ] >= start ][[ \"frame\" , \"close\" , \"volume\" ]] . astype ( match_data_dtype ) async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> Optional [ float ]: try : bars = await Stock . get_bars ( sec , 1 , FrameType . DAY , date , fq = fq ) if len ( bars ): return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) else : bars = await Stock . get_bars ( sec , 500 , FrameType . DAY , date , fq = fq ) return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) except Exception as e : logger . exception ( e ) logger . warning ( \"get_close_price failed for %s : %s \" , sec , date ) return None async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , NDArray ]: if len ( secs ) == 0 : raise ValueError ( \"No securities provided\" ) start = frames [ 0 ] end = frames [ - 1 ] close_dtype = [( \"frame\" , \"O\" ), ( \"close\" , \"<f4\" )] result = {} try : async for sec , values in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , start , end , fq = fq ): closes = values [[ \"frame\" , \"close\" ]] . astype ( close_dtype ) # type: ignore if len ( closes ) == 0 : # \u9047\u5230\u505c\u724c\u7684\u60c5\u51b5 price = await self . get_close_price ( sec , frames [ - 1 ], fq = fq ) if price is None : result [ sec ] = None else : result [ sec ] = np . array ( [( f , price ) for f in frames ], dtype = close_dtype ) continue closes [ \"close\" ] = array_math_round ( closes [ \"close\" ], 2 ) closes [ \"frame\" ] = [ item . date () for item in closes [ \"frame\" ]] # find missed frames, using left fill missed = np . setdiff1d ( frames , closes [ \"frame\" ]) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = close_dtype , ) closes = np . concatenate ([ closes , missed ]) closes = np . sort ( closes , order = \"frame\" ) closes [ \"close\" ] = fill_nan ( closes [ \"close\" ]) result [ sec ] = closes return result except Exception : logger . warning ( \"get_close_price failed for %s : %s - %s \" , secs , start , end ) raise async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> np . ndarray : prices = await Stock . get_trade_price_limits ( sec , date , date ) if len ( prices ): return prices [ 0 ] else : logger . warning ( \"get_trade_price_limits failed for %s : %s \" , sec , date ) raise NoData ( sec , date ) async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . ndarray ]: try : result = {} async for sec , bars in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , frames [ 0 ], frames [ - 1 ], fq = False ): factors = bars [[ \"frame\" , \"factor\" ]] . astype ( [( \"frame\" , \"O\" ), ( \"factor\" , \"<f4\" )] ) # find missed frames, using left fill missed = np . setdiff1d ( frames , [ item . item () . date () for item in bars [ \"frame\" ]] ) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = [( \"frame\" , \"datetime64[s]\" ), ( \"factor\" , \"<f4\" )], ) factors = np . concatenate ([ factors , missed ]) factors = np . sort ( factors , order = \"frame\" ) if all ( np . isnan ( factors [ \"factor\" ])): factors [ \"factor\" ] = [ 1.0 ] * len ( factors ) else : factors [ \"factor\" ] = fill_nan ( factors [ \"factor\" ]) result [ sec ] = factors [ \"factor\" ] / factors [ \"factor\" ][ 0 ] return result except Exception as e : logger . exception ( e ) logger . warning ( \"get_dr_factor failed for %s : %s ~ %s \" , secs , frames [ 0 ], frames [ - 1 ] ) raise batch_get_close_price_in_range ( self , secs , frames , fq = False ) async \u00b6 \u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default secs List[str] \u8bc1\u5238\u4ee3\u7801\u5217\u8868 required frames List[datetime.date] \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed required fq \u662f\u5426\u590d\u6743\u3002 False Returns: Type Description Dict[str, numpy.ndarray[Any, numpy.dtype[+ScalarType]]] a dict which key is sec and value is a numpy array which dtype is [(\"frame\", \"O\"), (\"close\", \"f4\")] Source code in backtest/feed/zillionarefeed.py async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , NDArray ]: if len ( secs ) == 0 : raise ValueError ( \"No securities provided\" ) start = frames [ 0 ] end = frames [ - 1 ] close_dtype = [( \"frame\" , \"O\" ), ( \"close\" , \"<f4\" )] result = {} try : async for sec , values in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , start , end , fq = fq ): closes = values [[ \"frame\" , \"close\" ]] . astype ( close_dtype ) # type: ignore if len ( closes ) == 0 : # \u9047\u5230\u505c\u724c\u7684\u60c5\u51b5 price = await self . get_close_price ( sec , frames [ - 1 ], fq = fq ) if price is None : result [ sec ] = None else : result [ sec ] = np . array ( [( f , price ) for f in frames ], dtype = close_dtype ) continue closes [ \"close\" ] = array_math_round ( closes [ \"close\" ], 2 ) closes [ \"frame\" ] = [ item . date () for item in closes [ \"frame\" ]] # find missed frames, using left fill missed = np . setdiff1d ( frames , closes [ \"frame\" ]) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = close_dtype , ) closes = np . concatenate ([ closes , missed ]) closes = np . sort ( closes , order = \"frame\" ) closes [ \"close\" ] = fill_nan ( closes [ \"close\" ]) result [ sec ] = closes return result except Exception : logger . warning ( \"get_close_price failed for %s : %s - %s \" , secs , start , end ) raise get_close_price ( self , sec , date , fq = False ) async \u00b6 \u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728 date \u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required date date \u65e5\u671f required fq \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 False Returns: Type Description Optional[float] sec \u5728 date \u65e5\u7684\u6536\u76d8\u4ef7 Source code in backtest/feed/zillionarefeed.py async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> Optional [ float ]: try : bars = await Stock . get_bars ( sec , 1 , FrameType . DAY , date , fq = fq ) if len ( bars ): return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) else : bars = await Stock . get_bars ( sec , 500 , FrameType . DAY , date , fq = fq ) return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) except Exception as e : logger . exception ( e ) logger . warning ( \"get_close_price failed for %s : %s \" , sec , date ) return None get_dr_factor ( self , secs , frames ) async \u00b6 \u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Parameters: Name Type Description Default secs Union[str, List[str]] \u80a1\u7968\u4ee3\u7801 required frames List[datetime.date] \u65e5\u671f\u5217\u8868 required Returns: Type Description Dict[str, numpy.ndarray] \u8fd4\u56de\u4e00\u4e2adict Source code in backtest/feed/zillionarefeed.py async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . ndarray ]: try : result = {} async for sec , bars in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , frames [ 0 ], frames [ - 1 ], fq = False ): factors = bars [[ \"frame\" , \"factor\" ]] . astype ( [( \"frame\" , \"O\" ), ( \"factor\" , \"<f4\" )] ) # find missed frames, using left fill missed = np . setdiff1d ( frames , [ item . item () . date () for item in bars [ \"frame\" ]] ) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = [( \"frame\" , \"datetime64[s]\" ), ( \"factor\" , \"<f4\" )], ) factors = np . concatenate ([ factors , missed ]) factors = np . sort ( factors , order = \"frame\" ) if all ( np . isnan ( factors [ \"factor\" ])): factors [ \"factor\" ] = [ 1.0 ] * len ( factors ) else : factors [ \"factor\" ] = fill_nan ( factors [ \"factor\" ]) result [ sec ] = factors [ \"factor\" ] / factors [ \"factor\" ][ 0 ] return result except Exception as e : logger . exception ( e ) logger . warning ( \"get_dr_factor failed for %s : %s ~ %s \" , secs , frames [ 0 ], frames [ - 1 ] ) raise get_price_for_match ( self , security , start ) async \u00b6 \u83b7\u53d6\u4ece start \u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec frame \u3001 price \u3001 volume \u4e09\u5217\u3002 Parameters: Name Type Description Default security \u8bc1\u5238\u4ee3\u7801 required start \u8d77\u59cb\u65f6\u95f4 required Returns: Type Description ndarray a numpy array which dtype is match_data_dtype Source code in backtest/feed/zillionarefeed.py async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : end = datetime . datetime . combine ( start . date (), datetime . time ( 15 )) bars = await Stock . get_bars ( security , 240 , FrameType . MIN1 , end ) if start . hour * 60 + start . minute <= 571 : # 09:31 bars [ 0 ][ \"close\" ] = bars [ 0 ][ \"open\" ] return bars [ bars [ \"frame\" ] >= start ][[ \"frame\" , \"close\" , \"volume\" ]] . astype ( match_data_dtype ) get_trade_price_limits ( self , sec , date ) async \u00b6 \u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238 sec \u5728 date \u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Parameters: Name Type Description Default sec \u8bc1\u5238\u4ee3\u7801 required date \u65e5\u671f required Returns: Type Description ndarray \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) Source code in backtest/feed/zillionarefeed.py async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> np . ndarray : prices = await Stock . get_trade_price_limits ( sec , date , date ) if len ( prices ): return prices [ 0 ] else : logger . warning ( \"get_trade_price_limits failed for %s : %s \" , sec , date ) raise NoData ( sec , date )","title":"Feed"},{"location":"api/feed/#backtest.feed.basefeed","text":"","title":"basefeed"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed","text":"Source code in backtest/feed/basefeed.py class BaseFeed ( metaclass = ABCMeta ): def __init__ ( self , * args , ** kwargs ): pass @abstractmethod async def init ( self , * args , ** kwargs ): pass @classmethod async def create_instance ( cls , interface = \"zillionare\" , ** kwargs ): \"\"\" \u521b\u5efafeed\u5b9e\u4f8b\u3002\u5f53\u524d\u4ec5\u652f\u6301zillionare\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8981\u6c42\u4f7f\u7528[zillionare-omicron](https://zillionare.github.io/omicron/)\u6765\u63d0\u4f9b\u6570\u636e\u3002 \"\"\" from backtest.feed.zillionarefeed import ZillionareFeed if interface == \"zillionare\" : feed = ZillionareFeed ( ** kwargs ) await feed . init () return feed else : raise TypeError ( f \" { interface } is not supported\" ) @abstractmethod async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : \"\"\"\u83b7\u53d6\u4ece`start`\u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec`frame`\u3001`price`\u3001`volume`\u4e09\u5217\u3002 Args: security : \u8bc1\u5238\u4ee3\u7801 start : \u8d77\u59cb\u65f6\u95f4 Returns: a numpy array which dtype is `match_data_dtype` \"\"\" raise NotImplementedError @abstractmethod async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> float : \"\"\" \u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728`date`\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: sec: \u8bc1\u5238\u4ee3\u7801 date: \u65e5\u671f fq: \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 Returns: `sec`\u5728`date`\u65e5\u7684\u6536\u76d8\u4ef7 \"\"\" raise NotImplementedError @abstractmethod async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , np . array ]: \"\"\"\u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: secs: \u8bc1\u5238\u4ee3\u7801\u5217\u8868 frames: \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed fq: \u662f\u5426\u590d\u6743\u3002 Returns: a dict which key is `sec` and value is a numpy array which dtype is `[(\"frame\", \"O\"), (\"close\", \"f4\")]` \"\"\" raise NotImplementedError @abstractmethod async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> Tuple : \"\"\"\u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238`sec`\u5728`date`\u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Args: sec : \u8bc1\u5238\u4ee3\u7801 date : \u65e5\u671f Returns: \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) \"\"\" raise NotImplementedError @abstractmethod async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . array ]: \"\"\"\u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Args: secs: \u80a1\u7968\u4ee3\u7801 frames: \u65e5\u671f\u5217\u8868 Returns: \u8fd4\u56de\u4e00\u4e2adict \"\"\" raise NotImplementedError","title":"BaseFeed"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed.batch_get_close_price_in_range","text":"\u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default secs List[str] \u8bc1\u5238\u4ee3\u7801\u5217\u8868 required frames List[datetime.date] \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed required fq \u662f\u5426\u590d\u6743\u3002 False Returns: Type Description Dict[str, <built-in function array>] a dict which key is sec and value is a numpy array which dtype is [(\"frame\", \"O\"), (\"close\", \"f4\")] Source code in backtest/feed/basefeed.py @abstractmethod async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , np . array ]: \"\"\"\u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: secs: \u8bc1\u5238\u4ee3\u7801\u5217\u8868 frames: \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed fq: \u662f\u5426\u590d\u6743\u3002 Returns: a dict which key is `sec` and value is a numpy array which dtype is `[(\"frame\", \"O\"), (\"close\", \"f4\")]` \"\"\" raise NotImplementedError","title":"batch_get_close_price_in_range()"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed.create_instance","text":"\u521b\u5efafeed\u5b9e\u4f8b\u3002\u5f53\u524d\u4ec5\u652f\u6301zillionare\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8981\u6c42\u4f7f\u7528 zillionare-omicron \u6765\u63d0\u4f9b\u6570\u636e\u3002 Source code in backtest/feed/basefeed.py @classmethod async def create_instance ( cls , interface = \"zillionare\" , ** kwargs ): \"\"\" \u521b\u5efafeed\u5b9e\u4f8b\u3002\u5f53\u524d\u4ec5\u652f\u6301zillionare\u63a5\u53e3\u3002\u8be5\u63a5\u53e3\u8981\u6c42\u4f7f\u7528[zillionare-omicron](https://zillionare.github.io/omicron/)\u6765\u63d0\u4f9b\u6570\u636e\u3002 \"\"\" from backtest.feed.zillionarefeed import ZillionareFeed if interface == \"zillionare\" : feed = ZillionareFeed ( ** kwargs ) await feed . init () return feed else : raise TypeError ( f \" { interface } is not supported\" )","title":"create_instance()"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed.get_close_price","text":"\u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728 date \u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required date date \u65e5\u671f required fq \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 False Returns: Type Description float sec \u5728 date \u65e5\u7684\u6536\u76d8\u4ef7 Source code in backtest/feed/basefeed.py @abstractmethod async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> float : \"\"\" \u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728`date`\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Args: sec: \u8bc1\u5238\u4ee3\u7801 date: \u65e5\u671f fq: \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 Returns: `sec`\u5728`date`\u65e5\u7684\u6536\u76d8\u4ef7 \"\"\" raise NotImplementedError","title":"get_close_price()"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed.get_dr_factor","text":"\u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Parameters: Name Type Description Default secs Union[str, List[str]] \u80a1\u7968\u4ee3\u7801 required frames List[datetime.date] \u65e5\u671f\u5217\u8868 required Returns: Type Description Dict[str, <built-in function array>] \u8fd4\u56de\u4e00\u4e2adict Source code in backtest/feed/basefeed.py @abstractmethod async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . array ]: \"\"\"\u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Args: secs: \u80a1\u7968\u4ee3\u7801 frames: \u65e5\u671f\u5217\u8868 Returns: \u8fd4\u56de\u4e00\u4e2adict \"\"\" raise NotImplementedError","title":"get_dr_factor()"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed.get_price_for_match","text":"\u83b7\u53d6\u4ece start \u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec frame \u3001 price \u3001 volume \u4e09\u5217\u3002 Parameters: Name Type Description Default security \u8bc1\u5238\u4ee3\u7801 required start \u8d77\u59cb\u65f6\u95f4 required Returns: Type Description ndarray a numpy array which dtype is match_data_dtype Source code in backtest/feed/basefeed.py @abstractmethod async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : \"\"\"\u83b7\u53d6\u4ece`start`\u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec`frame`\u3001`price`\u3001`volume`\u4e09\u5217\u3002 Args: security : \u8bc1\u5238\u4ee3\u7801 start : \u8d77\u59cb\u65f6\u95f4 Returns: a numpy array which dtype is `match_data_dtype` \"\"\" raise NotImplementedError","title":"get_price_for_match()"},{"location":"api/feed/#backtest.feed.basefeed.BaseFeed.get_trade_price_limits","text":"\u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238 sec \u5728 date \u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Parameters: Name Type Description Default sec \u8bc1\u5238\u4ee3\u7801 required date \u65e5\u671f required Returns: Type Description Tuple \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) Source code in backtest/feed/basefeed.py @abstractmethod async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> Tuple : \"\"\"\u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238`sec`\u5728`date`\u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Args: sec : \u8bc1\u5238\u4ee3\u7801 date : \u65e5\u671f Returns: \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) \"\"\" raise NotImplementedError","title":"get_trade_price_limits()"},{"location":"api/feed/#backtest.feed.zillionarefeed","text":"","title":"zillionarefeed"},{"location":"api/feed/#backtest.feed.zillionarefeed.ZillionareFeed","text":"Source code in backtest/feed/zillionarefeed.py class ZillionareFeed ( BaseFeed ): def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) async def init ( self , * args , ** kwargs ): pass async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : end = datetime . datetime . combine ( start . date (), datetime . time ( 15 )) bars = await Stock . get_bars ( security , 240 , FrameType . MIN1 , end ) if start . hour * 60 + start . minute <= 571 : # 09:31 bars [ 0 ][ \"close\" ] = bars [ 0 ][ \"open\" ] return bars [ bars [ \"frame\" ] >= start ][[ \"frame\" , \"close\" , \"volume\" ]] . astype ( match_data_dtype ) async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> Optional [ float ]: try : bars = await Stock . get_bars ( sec , 1 , FrameType . DAY , date , fq = fq ) if len ( bars ): return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) else : bars = await Stock . get_bars ( sec , 500 , FrameType . DAY , date , fq = fq ) return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) except Exception as e : logger . exception ( e ) logger . warning ( \"get_close_price failed for %s : %s \" , sec , date ) return None async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , NDArray ]: if len ( secs ) == 0 : raise ValueError ( \"No securities provided\" ) start = frames [ 0 ] end = frames [ - 1 ] close_dtype = [( \"frame\" , \"O\" ), ( \"close\" , \"<f4\" )] result = {} try : async for sec , values in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , start , end , fq = fq ): closes = values [[ \"frame\" , \"close\" ]] . astype ( close_dtype ) # type: ignore if len ( closes ) == 0 : # \u9047\u5230\u505c\u724c\u7684\u60c5\u51b5 price = await self . get_close_price ( sec , frames [ - 1 ], fq = fq ) if price is None : result [ sec ] = None else : result [ sec ] = np . array ( [( f , price ) for f in frames ], dtype = close_dtype ) continue closes [ \"close\" ] = array_math_round ( closes [ \"close\" ], 2 ) closes [ \"frame\" ] = [ item . date () for item in closes [ \"frame\" ]] # find missed frames, using left fill missed = np . setdiff1d ( frames , closes [ \"frame\" ]) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = close_dtype , ) closes = np . concatenate ([ closes , missed ]) closes = np . sort ( closes , order = \"frame\" ) closes [ \"close\" ] = fill_nan ( closes [ \"close\" ]) result [ sec ] = closes return result except Exception : logger . warning ( \"get_close_price failed for %s : %s - %s \" , secs , start , end ) raise async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> np . ndarray : prices = await Stock . get_trade_price_limits ( sec , date , date ) if len ( prices ): return prices [ 0 ] else : logger . warning ( \"get_trade_price_limits failed for %s : %s \" , sec , date ) raise NoData ( sec , date ) async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . ndarray ]: try : result = {} async for sec , bars in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , frames [ 0 ], frames [ - 1 ], fq = False ): factors = bars [[ \"frame\" , \"factor\" ]] . astype ( [( \"frame\" , \"O\" ), ( \"factor\" , \"<f4\" )] ) # find missed frames, using left fill missed = np . setdiff1d ( frames , [ item . item () . date () for item in bars [ \"frame\" ]] ) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = [( \"frame\" , \"datetime64[s]\" ), ( \"factor\" , \"<f4\" )], ) factors = np . concatenate ([ factors , missed ]) factors = np . sort ( factors , order = \"frame\" ) if all ( np . isnan ( factors [ \"factor\" ])): factors [ \"factor\" ] = [ 1.0 ] * len ( factors ) else : factors [ \"factor\" ] = fill_nan ( factors [ \"factor\" ]) result [ sec ] = factors [ \"factor\" ] / factors [ \"factor\" ][ 0 ] return result except Exception as e : logger . exception ( e ) logger . warning ( \"get_dr_factor failed for %s : %s ~ %s \" , secs , frames [ 0 ], frames [ - 1 ] ) raise","title":"ZillionareFeed"},{"location":"api/feed/#backtest.feed.zillionarefeed.ZillionareFeed.batch_get_close_price_in_range","text":"\u83b7\u53d6\u591a\u4e2a\u8bc1\u5238\u5728\u591a\u4e2a\u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default secs List[str] \u8bc1\u5238\u4ee3\u7801\u5217\u8868 required frames List[datetime.date] \u65e5\u671f\u5217\u8868, \u65e5\u671f\u5fc5\u987b\u662f\u6709\u5e8f\u4e14\u8fde\u7eed required fq \u662f\u5426\u590d\u6743\u3002 False Returns: Type Description Dict[str, numpy.ndarray[Any, numpy.dtype[+ScalarType]]] a dict which key is sec and value is a numpy array which dtype is [(\"frame\", \"O\"), (\"close\", \"f4\")] Source code in backtest/feed/zillionarefeed.py async def batch_get_close_price_in_range ( self , secs : List [ str ], frames : List [ datetime . date ], fq = False ) -> Dict [ str , NDArray ]: if len ( secs ) == 0 : raise ValueError ( \"No securities provided\" ) start = frames [ 0 ] end = frames [ - 1 ] close_dtype = [( \"frame\" , \"O\" ), ( \"close\" , \"<f4\" )] result = {} try : async for sec , values in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , start , end , fq = fq ): closes = values [[ \"frame\" , \"close\" ]] . astype ( close_dtype ) # type: ignore if len ( closes ) == 0 : # \u9047\u5230\u505c\u724c\u7684\u60c5\u51b5 price = await self . get_close_price ( sec , frames [ - 1 ], fq = fq ) if price is None : result [ sec ] = None else : result [ sec ] = np . array ( [( f , price ) for f in frames ], dtype = close_dtype ) continue closes [ \"close\" ] = array_math_round ( closes [ \"close\" ], 2 ) closes [ \"frame\" ] = [ item . date () for item in closes [ \"frame\" ]] # find missed frames, using left fill missed = np . setdiff1d ( frames , closes [ \"frame\" ]) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = close_dtype , ) closes = np . concatenate ([ closes , missed ]) closes = np . sort ( closes , order = \"frame\" ) closes [ \"close\" ] = fill_nan ( closes [ \"close\" ]) result [ sec ] = closes return result except Exception : logger . warning ( \"get_close_price failed for %s : %s - %s \" , secs , start , end ) raise","title":"batch_get_close_price_in_range()"},{"location":"api/feed/#backtest.feed.zillionarefeed.ZillionareFeed.get_close_price","text":"\u83b7\u53d6\u8bc1\u5238\u54c1\u79cd\u5728 date \u65e5\u671f\u7684\u6536\u76d8\u4ef7 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required date date \u65e5\u671f required fq \u662f\u5426\u8fdb\u884c\u524d\u590d\u6743 False Returns: Type Description Optional[float] sec \u5728 date \u65e5\u7684\u6536\u76d8\u4ef7 Source code in backtest/feed/zillionarefeed.py async def get_close_price ( self , sec : str , date : datetime . date , fq = False ) -> Optional [ float ]: try : bars = await Stock . get_bars ( sec , 1 , FrameType . DAY , date , fq = fq ) if len ( bars ): return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) else : bars = await Stock . get_bars ( sec , 500 , FrameType . DAY , date , fq = fq ) return math_round ( bars [ - 1 ][ \"close\" ] . item (), 2 ) except Exception as e : logger . exception ( e ) logger . warning ( \"get_close_price failed for %s : %s \" , sec , date ) return None","title":"get_close_price()"},{"location":"api/feed/#backtest.feed.zillionarefeed.ZillionareFeed.get_dr_factor","text":"\u80a1\u7968\u5728[start,end]\u95f4\u7684\u6bcf\u5929\u7684\u590d\u6743\u56e0\u5b50\uff0c\u4f7f\u7528start\u65e5\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406 \u6ce8\u610f\u5b9e\u73b0\u8005\u5fc5\u987b\u4fdd\u8bc1\uff0c\u590d\u6743\u56e0\u5b50\u7684\u957f\u5ea6\u4e0e\u65e5\u671f\u7684\u957f\u5ea6\u76f8\u540c\u4e14\u5b8c\u5168\u5bf9\u9f50\u3002\u5982\u679c\u9047\u5230\u505c\u724c\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u8fdb\u884c\u76f8\u5e94\u7684\u586b\u5145\u3002 Parameters: Name Type Description Default secs Union[str, List[str]] \u80a1\u7968\u4ee3\u7801 required frames List[datetime.date] \u65e5\u671f\u5217\u8868 required Returns: Type Description Dict[str, numpy.ndarray] \u8fd4\u56de\u4e00\u4e2adict Source code in backtest/feed/zillionarefeed.py async def get_dr_factor ( self , secs : Union [ str , List [ str ]], frames : List [ datetime . date ] ) -> Dict [ str , np . ndarray ]: try : result = {} async for sec , bars in Stock . batch_get_day_level_bars_in_range ( secs , FrameType . DAY , frames [ 0 ], frames [ - 1 ], fq = False ): factors = bars [[ \"frame\" , \"factor\" ]] . astype ( [( \"frame\" , \"O\" ), ( \"factor\" , \"<f4\" )] ) # find missed frames, using left fill missed = np . setdiff1d ( frames , [ item . item () . date () for item in bars [ \"frame\" ]] ) if len ( missed ): missed = np . array ( [( f , np . nan ) for f in missed ], dtype = [( \"frame\" , \"datetime64[s]\" ), ( \"factor\" , \"<f4\" )], ) factors = np . concatenate ([ factors , missed ]) factors = np . sort ( factors , order = \"frame\" ) if all ( np . isnan ( factors [ \"factor\" ])): factors [ \"factor\" ] = [ 1.0 ] * len ( factors ) else : factors [ \"factor\" ] = fill_nan ( factors [ \"factor\" ]) result [ sec ] = factors [ \"factor\" ] / factors [ \"factor\" ][ 0 ] return result except Exception as e : logger . exception ( e ) logger . warning ( \"get_dr_factor failed for %s : %s ~ %s \" , secs , frames [ 0 ], frames [ - 1 ] ) raise","title":"get_dr_factor()"},{"location":"api/feed/#backtest.feed.zillionarefeed.ZillionareFeed.get_price_for_match","text":"\u83b7\u53d6\u4ece start \u4e4b\u540e\u8d77\u5f53\u5929\u6240\u6709\u7684\u884c\u60c5\u6570\u636e\uff0c\u7528\u4ee5\u64ae\u5408 \u8fd9\u91cc\u6ca1\u6709\u8981\u6c42\u6307\u5b9a\u884c\u60c5\u6570\u636e\u7684\u65f6\u95f4\u5e27\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u65e0\u8bba\u4ecetick\u7ea7\u5230\u65e5\u7ebf\u7ea7\uff0cbacktest\u90fd\u80fd\u652f\u6301\u3002\u8fd4\u56de\u7684\u6570\u636e\u81f3\u5c11\u8981\u5305\u62ec frame \u3001 price \u3001 volume \u4e09\u5217\u3002 Parameters: Name Type Description Default security \u8bc1\u5238\u4ee3\u7801 required start \u8d77\u59cb\u65f6\u95f4 required Returns: Type Description ndarray a numpy array which dtype is match_data_dtype Source code in backtest/feed/zillionarefeed.py async def get_price_for_match ( self , security : str , start : datetime . datetime ) -> np . ndarray : end = datetime . datetime . combine ( start . date (), datetime . time ( 15 )) bars = await Stock . get_bars ( security , 240 , FrameType . MIN1 , end ) if start . hour * 60 + start . minute <= 571 : # 09:31 bars [ 0 ][ \"close\" ] = bars [ 0 ][ \"open\" ] return bars [ bars [ \"frame\" ] >= start ][[ \"frame\" , \"close\" , \"volume\" ]] . astype ( match_data_dtype )","title":"get_price_for_match()"},{"location":"api/feed/#backtest.feed.zillionarefeed.ZillionareFeed.get_trade_price_limits","text":"\u83b7\u53d6\u8bc1\u5238\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236 \u83b7\u53d6\u8bc1\u5238 sec \u5728 date \u65e5\u671f\u7684\u4ea4\u6613\u4ef7\u683c\u9650\u5236\u3002 Parameters: Name Type Description Default sec \u8bc1\u5238\u4ee3\u7801 required date \u65e5\u671f required Returns: Type Description ndarray \u4ea4\u6613\u4ef7\u683c\u9650\u5236\uff0c\u5143\u7ec4\uff0c(\u65e5\u671f\uff0c\u6da8\u505c\u4ef7\uff0c\u8dcc\u505c\u4ef7) Source code in backtest/feed/zillionarefeed.py async def get_trade_price_limits ( self , sec : str , date : datetime . date ) -> np . ndarray : prices = await Stock . get_trade_price_limits ( sec , date , date ) if len ( prices ): return prices [ 0 ] else : logger . warning ( \"get_trade_price_limits failed for %s : %s \" , sec , date ) raise NoData ( sec , date )","title":"get_trade_price_limits()"},{"location":"api/trade/","text":"\u4ea4\u6613\u6a21\u5757\u3002\u5b9a\u4e49\u4e86\u4ea4\u6613\u4ee3\u7406\u548c\u57fa\u672c\u7c7b\u578b\u3002 broker \u00b6 Broker\u662f\u4e00\u4e2a\u4ea4\u6613\u4ee3\u7406\u3002\u6bcf\u4e00\u4e2a\u4ea4\u6613\u4ee3\u7406\u5bf9\u5e94\u4e00\u4e2a\u8d26\u6237\uff0c\u8bb0\u5f55\u4e86\u8be5\u8d26\u6237\u4e0b\u7684\u4ea4\u6613\u8bb0\u5f55\u3001\u6bcf\u65e5\u6301\u4ed3\u8bb0\u5f55\u548c\u6bcf\u65e5\u5e02\u503c\u8bb0\u5f55\u7b49\u6570\u636e\uff0c\u5e76\u63d0\u4f9b\u4ea4\u6613\u64ae\u5408\u7684\u5177\u4f53\u5b9e\u73b0\u3002 Broker \u00b6 Source code in backtest/trade/broker.py class Broker : def __init__ ( self , account_name : str , principal : float , commission : float , bt_start : Optional [ datetime . date ] = None , bt_end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u4e00\u4e2aBroker\u5bf9\u8c61 Args: account_name : \u8d26\u53f7/\u7b56\u7565\u540d principal : \u521d\u59cb\u672c\u91d1 commission : \u4f63\u91d1\u7387 start : \u5f00\u59cb\u65e5\u671f(\u56de\u6d4b\u65f6\u4f7f\u7528) end : \u7ed3\u675f\u65e5\u671f\uff08\u56de\u6d4b\u65f6\u4f7f\u7528\uff09 \"\"\" if bt_start is not None and bt_end is not None : self . mode = \"bt\" self . bt_start = bt_start self . bt_stop = bt_end # \u56de\u6d4b\u662f\u5426\u7ec8\u6b62\uff1f self . _bt_stopped = False else : self . mode = \"mock\" self . _bt_stopped = False self . bt_start = None self . bt_stop = None # \u6700\u540e\u4ea4\u6613\u65f6\u95f4 self . _last_trade_time : Optional [ datetime . datetime ] = None self . _first_trade_time : Optional [ datetime . datetime ] = None self . account_name = account_name self . commission = commission # \u521d\u59cb\u672c\u91d1 self . principal = principal # \u6bcf\u65e5\u76d8\u540e\u53ef\u7528\u8d44\u91d1 self . _cash = np . array ([], dtype = cash_dtype ) # \u6bcf\u65e5\u603b\u8d44\u4ea7, \u5305\u62ec\u672c\u91d1\u548c\u6301\u4ed3\u8d44\u4ea7 self . _assets = np . array ([], dtype = assets_dtype ) self . _positions = np . array ([], dtype = daily_position_dtype ) # \u6bcf\u65e5\u6301\u4ed3 self . _unclosed_trades = {} # \u672a\u5e73\u4ed3\u7684\u4ea4\u6613 # \u59d4\u6258\u5217\u8868\uff0c\u5305\u62ec\u5e9f\u5355\u548c\u672a\u6210\u4ea4\u59d4\u6258 self . entrusts = {} # \u6240\u6709\u7684\u6210\u4ea4\u5217\u8868\uff0c\u5305\u62ec\u4e70\u5165\u548c\u5356\u51fa\uff0c\u5df2\u5173\u95ed\u548c\u672a\u5173\u95ed\u7684 self . trades = {} # trasaction = buy + sell trade self . transactions : List [ Transaction ] = [] self . _lock = asyncio . Lock () def __getstate__ ( self ): # self._lock is not pickable state = self . __dict__ . copy () del state [ \"_lock\" ] return state def __setstate__ ( self , state ): self . __dict__ . update ( state ) self . _lock = asyncio . Lock () @property def lock ( self ): return self . _lock @property def cash ( self ): if self . _cash . size == 0 : return self . principal return self . _cash [ - 1 ][ \"cash\" ] . item () @property def account_start_date ( self ) -> Optional [ datetime . date ]: if self . mode == \"bt\" : return self . bt_start else : return ( None if self . _first_trade_time is None else self . _first_trade_time . date () ) @property def account_end_date ( self ) -> Optional [ datetime . date ]: if self . mode == \"bt\" : return self . bt_stop else : return ( None if self . _last_trade_time is None else self . _last_trade_time . date () ) @property def last_trade_date ( self ): return None if self . _last_trade_time is None else self . _last_trade_time . date () @property def first_trade_date ( self ): return None if self . _first_trade_time is None else self . _first_trade_time . date () def get_cash ( self , dt : datetime . date ) -> float : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u7684\u53ef\u7528\u8d44\u91d1 \u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Args: dt (datetime.date): \u65e5\u671f Returns: float: \u67d0\u65e5\u53ef\u7528\u8d44\u91d1 \"\"\" if self . _cash . size == 0 : return self . principal if dt > self . _cash [ - 1 ][ \"date\" ]: return self . _cash [ - 1 ][ \"cash\" ] . item () elif dt < self . _cash [ 0 ][ \"date\" ]: return self . principal result = self . _cash [ self . _cash [ \"date\" ] == dt ][ \"cash\" ] if result . size == 0 : raise BadParamsError ( f \"date { dt } not found\" ) else : return result . item () def get_unclosed_trades ( self , dt : datetime . date ) -> set : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u672a\u5e73\u4ed3\u7684\u4ea4\u6613 \u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 \"\"\" if len ( self . _unclosed_trades ) == 0 : return set () result = self . _unclosed_trades . get ( dt ) if result is None : start = sorted ( self . _unclosed_trades . keys ())[ 0 ] if dt < start : return set () else : self . _fillup_unclosed_trades ( dt ) return self . _unclosed_trades . get ( dt ) def get_position ( self , dt : datetime . date , dtype = position_dtype ) -> np . ndarray : \"\"\"\u83b7\u53d6`dt`\u65e5\u6301\u4ed3 \u5982\u679c\u4f20\u5165\u7684`dt`\u5927\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u6700\u540e\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u6700\u540e\u4e00\u5929\u7684\u6301\u4ed3\u6570\u636e,\u5e76\u4e14\u6240\u6709\u6301\u4ed3\u5747\u4e3a\u53ef\u552e\u72b6\u6001 \u5982\u679c\u4f20\u5165\u7684`dt`\u5c0f\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u7b2c\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u7a7a\u3002 Args: dt : \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u6301\u4ed3 dtype : \u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4e3a[position_dtype][backtest.trade.datatypes.position_dtype]\u6216[daily_position_dtype][backtest.trade.datatypes.daily_position_dtype]\uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa Returns: \u8fd4\u56de\u7ed3\u679c\u4e3adtype\u4e3a`dtype`\u7684\u4e00\u7ef4numpy structured array\uff0c\u5176\u4e2dprice\u4e3a\u8be5\u6279\u6301\u4ed3\u7684\u5747\u4ef7\u3002 \"\"\" if self . _positions . size == 0 : return np . array ([], dtype = dtype ) if dt < self . _positions [ 0 ][ \"date\" ]: return np . array ([], dtype = dtype ) last_date = self . _positions [ - 1 ][ \"date\" ] if dt > last_date : result = self . _positions [ self . _positions [ \"date\" ] == last_date ] result [ \"sellable\" ] = result [ \"shares\" ] return result [ list ( dtype . names )] . astype ( dtype ) result = self . _positions [ self . _positions [ \"date\" ] == dt ] if result . size == 0 : raise BadParamsError ( f \"param dt { dt } not found\" ) return result [ list ( dtype . names )] . astype ( dtype ) async def recalc_assets ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None ): \"\"\"\u91cd\u65b0\u8ba1\u7b97\u8d26\u6237\u7684\u6bcf\u65e5\u8d44\u4ea7 \u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u8d44\u4ea7\u8868\u5c06\u5305\u62ec\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\uff0c\u5230`end`\u65e5\u7684\u8d44\u4ea7\u6570\u636e\u3002\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\u8d77\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u9996\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76ca\u3002 Args: end: \u8ba1\u7b97\u5230\u54ea\u4e00\u5929\u7684\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u8ba1\u7b97\u5230\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\uff08\u975e\u56de\u6d4b\uff09\uff0c\u6216\u8005\u56de\u6d4b\u7ed3\u675f\u65e5\u3002 \"\"\" if end is None : if self . mode != \"bt\" : # \u975e\u56de\u6d4b\u4e0b\u8ba1\u7b97\u5230\u5f53\u4e0b end = arrow . now () . date () else : # \u56de\u6d4b\u65f6\u8ba1\u7b97\u5230bt_stop end = self . bt_stop # \u628a\u671f\u521d\u8d44\u4ea7\u52a0\u8fdb\u6765 if self . _assets . size == 0 : start = self . account_start_date if start is None : return np . array ([], dtype = rich_assets_dtype ) _before_start = tf . day_shift ( start , - 1 ) self . _assets = np . array ( [( _before_start , self . principal )], dtype = assets_dtype ) start = start or tf . day_shift ( self . _assets [ - 1 ][ \"date\" ], 1 ) if start >= end : return # \u5f85\u8865\u9f50\u7684\u8d44\u4ea7\u65e5 frames = [ tf . int2date ( d ) for d in tf . get_frames ( start , end , FrameType . DAY )] # \u4ece\u6700\u540e\u4e00\u4e2a\u8d44\u4ea7\u65e5\u5230`end`\uff0c\u6301\u4ed3\u5e94\u90fd\u662f\u4e00\u6837\u7684 position = self . get_position ( end , position_dtype ) if position . size == 0 : assets = self . _assets [ - 1 ][ \"assets\" ] self . _assets = np . concatenate ( ( self . _assets , np . array ([( frame , assets ) for frame in frames ], dtype = assets_dtype ), ) ) return secs = position [ position [ \"shares\" ] != 0 ][ \"security\" ] shares = { sec : position [ position [ \"security\" ] == sec ][ \"shares\" ][ 0 ] for sec in secs } if len ( secs ): feed = get_app_context () . feed closes = await feed . batch_get_close_price_in_range ( secs , frames ) for frame in frames : cash = self . get_cash ( frame ) mv = 0 for sec in secs : if closes . get ( sec ) is None : price = position [ position [ \"security\" ] == sec ][ \"price\" ] . item () mv += shares . get ( sec , 0 ) * price else : iclose = self . _index_of ( closes [ sec ], frame , \"frame\" ) mv += closes [ sec ][ iclose ][ \"close\" ] * shares . get ( sec , 0 ) i = self . _index_of ( self . _assets , frame ) if i is None : self . _assets = np . append ( self . _assets , np . array ([( frame , float ( cash + mv ))], dtype = assets_dtype ), axis = 0 , ) else : self . _assets [ i ][ \"assets\" ] = float ( cash + mv ) async def info ( self , dt : datetime . date = None ) -> Dict : \"\"\"`dt`\u65e5\u7684\u8d26\u53f7\u76f8\u5173\u4fe1\u606f Returns: Dict: \u8d26\u53f7\u76f8\u5173\u4fe1\u606f\uff1a - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, `dt`\u65e5\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548 - bt_stopped: \u56de\u6d4b\u662f\u5426\u7ed3\u675f\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548\u3002 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, `dt`\u65e5\u53ef\u7528\u8d44\u91d1 - market_value: `dt`\u65e5\u80a1\u7968\u5e02\u503c - pnl: `dt`\u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" dt = dt or self . last_trade_date cash = self . get_cash ( dt ) assets = await self . get_assets ( dt ) return { \"name\" : self . account_name , \"principal\" : self . principal , \"start\" : self . account_start_date , \"end\" : self . bt_stop , \"bt_stopped\" : self . _bt_stopped , \"last_trade\" : self . last_trade_date , \"assets\" : assets , \"available\" : cash , \"market_value\" : assets - cash , \"pnl\" : assets - self . principal , \"ppnl\" : assets / self . principal - 1 , \"positions\" : self . get_position ( dt ), } async def get_returns ( self , start_date : datetime . date = None , end_date : datetime . date = None ) -> np . ndarray : \"\"\"\u6c42\u622a\u6b62`end_date`\u65f6\u7684\u6bcf\u65e5\u56de\u62a5 Args: start_date: \u8ba1\u7b97\u56de\u62a5\u7684\u8d77\u59cb\u65e5\u671f end_date : \u8ba1\u7b97\u56de\u62a5\u7684\u7ed3\u675f\u65e5\u671f Returns: \u4ee5\u767e\u5206\u6bd4\u4e3a\u5355\u4f4d\u7684\u6bcf\u65e5\u56de\u62a5\u7387,\u7d22\u5f15\u4e3a\u5bf9\u5e94\u65e5\u671f \"\"\" start = start_date or self . account_start_date # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u6bcf\u65e5\u56de\u62a5\u65f6\uff0c\u9700\u8981\u53d6\u591a\u4e00\u65e5\uff0c\u5373`start`\u4e4b\u524d\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 _start = tf . day_shift ( start , - 1 ) end = end_date or self . account_end_date assert self . account_start_date <= start <= end assert start <= end <= self . account_end_date if not self . _bt_stopped : await self . recalc_assets () assets = self . _assets [ ( self . _assets [ \"date\" ] >= _start ) & ( self . _assets [ \"date\" ] <= end ) ] if assets . size == 0 : raise TradeError ( f \"date range error: { start } - { end } contains no data\" , with_stack = True ) return assets [ \"assets\" ][ 1 :] / assets [ \"assets\" ][: - 1 ] - 1 @property def assets ( self ) -> float : \"\"\"\u5f53\u524d\u603b\u8d44\u4ea7\u3002 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u603b\u8d44\u4ea7\uff0c\u8bf7\u4f7f\u7528`get_assets`\u65b9\u6cd5\u3002 \"\"\" if self . _assets . size == 0 : return self . principal else : return self . _assets [ - 1 ][ \"assets\" ] async def get_assets ( self , date : datetime . date ) -> float : \"\"\"\u67e5\u8be2\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u5f53\u65e5\u603b\u8d44\u4ea7 = \u5f53\u65e5\u53ef\u7528\u8d44\u91d1 + \u6301\u4ed3\u5e02\u503c Args: date: \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 Returns: \u8fd4\u56de\u67d0\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 \"\"\" if self . _assets . size == 0 : return self . principal if date is None : return self . _assets [ - 1 ][ \"assets\" ] result = self . _assets [ self . _assets [ \"date\" ] == date ] if result . size == 1 : return result [ \"assets\" ] . item () assets , * _ = await self . _calc_assets ( date ) return assets def _index_of ( self , arr : np . ndarray , date : datetime . date , index : str = \"date\" ) -> int : \"\"\"\u67e5\u627e`arr`\u4e2d\u5176`index`\u5b57\u6bb5\u7b49\u4e8e`date`\u7684\u7d22\u5f15 \u6ce8\u610f\u6570\u7ec4\u4e2d`date`\u5b57\u6bb5\u53d6\u503c\u5fc5\u987b\u60df\u4e00\u3002 Args: arr: numpy array, \u9700\u8981\u5b58\u5728`index`\u5b57\u6bb5 date: datetime.date, \u67e5\u627e\u7684\u65e5\u671f Returns: \u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56deNone \"\"\" pos = np . argwhere ( arr [ index ] == date ) . ravel () assert len ( pos ) <= 1 , \"date should be unique\" if len ( pos ) == 0 : return None return pos [ 0 ] async def _calc_assets ( self , date : datetime . date ) -> Tuple [ float ]: \"\"\"\u8ba1\u7b97\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u6b64\u51fd\u6570\u4e0d\u66f4\u65b0\u8d44\u4ea7\u8868\uff0c\u4ee5\u907f\u514d\u8d44\u4ea7\u8868\u4e2d\u7559\u4e0b\u7a7a\u6d1e\u3002\u6bd4\u5982\uff1a \u5f53\u524d\u6700\u540e\u4ea4\u6613\u65e5\u4e3a4\u670810\u65e5\uff0c4\u670817\u65e5\u53d1\u751f\u4e00\u7b14\u59d4\u5356\uff0c\u5bfc\u81f4cash/position\u8bb0\u5f55\u66f4\u65b0\u52304/17\uff0c\u4f46\u8d44\u4ea7\u8868\u4ecd\u7136\u4fdd\u6301\u57284\u670810\u65e5\uff0c\u6b64\u65f6\u5982\u679c\u7f13\u5b58\u8be5\u8bb0\u5f55\uff0c\u5c06\u5bfc\u81f4\u8d44\u4ea7\u8868\u4e2d\u7559\u4e0b\u7a7a\u6d1e\u3002 Args: date: \u8ba1\u7b97\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 Returns: \u8fd4\u56de\u603b\u8d44\u4ea7, \u53ef\u7528\u8d44\u91d1, \u6301\u4ed3\u5e02\u503c \"\"\" if date < self . account_start_date : return self . principal , 0 , 0 if ( self . mode == \"bt\" and date > self . bt_stop ) or date > arrow . now () . date (): raise BadParamsError ( f \"wrong date: { date } , date must be before { self . bt_stop } or { arrow . now () . date () } \" ) cash = self . get_cash ( date ) positions = self . get_position ( date ) # this also exclude empty entry (which security is None) heldings = positions [ positions [ \"shares\" ] > 0 ][ \"security\" ] market_value = 0 if heldings . size > 0 : feed = get_app_context () . feed for sec in heldings : shares = positions [ positions [ \"security\" ] == sec ][ \"shares\" ] . item () price = await feed . get_close_price ( sec , date ) if price is not None : market_value += shares * price else : price = positions [ positions [ \"security\" ] == sec ][ \"price\" ] . item () market_value += shares * price assets = cash + market_value return assets , cash , market_value @property def position ( self ) -> np . ndarray : \"\"\"\u83b7\u53d6\u5f53\u524d\u6301\u4ed3 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u6301\u4ed3\uff0c\u8bf7\u4f7f\u7528`get_position`\u65b9\u6cd5\u3002 \u5982\u679c\u5f53\u5929\u4e2a\u80a1\u66fe\u6709\u6301\u4ed3\uff0c\u4f46\u88ab\u6e05\u4ed3\uff0c\u6301\u4ed3\u8868\u4ecd\u4fdd\u7559entry\uff0c\u4f46shares\u5c06\u7f6e\u4e3a\u7a7a\u3002\u5982\u679c\u5f53\u5929\u6ca1\u6709\u4efb\u4f55\u6301\u4ed3\uff08\u4e0d\u5305\u62ec\u5f53\u5929\u6e05\u7a7a\u7684\u60c5\u51b5\uff09\uff0c\u5219\u4f1a\u7559\u4e00\u4e2a`security`\u5b57\u6bb5\u4e3aNone\u7684\u7a7aentry\u3002 Returns: \u8fd4\u56dedtype\u4e3a[position_dtype][backtest.trade.datatypes.position_dtype]\u7684numpy structure array \"\"\" if self . _positions . size == 0 : return np . array ([], dtype = position_dtype ) last_day = self . _positions [ - 1 ][ \"date\" ] result = self . _positions [ self . _positions [ \"date\" ] == last_day ] return result [ list ( position_dtype . names )] . astype ( position_dtype ) def __str__ ( self ): s = ( f \"\u8d26\u6237\uff1a { self . account_name } : \\n \" + f \" \u603b\u8d44\u4ea7\uff1a { self . assets : ,.2f } \\n \" + f \" \u672c\u91d1\uff1a { self . principal : ,.2f } \\n \" + f \" \u53ef\u7528\u8d44\u91d1\uff1a { self . cash : ,.2f } \\n \" + f \" \u6301\u4ed3\uff1a { self . position } \\n \" ) return s def __repr__ ( self ) -> str : return f \"< { self . __class__ . __name__ } > { self } \" async def _calendar_validation ( self , bid_time : datetime . datetime ): \"\"\"\u66f4\u65b0\u548c\u6821\u51c6\u4ea4\u6613\u65e5\u671f \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5728\u8fdb\u5165_bt_stopped\u72b6\u6001\u65f6,\u8fd8\u8981\u5b8c\u6574\u8ba1\u7b97\u4e00\u6b21assets,\u6b64\u540e\u4e0d\u518d\u91cd\u590d\u8ba1\u7b97\u3002 Args: bid_time : \u4ea4\u6613\u53d1\u751f\u7684\u65f6\u95f4 \"\"\" if self . mode == \"bt\" and self . _bt_stopped : logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u8d85\u8fc7\u56de\u6d4b\u7ed3\u675f\u65f6\u95f4: %s , %s \" , bid_time , self . bt_stop , date = bid_time ) raise AccountStoppedError ( bid_time , self . bt_stop , with_stack = True ) if self . _first_trade_time is None : self . _first_trade_time = bid_time elif bid_time < self . _first_trade_time : logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u5fc5\u987b\u9012\u589e\u51fa\u73b0: %s -> %s \" , self . _first_trade_time , bid_time , date = bid_time ) raise TimeRewindError ( bid_time , self . _first_trade_time , with_stack = True ) if self . _last_trade_time is None or bid_time >= self . _last_trade_time : self . _last_trade_time = bid_time else : logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u5fc5\u987b\u9012\u589e\u51fa\u73b0\uff1a %s -> %s \" , self . _last_trade_time , bid_time , date = bid_time ) raise TimeRewindError ( bid_time , self . _last_trade_time , with_stack = True ) if self . mode == \"bt\" and bid_time . date () > self . bt_stop : self . _bt_stopped = True await self . recalc_assets () logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u8d85\u8fc7\u56de\u6d4b\u7ed3\u675f\u65f6\u95f4: %s , %s \" , bid_time , self . bt_stop , date = bid_time ) raise AccountStoppedError ( bid_time , self . bt_stop , with_stack = True ) async def buy ( self , security : str , bid_price : Union [ int , float ], bid_shares : int , bid_time : datetime . datetime , ) -> Trade : \"\"\"\u4e70\u5165\u59d4\u6258 \u4e70\u5165\u4ee5\u5c3d\u53ef\u80fd\u5b9e\u73b0\u59d4\u6258\u4e3a\u76ee\u6807\u3002\u5982\u679c\u53ef\u7528\u8d44\u91d1\u4e0d\u8db3\uff0c\u4f46\u80fd\u4e70\u5165\u90e8\u5206\u80a1\u7968\uff0c\u5219\u90e8\u5206\u4e70\u5165\u3002 \u5982\u679cbid_price\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6da8\u505c\u4ef7\u4e70\u5165\u3002 Args: security str: \u8bc1\u5238\u4ee3\u7801 bid_price float: \u59d4\u6258\u4ef7\u683c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares int: \u8be2\u4e70\u7684\u80a1\u6570 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: [Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _buy ( security , bid_price , bid_shares , bid_time ) async def _buy ( self , security : str , bid_price : float , bid_shares : Union [ float , int ], bid_time : datetime . datetime , ) -> Trade : entrustlog . info ( f \" { bid_time } \\t { security } \\t { bid_shares } \\t { bid_price } \\t { EntrustSide . BUY } \" ) assert ( type ( bid_time ) is datetime . datetime ), f \" { bid_time } is not type of datetime\" await self . _before_trade ( bid_time ) feed = get_app_context () . feed en = Entrust ( security , EntrustSide . BUY , bid_shares , bid_price , bid_time , BidType . LIMIT if bid_price is not None else BidType . MARKET , ) logger . info ( \"\u4e70\u5165\u59d4\u6258: %s %d %s , \u5355\u53f7\uff1a %s \" , security , bid_shares , bid_price , en . eid , date = bid_time , ) self . entrusts [ en . eid ] = en _ , buy_limit_price , _ = await feed . get_trade_price_limits ( security , bid_time . date () ) bid_price = bid_price or buy_limit_price # \u83b7\u53d6\u7528\u4ee5\u64ae\u5408\u7684\u6570\u636e bars = await feed . get_price_for_match ( security , bid_time ) if bars . size == 0 : logger . warning ( \"failed to match %s , no data at %s \" , security , bid_time , date = bid_time ) raise NoDataForMatch ( security , bid_time , with_stack = True ) # \u79fb\u9664\u6389\u6da8\u505c\u548c\u4ef7\u683c\u9ad8\u4e8e\u59d4\u4e70\u4ef7\u7684bar\u540e\uff0c\u770b\u8fd8\u80fd\u4e70\u591a\u5c11\u80a1 bars = self . _remove_for_buy ( security , bid_time , bars , bid_price , buy_limit_price ) # \u5c06\u4e70\u5165\u6570\u9650\u5236\u5728\u53ef\u7528\u8d44\u91d1\u8303\u56f4\u5185 shares_to_buy = min ( bid_shares , self . cash // ( bid_price * ( 1 + self . commission )) ) # \u5fc5\u987b\u4ee5\u624b\u4e3a\u5355\u4f4d\u4e70\u5165\uff0c\u5426\u5219\u59d4\u6258\u4f1a\u5931\u8d25 shares_to_buy = shares_to_buy // 100 * 100 if shares_to_buy < 100 : logger . info ( \"\u59d4\u4e70\u5931\u8d25\uff1a %s ( %s ), \u8d44\u91d1( %s )\u4e0d\u8db3\" , security , self . cash , en . eid , date = bid_time ) raise CashError ( self . account_name , 100 * shares_to_buy * bid_price , self . cash , with_stack = True , ) mean_price , filled , close_time = self . _match_buy ( bars , shares_to_buy ) if filled == 0 : raise VolumeNotMeet ( security , bid_price , with_stack = True ) return await self . _fill_buy_order ( en , mean_price , filled , close_time ) def _match_buy ( self , bid_queue , shares_to_buy ) -> Tuple [ float , float , datetime . datetime ]: \"\"\"\u8ba1\u7b97\u6b64\u6b21\u4e70\u5165\u7684\u6210\u4ea4\u5747\u4ef7\u548c\u6210\u4ea4\u91cf Args: bid_queue : \u64ae\u5408\u6570\u636e shares_to_buy : \u8981\u4e70\u5165\u7684\u80a1\u6570 Returns: \u6210\u4ea4\u5747\u4ef7\u3001\u53ef\u57cb\u5355\u80a1\u6570\u548c\u6700\u540e\u6210\u4ea4\u65f6\u95f4 \"\"\" c , v = bid_queue [ \"price\" ], bid_queue [ \"volume\" ] cum_v = np . cumsum ( v ) # until i the order can be filled where_total_filled = np . argwhere ( cum_v >= shares_to_buy ) if len ( where_total_filled ) == 0 : i = len ( v ) - 1 else : i = np . min ( where_total_filled ) # \u4e5f\u8bb8\u5230\u5f53\u5929\u7ed3\u675f\uff0c\u90fd\u6ca1\u6709\u8db3\u591f\u7684\u80a1\u7968 filled = min ( cum_v [ i ], shares_to_buy ) // 100 * 100 # \u6700\u540e\u4e00\u5468\u671f\uff0c\u53ea\u9700\u8981\u6210\u4ea4\u5269\u4f59\u7684\u90e8\u5206 vol = v [: i + 1 ] . copy () vol [ - 1 ] = filled - np . sum ( vol [: - 1 ]) money = sum ( c [: i + 1 ] * vol ) mean_price = money / filled return mean_price , filled , bid_queue [ \"frame\" ][ i ] def _fillup_unclosed_trades ( self , dt : datetime . date ): if len ( self . _unclosed_trades ) != 0 and self . _unclosed_trades . get ( dt ) is None : days = sorted ( list ( self . _unclosed_trades . keys ())) frames = tf . get_frames ( days [ - 1 ], dt , FrameType . DAY ) for src , dst in zip ( frames [: - 1 ], frames [ 1 :]): src = tf . int2date ( src ) dst = tf . int2date ( dst ) self . _unclosed_trades [ dst ] = self . _unclosed_trades [ src ] . copy () def _update_unclosed_trades ( self , tid , date : datetime . date ): \"\"\"\u8bb0\u5f55\u6bcf\u65e5\u6301\u6709\u7684\u672a\u5e73\u4ed3\u4ea4\u6613 Args: trades: \u4ea4\u6613\u5217\u8868 \"\"\" unclosed = self . _unclosed_trades . get ( date , []) if len ( unclosed ): unclosed . append ( tid ) return if len ( self . _unclosed_trades ) == 0 : self . _unclosed_trades [ date ] = [ tid ] return # \u8bb0\u5f55\u8fd8\u672a\u521b\u5efa\uff0c\u9700\u8981\u590d\u5236\u524d\u4e00\u65e5\u8bb0\u5f55 self . _fillup_unclosed_trades ( date ) self . _unclosed_trades [ date ] . append ( tid ) async def _fill_buy_order ( self , en : Entrust , price : float , filled : float , close_time : datetime . datetime ) -> Trade : \"\"\"\u751f\u6210trade,\u66f4\u65b0\u4ea4\u6613\u3001\u6301\u4ed3\u548cassets Args: en : _description_ price : _description_ filled : _description_ close_time : _description_ Returns: \u6210\u4ea4\u8bb0\u5f55 \"\"\" money = price * filled fee = math_round ( money * self . commission , 2 ) trade = Trade ( en . eid , en . security , price , filled , fee , en . side , close_time ) self . trades [ trade . tid ] = trade self . _update_unclosed_trades ( trade . tid , close_time . date ()) await self . _update_positions ( trade , close_time . date ()) logger . info ( \"\u4e70\u5165\u6210\u4ea4: %s ( %d %.2f %.2f ),\u59d4\u5355\u53f7: %s , \u6210\u4ea4\u53f7: %s \" , en . security , filled , price , fee , en . eid , trade . tid , date = close_time , ) tradelog . info ( f \" { en . bid_time . date () } \\t { en . side } \\t { en . security } \\t { filled } \\t { price } \\t { fee } \" ) logger . info ( \"\u4e70\u5165\u540e\u6301\u4ed3: \\n %s \" , tabulate_numpy_array ( self . get_position ( close_time . date (), daily_position_dtype ) ), date = close_time , ) # \u5f53\u53d1\u751f\u65b0\u7684\u4e70\u5165\u65f6\uff0c\u66f4\u65b0\u8d44\u4ea7 cash_change = - 1 * ( money + fee ) await self . _update_assets ( cash_change , close_time ) await emit . emit ( E_BACKTEST , { \"buy\" : jsonify ( trade )}) return trade async def _before_trade ( self , bid_time : datetime . datetime ): \"\"\"\u4ea4\u6613\u524d\u7684\u51c6\u5907\u5de5\u4f5c \u5728\u6bcf\u6b21\u4ea4\u6613\u524d\uff0c\u8865\u9f50\u6bcf\u65e5\u73b0\u91d1\u6570\u636e\u548c\u6301\u4ed3\u6570\u636e\u5230`bid_time`\uff0c\u66f4\u65b0\u8d26\u6237\u751f\u547d\u671f\u7b49\u3002 Args: bid_time: \u59d4\u6258\u65f6\u95f4 Returns: \u65e0 \"\"\" logger . info ( \"before trade\" , date = bid_time ) await self . _calendar_validation ( bid_time ) # \u8865\u9f50\u53ef\u7528\u5c06\u8d44\u91d1\u8868 if self . _cash . size == 0 : start = tf . day_shift ( self . account_start_date , - 1 ) end = bid_time . date () frames = tf . get_frames ( start , end , FrameType . DAY ) _cash = [( tf . int2date ( frame ), self . principal ) for frame in frames ] self . _cash = np . array ( _cash , dtype = cash_dtype ) else : prev , cash = self . _cash [ - 1 ] frames = tf . get_frames ( prev , bid_time , FrameType . DAY )[ 1 :] if len ( frames ) > 0 : recs = [( tf . int2date ( date ), cash ) for date in frames ] self . _cash = np . concatenate ( ( self . _cash , np . array ( recs , dtype = cash_dtype )) ) await self . _fillup_positions ( bid_time ) async def _fillup_positions ( self , bid_time : datetime . datetime ): # \u8865\u9f50\u6301\u4ed3\u8868(\u9700\u8981\u5904\u7406\u590d\u6743) feed = get_app_context () . feed if self . _positions . size == 0 : return prev = self . _positions [ - 1 ][ \"date\" ] logger . info ( \"handling positions fillup from %s to %s \" , prev , bid_time , date = bid_time ) frames = [ tf . int2date ( frame ) for frame in tf . get_frames ( prev , bid_time , FrameType . DAY ) ] if len ( frames ) == 1 : return last_day_position = self . _positions [ self . _positions [ \"date\" ] == prev ] if np . all ( last_day_position [ \"security\" ] is None ): # empty entries, no need to be extended return last_held_position = last_day_position [ last_day_position [ \"shares\" ] != 0 ] if last_held_position . size == 0 : empty = np . array ( [( frame , None , 0 , 0 , 0 ) for frame in frames [ 1 :]], dtype = daily_position_dtype , ) self . _positions = np . hstack (( self . _positions , empty )) return # \u5df2\u6e05\u7a7a\u80a1\u7968\u4e0d\u9700\u8981\u5c55\u4ed3, issue 9 secs = last_held_position [ \"security\" ] . tolist () dr_info = await feed . get_dr_factor ( secs , frames ) padding_positions = [] for position in last_held_position : sec = position [ \"security\" ] if sec in dr_info : dr = dr_info [ sec ] else : dr = None paddings = np . array ( [ position . item ()] * len ( frames ), dtype = daily_position_dtype ) paddings [ \"date\" ] = frames if dr is not None : adjust_shares = array_math_round ( paddings [ \"shares\" ][ 1 :] * np . diff ( dr ), 2 ) paddings [ \"shares\" ] = paddings [ \"shares\" ] * dr paddings [ \"price\" ] = paddings [ \"price\" ] / dr # \u6a21\u62df\u4e00\u7b14\u4e70\u5355\uff0c\u4ee5\u4fbf\u6b64\u540e\u5356\u51fa\u65f6\u80fd\u5bf9\u5e94\u5230\u4e70\u5355\u3002\u5426\u5219\uff0c\u5c06\u5356\u4e0d\u51fa\u53bb\u3002 # https://github.com/zillionare/trader-client/issues/10 for i , adjust_share in enumerate ( adjust_shares ): if abs ( adjust_share ) < 1e-5 : continue order_time = tf . combine_time ( frames [ i + 1 ], 15 ) trade = Trade ( uuid . uuid4 (), sec , paddings [ \"price\" ][ i + 1 ] . item (), adjust_share , 0 , EntrustSide . XDXR , order_time , ) self . trades [ trade . tid ] = trade self . _update_unclosed_trades ( trade . tid , bid_time . date ()) paddings [ \"sellable\" ][ 1 :] = paddings [ \"shares\" ][: - 1 ] padding_positions . extend ( paddings [ 1 :]) if len ( padding_positions ): padding_positions . sort ( key = lambda x : x [ 0 ]) self . _positions = np . concatenate (( self . _positions , padding_positions )) async def _update_positions ( self , trade : Trade , bid_date : datetime . date ): \"\"\"\u66f4\u65b0\u6301\u4ed3\u4fe1\u606f \u6301\u4ed3\u4fe1\u606f\u4e3a\u4e00\u7ef4numpy\u6570\u7ec4\uff0c\u5176\u7c7b\u578b\u4e3adaily_position_dtype\u3002\u5982\u679c\u67d0\u652f\u80a1\u7968\u5728\u67d0\u65e5\u88ab\u6e05\u7a7a\uff0c\u5219\u5f53\u65e5\u6301\u4ed3\u8868\u4fdd\u7559\u8bb0\u5f55\uff0c\u7f6eshares\u4e3a\u96f6\uff0c\u65b9\u4fbf\u901a\u8fc7\u6301\u4ed3\u8868\u770b\u51fa\u80a1\u7968\u7684\u8fdb\u573a\u51fa\u573a\u65f6\u95f4\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4e0d\u4fdd\u7559\u8fd9\u6761\u8bb0\u5f55\uff08\u800c\u662f\u5220\u9664\uff09\uff0c\u5219\u5728\u6240\u6709\u80a1\u7968\u90fd\u88ab\u6e05\u7a7a\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5bfc\u81f4\u6301\u4ed3\u8868\u51fa\u73b0\u7a7a\u6d1e\uff0c\u4ece\u800c\u5bfc\u81f4\u4e0b\u4e00\u6b21\u4ea4\u6613\u65f6\uff0c\u8bef\u5c06\u66f4\u65e9\u4e4b\u524d\u7684\u6301\u4ed3\u8bb0\u5f55\u590d\u5236\u5230\u5f53\u65e5\u7684\u6301\u4ed3\u8868\u4e2d\uff08\u5728_before_trade\u4e2d\uff09\uff0c\u800c\u8fd9\u4e9b\u6301\u4ed3\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u6e05\u7a7a\u3002 Args: trade: \u4ea4\u6613\u4fe1\u606f bid_date: \u4e70\u5165/\u5356\u51fa\u65e5\u671f \"\"\" if type ( bid_date ) == datetime . datetime : bid_date = bid_date . date () if self . _positions . size == 0 : self . _positions = np . array ( [( bid_date , trade . security , trade . shares , 0 , trade . price )], dtype = daily_position_dtype , ) return # find if the security is already in the position (same day) pos = np . argwhere ( ( self . _positions [ \"security\" ] == trade . security ) & ( self . _positions [ \"date\" ] == bid_date ) ) if pos . size == 0 : self . _positions = np . append ( self . _positions , np . array ( [( bid_date , trade . security , trade . shares , 0 , trade . price )], dtype = daily_position_dtype , ), ) else : i = pos [ 0 ] . item () * _ , old_shares , old_sellable , old_price = self . _positions [ i ] new_shares , new_price = trade . shares , trade . price if trade . side == EntrustSide . BUY : self . _positions [ i ] = ( bid_date , trade . security , old_shares + trade . shares , old_sellable , ( old_price * old_shares + new_shares * new_price ) / ( old_shares + new_shares ), ) else : shares = old_shares - trade . shares sellable = old_sellable - trade . shares if shares <= 0.1 : old_price = 0 shares = 0 sellable = 0 self . _positions [ i ] = ( bid_date , trade . security , shares , sellable , old_price , # \u5356\u51fa\u65f6\u6210\u672c\u4e0d\u53d8\uff0c\u9664\u975e\u5df2\u6e05\u7a7a ) return async def _update_assets ( self , cash_change : float , bid_time : datetime . datetime ): \"\"\"\u66f4\u65b0\u5f53\u524d\u8d44\u4ea7\uff08\u542b\u6301\u4ed3\uff09 \u5728\u6bcf\u6b21\u8d44\u4ea7\u53d8\u52a8\u65f6\u8fdb\u884c\u8ba1\u7b97\u548c\u66f4\u65b0\uff0c\u5e76\u5bf9\u4e4b\u524d\u7684\u8d44\u4ea7\u8868\u8fdb\u884c\u8865\u5168\u3002 Args: cash_change : \u53d8\u52a8\u7684\u73b0\u91d1 bid_time: \u59d4\u6258\u65f6\u95f4 \"\"\" logger . info ( \"cash change: %s \" , cash_change , date = bid_time ) # \u8865\u9f50\u8d44\u4ea7\u8868\u5230\u4e0a\u4e00\u4e2a\u4ea4\u6613\u65e5 if self . _assets . size == 0 : _before_start = tf . day_shift ( self . account_start_date , - 1 ) self . _assets = np . array ( [( _before_start , self . principal )], dtype = assets_dtype ) start = tf . day_shift ( self . _assets [ - 1 ][ \"date\" ], 1 ) end = tf . day_shift ( bid_time , - 1 ) if start < end : await self . recalc_assets ( start , end ) bid_date = bid_time . date () # _before_trade\u5e94\u8be5\u5df2\u7ecf\u4e3a\u5f53\u65e5\u4ea4\u6613\u51c6\u5907\u597d\u4e86\u53ef\u7528\u8d44\u91d1\u6570\u636e assert self . _cash [ - 1 ][ \"date\" ] == bid_date self . _cash [ - 1 ][ \"cash\" ] += cash_change assets , cash , mv = await self . _calc_assets ( bid_date ) i = self . _index_of ( self . _assets , bid_date ) if i is None : self . _assets = np . append ( self . _assets , np . array ([( bid_date , assets )], dtype = assets_dtype ) ) else : # don't use self._assets[self._assets[\"date\"] == date], this always return copy self . _assets [ i ][ \"assets\" ] = assets info = np . array ( [( bid_date , assets , cash , mv , cash_change )], dtype = [ ( \"date\" , \"O\" ), ( \"assets\" , float ), ( \"cash\" , float ), ( \"market value\" , float ), ( \"change\" , float ), ], ) logger . info ( \" \\n %s \" , tabulate_numpy_array ( info ), date = bid_date ) async def _fill_sell_order ( self , en : Entrust , price : float , to_sell : float ) -> List [ Trade ]: \"\"\"\u4ecepositions\u4e2d\u6263\u51cf\u80a1\u7968\u3001\u589e\u52a0\u53ef\u7528\u73b0\u91d1 Args: en : \u59d4\u5356\u5355 price : \u6210\u4ea4\u5747\u4ef7 filled : \u56de\u62a5\u7684\u5356\u51fa\u6570\u91cf Returns: \u6210\u4ea4\u8bb0\u5f55\u5217\u8868 \"\"\" dt = en . bid_time . date () money = price * to_sell fee = math_round ( money * self . commission , 2 ) security = en . security unclosed_trades = self . get_unclosed_trades ( dt ) closed_trades = [] exit_trades = [] refund = 0 while to_sell > 0 : for tid in unclosed_trades : trade : Trade = self . trades [ tid ] if trade . security != security : continue if trade . time . date () >= dt : # not T + 1 continue to_sell , fee , exit_trade , tx = trade . sell ( to_sell , price , fee , en . bid_time ) logger . info ( \"\u5356\u51fa\u6210\u4ea4: %s ( %d %.2f %.2f ),\u59d4\u5355\u53f7: %s , \u6210\u4ea4\u53f7: %s \" , en . security , exit_trade . shares , exit_trade . price , exit_trade . fee , en . eid , exit_trade . tid , date = exit_trade . time , ) tradelog . info ( f \" { en . bid_time . date () } \\t { exit_trade . side } \\t { exit_trade . security } \\t { exit_trade . shares } \\t { exit_trade . price } \\t { exit_trade . fee } \" ) await self . _update_positions ( exit_trade , exit_trade . time ) exit_trades . append ( exit_trade ) self . trades [ exit_trade . tid ] = exit_trade self . transactions . append ( tx ) refund += exit_trade . shares * exit_trade . price - exit_trade . fee if trade . closed : closed_trades . append ( tid ) if to_sell == 0 : break else : # no more unclosed trades, even if to_sell > 0 break unclosed_trades = [ tid for tid in unclosed_trades if tid not in closed_trades ] self . _unclosed_trades [ dt ] = unclosed_trades logger . info ( \"\u5356\u51fa\u540e\u6301\u4ed3: \\n %s \" , tabulate_numpy_array ( self . get_position ( dt , daily_position_dtype )), date = dt , ) await self . _update_assets ( refund , en . bid_time ) await emit . emit ( E_BACKTEST , { \"sell\" : jsonify ( exit_trades )}) return exit_trades async def sell ( self , security : str , bid_price : Union [ None , float ], bid_shares : float , bid_time : datetime . datetime , ) -> List [ Trade ]: \"\"\"\u5356\u51fa\u59d4\u6258 Args: security str: \u59d4\u6258\u8bc1\u5238\u4ee3\u7801 bid_price float: \u51fa\u552e\u4ef7\u683c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares float: \u8be2\u5356\u80a1\u6570\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u9650\u5236\u5fc5\u987b\u4ee5100\u7684\u500d\u6570\u5356\u51fa\u3002 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: \u6210\u4ea4\u8bb0\u5f55\u5217\u8868,\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a[Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _sell ( security , bid_price , bid_shares , bid_time ) async def _sell ( self , security : str , bid_price : Union [ None , float ], bid_shares : float , bid_time : datetime . datetime , ) -> List [ Trade ]: await self . _before_trade ( bid_time ) feed = get_app_context () . feed entrustlog . info ( f \" { bid_time } \\t { security } \\t { bid_shares } \\t { bid_price } \\t { EntrustSide . SELL } \" ) logger . info ( \"\u5356\u51fa\u59d4\u6258: %s %s %s \" , security , bid_price , bid_shares , date = bid_time ) _ , _ , sell_limit_price = await feed . get_trade_price_limits ( security , bid_time . date () ) if bid_price is None : bid_type = BidType . MARKET bid_price = sell_limit_price else : bid_type = BidType . LIMIT # fill the order, get mean price bars = await feed . get_price_for_match ( security , bid_time ) if bars . size == 0 : logger . warning ( \"failed to match: %s , no data at %s \" , security , bid_time , date = bid_time ) raise NoDataForMatch ( security , bid_time , with_stacks = True ) bars = self . _remove_for_sell ( security , bid_time , bars , bid_price , sell_limit_price ) c , v = bars [ \"price\" ], bars [ \"volume\" ] cum_v = np . cumsum ( v ) shares_to_sell = self . _get_sellable_shares ( security , bid_shares , bid_time ) if shares_to_sell == 0 : logger . info ( \"\u5356\u51fa\u5931\u8d25: %s %s , \u53ef\u7528\u80a1\u6570\u4e3a0\" , security , bid_shares , date = bid_time ) logger . info ( \" %s \" , self . get_unclosed_trades ( bid_time . date ()), date = bid_time ) raise PositionError ( security , bid_time , with_stack = True ) # until i the order can be filled where_total_filled = np . argwhere ( cum_v >= shares_to_sell ) if len ( where_total_filled ) == 0 : i = len ( v ) - 1 else : i = np . min ( where_total_filled ) close_time = bars [ i ][ \"frame\" ] # \u4e5f\u8bb8\u5230\u5f53\u5929\u7ed3\u675f\uff0c\u90fd\u6ca1\u6709\u8db3\u591f\u7684\u80a1\u7968 filled = min ( cum_v [ i ], shares_to_sell ) # \u6700\u540e\u4e00\u5468\u671f\uff0c\u53ea\u9700\u8981\u6210\u4ea4\u5269\u4f59\u7684\u90e8\u5206 vol = v [: i + 1 ] . copy () vol [ - 1 ] = filled - np . sum ( vol [: - 1 ]) money = sum ( c [: i + 1 ] * vol ) mean_price = money / filled en = Entrust ( security , EntrustSide . SELL , bid_shares , bid_price , bid_time , bid_type ) logger . info ( \"\u59d4\u5356 %s ( %s ), \u6210\u4ea4 %s \u80a1\uff0c\u5747\u4ef7 %.2f \" , en . security , en . eid , filled , mean_price , date = close_time , ) return await self . _fill_sell_order ( en , mean_price , filled ) def _get_sellable_shares ( self , security : str , shares_asked : int , bid_time : datetime . datetime ) -> int : \"\"\"\u83b7\u53d6\u53ef\u5356\u80a1\u6570 \u5982\u679cshares_asked\u4e0e\u53ef\u552e\u4e4b\u95f4\u7684\u5dee\u4e0d\u8db31\u80a1\uff0c\u5219\u81ea\u52a8\u52a0\u4e0a\u96f6\u5934\uff0c\u786e\u4fdd\u53ef\u4ee5\u5356\u5b8c\u3002 Args: security: \u8bc1\u5238\u4ee3\u7801 Returns: \u53ef\u5356\u80a1\u6570 \"\"\" shares = 0 for tid in self . get_unclosed_trades ( bid_time . date ()): t = self . trades [ tid ] if t . security == security and t . time . date () < bid_time . date (): assert t . closed is False shares += t . _unsell if shares - shares_asked < 100 : return shares return min ( shares_asked , shares ) def _remove_for_buy ( self , security : str , order_time : datetime . datetime , bars : np . ndarray , price : float , limit_price : float , ) -> np . ndarray : \"\"\" \u53bb\u6389\u5df2\u8fbe\u5230\u6da8\u505c\u65f6\u7684\u5206\u949f\u7ebf\uff0c\u6216\u8005\u4ef7\u683c\u9ad8\u4e8e\u4e70\u5165\u4ef7\u7684bars \"\"\" reach_limit = array_price_equal ( bars [ \"price\" ], limit_price ) bars = bars [( ~ reach_limit )] if bars . size == 0 : raise BuylimitError ( security , order_time , with_stack = True ) bars = bars [( bars [ \"price\" ] <= price )] if bars . size == 0 : raise PriceNotMeet ( security , price , order_time , with_stack = True ) return bars def _remove_for_sell ( self , security : str , order_time : datetime . datetime , bars : np . ndarray , price : float , limit_price : float , ) -> np . ndarray : \"\"\"\u53bb\u6389\u5f53\u524d\u4ef7\u683c\u4f4e\u4e8eprice\uff0c\u6216\u8005\u5df2\u7ecf\u8fbe\u5230\u8dcc\u505c\u65f6\u7684bars,\u8fd9\u4e9bbars\u4e0a\u65e0\u6cd5\u6210\u4ea4\"\"\" reach_limit = array_price_equal ( bars [ \"price\" ], limit_price ) bars = bars [( ~ reach_limit )] if bars . size == 0 : raise SellLimitError ( security , order_time , with_stack = True ) bars = bars [( bars [ \"price\" ] >= price )] if bars . size == 0 : raise PriceNotMeet ( security , price , order_time , with_stack = True ) return bars def freeze ( self ): \"\"\"\u51bb\u7ed3\u8d26\u6237\uff0c\u505c\u6b62\u63a5\u6536\u65b0\u7684\u59d4\u6258\"\"\" self . _bt_stopped = True async def metrics ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , baseline : Optional [ str ] = \"399300.XSHE\" , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5\u7684\u8d26\u6237\u6307\u6807 Args: start: \u5f00\u59cb\u65f6\u95f4 end: \u7ed3\u675f\u65f6\u95f4 baseline: \u53c2\u8003\u6807\u7684 Returns: Dict: \u6307\u6807\u5b57\u5178\uff0c\u5176key\u4e3a - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" try : rf = cfg . metrics . risk_free_rate / cfg . metrics . annual_days except Exception : rf = 0 start = min ( start or self . account_start_date , self . account_start_date ) end = max ( end or self . account_end_date , self . account_end_date ) tx = [] logger . info ( \" %s tx in total\" , len ( self . transactions )) for t in self . transactions : if t . entry_time . date () >= start and t . exit_time . date () <= end : tx . append ( t ) else : logger . info ( \"tx %s not in range, start: %s , end: %s \" , t . sec , t . entry_time , t . exit_time , ) # \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 window = tf . count_day_frames ( start , end ) total_tx = len ( tx ) if total_tx == 0 : return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : None , \"total_profit_rate\" : None , \"win_rate\" : None , \"mean_return\" : None , \"sharpe\" : None , \"sortino\" : None , \"calmar\" : None , \"max_drawdown\" : None , \"annual_return\" : None , \"volatility\" : None , \"baseline\" : None , } # win_rate wr = len ([ t for t in tx if t . profit > 0 ]) / total_tx if not self . _bt_stopped : await self . recalc_assets () # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u76c8\u4e8f\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u591a\u53d6\u4e00\u4e2a\u4ea4\u6613\u65e5\uff0c\u5373start\u4e4b\u524d\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u8d44\u4ea7\u6570\u636e _start = tf . day_shift ( start , - 1 ) total_profit = await self . get_assets ( end ) - await self . get_assets ( _start ) returns = await self . get_returns ( start , end ) mean_return = np . mean ( returns ) sharpe = sharpe_ratio ( returns , rf ) sortino = sortino_ratio ( returns , rf ) calma = calmar_ratio ( returns ) mdd = max_drawdown ( returns ) # \u5e74\u5316\u6536\u76ca\u7387 ar = annual_return ( returns ) # \u5e74\u5316\u6ce2\u52a8\u7387 vr = annual_volatility ( returns ) # \u8ba1\u7b97\u53c2\u8003\u6807\u7684\u7684\u76f8\u5173\u6307\u6807 if baseline is not None : ref_bars = await Stock . get_bars_in_range ( baseline , FrameType . DAY , start , end ) if ref_bars . size < 2 : ref_results = None else : returns = ref_bars [ \"close\" ][ 1 :] / ref_bars [ \"close\" ][: - 1 ] - 1 ref_results = { \"total_profit_rate\" : cum_returns_final ( returns ), \"win_rate\" : np . count_nonzero ( returns > 0 ) / len ( returns ), \"mean_return\" : np . mean ( returns ) . item (), \"sharpe\" : sharpe_ratio ( returns , rf ), \"sortino\" : sortino_ratio ( returns , rf ), \"calmar\" : calmar_ratio ( returns ), \"max_drawdown\" : max_drawdown ( returns ), \"annual_return\" : annual_return ( returns ), \"volatility\" : annual_volatility ( returns ), } else : ref_results = None return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : total_profit , \"total_profit_rate\" : total_profit / self . principal , \"win_rate\" : wr , \"mean_return\" : mean_return , \"sharpe\" : sharpe , \"sortino\" : sortino , \"calmar\" : calma , \"max_drawdown\" : mdd , \"annual_return\" : ar , \"volatility\" : vr , \"baseline\" : ref_results , } assets : float property readonly \u00b6 \u5f53\u524d\u603b\u8d44\u4ea7\u3002 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u603b\u8d44\u4ea7\uff0c\u8bf7\u4f7f\u7528 get_assets \u65b9\u6cd5\u3002 position : ndarray property readonly \u00b6 \u83b7\u53d6\u5f53\u524d\u6301\u4ed3 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u6301\u4ed3\uff0c\u8bf7\u4f7f\u7528 get_position \u65b9\u6cd5\u3002 \u5982\u679c\u5f53\u5929\u4e2a\u80a1\u66fe\u6709\u6301\u4ed3\uff0c\u4f46\u88ab\u6e05\u4ed3\uff0c\u6301\u4ed3\u8868\u4ecd\u4fdd\u7559entry\uff0c\u4f46shares\u5c06\u7f6e\u4e3a\u7a7a\u3002\u5982\u679c\u5f53\u5929\u6ca1\u6709\u4efb\u4f55\u6301\u4ed3\uff08\u4e0d\u5305\u62ec\u5f53\u5929\u6e05\u7a7a\u7684\u60c5\u51b5\uff09\uff0c\u5219\u4f1a\u7559\u4e00\u4e2a security \u5b57\u6bb5\u4e3aNone\u7684\u7a7aentry\u3002 Returns: Type Description ndarray \u8fd4\u56dedtype\u4e3a position_dtype \u7684numpy structure array __init__ ( self , account_name , principal , commission , bt_start = None , bt_end = None ) special \u00b6 \u521b\u5efa\u4e00\u4e2aBroker\u5bf9\u8c61 Parameters: Name Type Description Default account_name \u8d26\u53f7/\u7b56\u7565\u540d required principal \u521d\u59cb\u672c\u91d1 required commission \u4f63\u91d1\u7387 required start \u5f00\u59cb\u65e5\u671f(\u56de\u6d4b\u65f6\u4f7f\u7528) required end \u7ed3\u675f\u65e5\u671f\uff08\u56de\u6d4b\u65f6\u4f7f\u7528\uff09 required Source code in backtest/trade/broker.py def __init__ ( self , account_name : str , principal : float , commission : float , bt_start : Optional [ datetime . date ] = None , bt_end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u4e00\u4e2aBroker\u5bf9\u8c61 Args: account_name : \u8d26\u53f7/\u7b56\u7565\u540d principal : \u521d\u59cb\u672c\u91d1 commission : \u4f63\u91d1\u7387 start : \u5f00\u59cb\u65e5\u671f(\u56de\u6d4b\u65f6\u4f7f\u7528) end : \u7ed3\u675f\u65e5\u671f\uff08\u56de\u6d4b\u65f6\u4f7f\u7528\uff09 \"\"\" if bt_start is not None and bt_end is not None : self . mode = \"bt\" self . bt_start = bt_start self . bt_stop = bt_end # \u56de\u6d4b\u662f\u5426\u7ec8\u6b62\uff1f self . _bt_stopped = False else : self . mode = \"mock\" self . _bt_stopped = False self . bt_start = None self . bt_stop = None # \u6700\u540e\u4ea4\u6613\u65f6\u95f4 self . _last_trade_time : Optional [ datetime . datetime ] = None self . _first_trade_time : Optional [ datetime . datetime ] = None self . account_name = account_name self . commission = commission # \u521d\u59cb\u672c\u91d1 self . principal = principal # \u6bcf\u65e5\u76d8\u540e\u53ef\u7528\u8d44\u91d1 self . _cash = np . array ([], dtype = cash_dtype ) # \u6bcf\u65e5\u603b\u8d44\u4ea7, \u5305\u62ec\u672c\u91d1\u548c\u6301\u4ed3\u8d44\u4ea7 self . _assets = np . array ([], dtype = assets_dtype ) self . _positions = np . array ([], dtype = daily_position_dtype ) # \u6bcf\u65e5\u6301\u4ed3 self . _unclosed_trades = {} # \u672a\u5e73\u4ed3\u7684\u4ea4\u6613 # \u59d4\u6258\u5217\u8868\uff0c\u5305\u62ec\u5e9f\u5355\u548c\u672a\u6210\u4ea4\u59d4\u6258 self . entrusts = {} # \u6240\u6709\u7684\u6210\u4ea4\u5217\u8868\uff0c\u5305\u62ec\u4e70\u5165\u548c\u5356\u51fa\uff0c\u5df2\u5173\u95ed\u548c\u672a\u5173\u95ed\u7684 self . trades = {} # trasaction = buy + sell trade self . transactions : List [ Transaction ] = [] self . _lock = asyncio . Lock () buy ( self , security , bid_price , bid_shares , bid_time ) async \u00b6 \u4e70\u5165\u59d4\u6258 \u4e70\u5165\u4ee5\u5c3d\u53ef\u80fd\u5b9e\u73b0\u59d4\u6258\u4e3a\u76ee\u6807\u3002\u5982\u679c\u53ef\u7528\u8d44\u91d1\u4e0d\u8db3\uff0c\u4f46\u80fd\u4e70\u5165\u90e8\u5206\u80a1\u7968\uff0c\u5219\u90e8\u5206\u4e70\u5165\u3002 \u5982\u679cbid_price\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6da8\u505c\u4ef7\u4e70\u5165\u3002 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required bid_price float \u59d4\u6258\u4ef7\u683c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 required bid_shares int \u8be2\u4e70\u7684\u80a1\u6570 required bid_time datetime.datetime \u59d4\u6258\u65f6\u95f4 required Returns: Type Description Trade Trade \u5bf9\u8c61 Source code in backtest/trade/broker.py async def buy ( self , security : str , bid_price : Union [ int , float ], bid_shares : int , bid_time : datetime . datetime , ) -> Trade : \"\"\"\u4e70\u5165\u59d4\u6258 \u4e70\u5165\u4ee5\u5c3d\u53ef\u80fd\u5b9e\u73b0\u59d4\u6258\u4e3a\u76ee\u6807\u3002\u5982\u679c\u53ef\u7528\u8d44\u91d1\u4e0d\u8db3\uff0c\u4f46\u80fd\u4e70\u5165\u90e8\u5206\u80a1\u7968\uff0c\u5219\u90e8\u5206\u4e70\u5165\u3002 \u5982\u679cbid_price\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6da8\u505c\u4ef7\u4e70\u5165\u3002 Args: security str: \u8bc1\u5238\u4ee3\u7801 bid_price float: \u59d4\u6258\u4ef7\u683c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares int: \u8be2\u4e70\u7684\u80a1\u6570 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: [Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _buy ( security , bid_price , bid_shares , bid_time ) freeze ( self ) \u00b6 \u51bb\u7ed3\u8d26\u6237\uff0c\u505c\u6b62\u63a5\u6536\u65b0\u7684\u59d4\u6258 Source code in backtest/trade/broker.py def freeze ( self ): \"\"\"\u51bb\u7ed3\u8d26\u6237\uff0c\u505c\u6b62\u63a5\u6536\u65b0\u7684\u59d4\u6258\"\"\" self . _bt_stopped = True get_assets ( self , date ) async \u00b6 \u67e5\u8be2\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u5f53\u65e5\u603b\u8d44\u4ea7 = \u5f53\u65e5\u53ef\u7528\u8d44\u91d1 + \u6301\u4ed3\u5e02\u503c Parameters: Name Type Description Default date date \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 required Returns: Type Description float \u8fd4\u56de\u67d0\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 Source code in backtest/trade/broker.py async def get_assets ( self , date : datetime . date ) -> float : \"\"\"\u67e5\u8be2\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u5f53\u65e5\u603b\u8d44\u4ea7 = \u5f53\u65e5\u53ef\u7528\u8d44\u91d1 + \u6301\u4ed3\u5e02\u503c Args: date: \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 Returns: \u8fd4\u56de\u67d0\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 \"\"\" if self . _assets . size == 0 : return self . principal if date is None : return self . _assets [ - 1 ][ \"assets\" ] result = self . _assets [ self . _assets [ \"date\" ] == date ] if result . size == 1 : return result [ \"assets\" ] . item () assets , * _ = await self . _calc_assets ( date ) return assets get_cash ( self , dt ) \u00b6 \u83b7\u53d6 dt \u5f53\u5929\u7684\u53ef\u7528\u8d44\u91d1 \u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c dt \u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Parameters: Name Type Description Default dt datetime.date \u65e5\u671f required Returns: Type Description float \u67d0\u65e5\u53ef\u7528\u8d44\u91d1 Source code in backtest/trade/broker.py def get_cash ( self , dt : datetime . date ) -> float : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u7684\u53ef\u7528\u8d44\u91d1 \u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Args: dt (datetime.date): \u65e5\u671f Returns: float: \u67d0\u65e5\u53ef\u7528\u8d44\u91d1 \"\"\" if self . _cash . size == 0 : return self . principal if dt > self . _cash [ - 1 ][ \"date\" ]: return self . _cash [ - 1 ][ \"cash\" ] . item () elif dt < self . _cash [ 0 ][ \"date\" ]: return self . principal result = self . _cash [ self . _cash [ \"date\" ] == dt ][ \"cash\" ] if result . size == 0 : raise BadParamsError ( f \"date { dt } not found\" ) else : return result . item () get_position ( self , dt , dtype = dtype ([( 'security' , 'O' ), ( 'shares' , '<f8' ), ( 'sellable' , '<f8' ), ( 'price' , '<f8' )])) \u00b6 \u83b7\u53d6 dt \u65e5\u6301\u4ed3 \u5982\u679c\u4f20\u5165\u7684 dt \u5927\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u6700\u540e\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u6700\u540e\u4e00\u5929\u7684\u6301\u4ed3\u6570\u636e,\u5e76\u4e14\u6240\u6709\u6301\u4ed3\u5747\u4e3a\u53ef\u552e\u72b6\u6001 \u5982\u679c\u4f20\u5165\u7684 dt \u5c0f\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u7b2c\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u7a7a\u3002 Parameters: Name Type Description Default dt \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u6301\u4ed3 required dtype \u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4e3a position_dtype \u6216 daily_position_dtype \uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa dtype([('security', 'O'), ('shares', '<f8'), ('sellable', '<f8'), ('price', '<f8')]) Returns: Type Description ndarray \u8fd4\u56de\u7ed3\u679c\u4e3adtype\u4e3a dtype \u7684\u4e00\u7ef4numpy structured array\uff0c\u5176\u4e2dprice\u4e3a\u8be5\u6279\u6301\u4ed3\u7684\u5747\u4ef7\u3002 Source code in backtest/trade/broker.py def get_position ( self , dt : datetime . date , dtype = position_dtype ) -> np . ndarray : \"\"\"\u83b7\u53d6`dt`\u65e5\u6301\u4ed3 \u5982\u679c\u4f20\u5165\u7684`dt`\u5927\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u6700\u540e\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u6700\u540e\u4e00\u5929\u7684\u6301\u4ed3\u6570\u636e,\u5e76\u4e14\u6240\u6709\u6301\u4ed3\u5747\u4e3a\u53ef\u552e\u72b6\u6001 \u5982\u679c\u4f20\u5165\u7684`dt`\u5c0f\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u7b2c\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u7a7a\u3002 Args: dt : \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u6301\u4ed3 dtype : \u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4e3a[position_dtype][backtest.trade.datatypes.position_dtype]\u6216[daily_position_dtype][backtest.trade.datatypes.daily_position_dtype]\uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa Returns: \u8fd4\u56de\u7ed3\u679c\u4e3adtype\u4e3a`dtype`\u7684\u4e00\u7ef4numpy structured array\uff0c\u5176\u4e2dprice\u4e3a\u8be5\u6279\u6301\u4ed3\u7684\u5747\u4ef7\u3002 \"\"\" if self . _positions . size == 0 : return np . array ([], dtype = dtype ) if dt < self . _positions [ 0 ][ \"date\" ]: return np . array ([], dtype = dtype ) last_date = self . _positions [ - 1 ][ \"date\" ] if dt > last_date : result = self . _positions [ self . _positions [ \"date\" ] == last_date ] result [ \"sellable\" ] = result [ \"shares\" ] return result [ list ( dtype . names )] . astype ( dtype ) result = self . _positions [ self . _positions [ \"date\" ] == dt ] if result . size == 0 : raise BadParamsError ( f \"param dt { dt } not found\" ) return result [ list ( dtype . names )] . astype ( dtype ) get_returns ( self , start_date = None , end_date = None ) async \u00b6 \u6c42\u622a\u6b62 end_date \u65f6\u7684\u6bcf\u65e5\u56de\u62a5 Parameters: Name Type Description Default start_date date \u8ba1\u7b97\u56de\u62a5\u7684\u8d77\u59cb\u65e5\u671f None end_date \u8ba1\u7b97\u56de\u62a5\u7684\u7ed3\u675f\u65e5\u671f None Returns: Type Description ndarray \u4ee5\u767e\u5206\u6bd4\u4e3a\u5355\u4f4d\u7684\u6bcf\u65e5\u56de\u62a5\u7387,\u7d22\u5f15\u4e3a\u5bf9\u5e94\u65e5\u671f Source code in backtest/trade/broker.py async def get_returns ( self , start_date : datetime . date = None , end_date : datetime . date = None ) -> np . ndarray : \"\"\"\u6c42\u622a\u6b62`end_date`\u65f6\u7684\u6bcf\u65e5\u56de\u62a5 Args: start_date: \u8ba1\u7b97\u56de\u62a5\u7684\u8d77\u59cb\u65e5\u671f end_date : \u8ba1\u7b97\u56de\u62a5\u7684\u7ed3\u675f\u65e5\u671f Returns: \u4ee5\u767e\u5206\u6bd4\u4e3a\u5355\u4f4d\u7684\u6bcf\u65e5\u56de\u62a5\u7387,\u7d22\u5f15\u4e3a\u5bf9\u5e94\u65e5\u671f \"\"\" start = start_date or self . account_start_date # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u6bcf\u65e5\u56de\u62a5\u65f6\uff0c\u9700\u8981\u53d6\u591a\u4e00\u65e5\uff0c\u5373`start`\u4e4b\u524d\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 _start = tf . day_shift ( start , - 1 ) end = end_date or self . account_end_date assert self . account_start_date <= start <= end assert start <= end <= self . account_end_date if not self . _bt_stopped : await self . recalc_assets () assets = self . _assets [ ( self . _assets [ \"date\" ] >= _start ) & ( self . _assets [ \"date\" ] <= end ) ] if assets . size == 0 : raise TradeError ( f \"date range error: { start } - { end } contains no data\" , with_stack = True ) return assets [ \"assets\" ][ 1 :] / assets [ \"assets\" ][: - 1 ] - 1 get_unclosed_trades ( self , dt ) \u00b6 \u83b7\u53d6 dt \u5f53\u5929\u672a\u5e73\u4ed3\u7684\u4ea4\u6613 \u5982\u679c dt \u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Source code in backtest/trade/broker.py def get_unclosed_trades ( self , dt : datetime . date ) -> set : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u672a\u5e73\u4ed3\u7684\u4ea4\u6613 \u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 \"\"\" if len ( self . _unclosed_trades ) == 0 : return set () result = self . _unclosed_trades . get ( dt ) if result is None : start = sorted ( self . _unclosed_trades . keys ())[ 0 ] if dt < start : return set () else : self . _fillup_unclosed_trades ( dt ) return self . _unclosed_trades . get ( dt ) info ( self , dt = None ) async \u00b6 dt \u65e5\u7684\u8d26\u53f7\u76f8\u5173\u4fe1\u606f Returns: Type Description Dict \u8d26\u53f7\u76f8\u5173\u4fe1\u606f\uff1a name: str, \u8d26\u6237\u540d principal: float, \u521d\u59cb\u8d44\u91d1 assets: float, dt \u65e5\u8d44\u4ea7 start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548 bt_stopped: \u56de\u6d4b\u662f\u5426\u7ed3\u675f\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548\u3002 last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 available: float, dt \u65e5\u53ef\u7528\u8d44\u91d1 market_value: dt \u65e5\u80a1\u7968\u5e02\u503c pnl: dt \u76c8\u4e8f(\u7edd\u5bf9\u503c) ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array Source code in backtest/trade/broker.py async def info ( self , dt : datetime . date = None ) -> Dict : \"\"\"`dt`\u65e5\u7684\u8d26\u53f7\u76f8\u5173\u4fe1\u606f Returns: Dict: \u8d26\u53f7\u76f8\u5173\u4fe1\u606f\uff1a - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, `dt`\u65e5\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548 - bt_stopped: \u56de\u6d4b\u662f\u5426\u7ed3\u675f\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548\u3002 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, `dt`\u65e5\u53ef\u7528\u8d44\u91d1 - market_value: `dt`\u65e5\u80a1\u7968\u5e02\u503c - pnl: `dt`\u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" dt = dt or self . last_trade_date cash = self . get_cash ( dt ) assets = await self . get_assets ( dt ) return { \"name\" : self . account_name , \"principal\" : self . principal , \"start\" : self . account_start_date , \"end\" : self . bt_stop , \"bt_stopped\" : self . _bt_stopped , \"last_trade\" : self . last_trade_date , \"assets\" : assets , \"available\" : cash , \"market_value\" : assets - cash , \"pnl\" : assets - self . principal , \"ppnl\" : assets / self . principal - 1 , \"positions\" : self . get_position ( dt ), } metrics ( self , start = None , end = None , baseline = '399300.XSHE' ) async \u00b6 \u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5\u7684\u8d26\u6237\u6307\u6807 Parameters: Name Type Description Default start Optional[datetime.date] \u5f00\u59cb\u65f6\u95f4 None end Optional[datetime.date] \u7ed3\u675f\u65f6\u95f4 None baseline Optional[str] \u53c2\u8003\u6807\u7684 '399300.XSHE' Returns: Type Description Dict \u6307\u6807\u5b57\u5178\uff0c\u5176key\u4e3a start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 total_profit \u603b\u76c8\u4e8f total_profit_rate \u603b\u76c8\u4e8f\u7387 win_rate \u80dc\u7387 mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 sharpe \u590f\u666e\u6bd4\u7387 max_drawdown \u6700\u5927\u56de\u64a4 sortino calmar annual_return \u5e74\u5316\u6536\u76ca\u7387 volatility \u6ce2\u52a8\u7387 baseline: dict win_rate sharpe max_drawdown sortino annual_return total_profit_rate volatility Source code in backtest/trade/broker.py async def metrics ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , baseline : Optional [ str ] = \"399300.XSHE\" , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5\u7684\u8d26\u6237\u6307\u6807 Args: start: \u5f00\u59cb\u65f6\u95f4 end: \u7ed3\u675f\u65f6\u95f4 baseline: \u53c2\u8003\u6807\u7684 Returns: Dict: \u6307\u6807\u5b57\u5178\uff0c\u5176key\u4e3a - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" try : rf = cfg . metrics . risk_free_rate / cfg . metrics . annual_days except Exception : rf = 0 start = min ( start or self . account_start_date , self . account_start_date ) end = max ( end or self . account_end_date , self . account_end_date ) tx = [] logger . info ( \" %s tx in total\" , len ( self . transactions )) for t in self . transactions : if t . entry_time . date () >= start and t . exit_time . date () <= end : tx . append ( t ) else : logger . info ( \"tx %s not in range, start: %s , end: %s \" , t . sec , t . entry_time , t . exit_time , ) # \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 window = tf . count_day_frames ( start , end ) total_tx = len ( tx ) if total_tx == 0 : return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : None , \"total_profit_rate\" : None , \"win_rate\" : None , \"mean_return\" : None , \"sharpe\" : None , \"sortino\" : None , \"calmar\" : None , \"max_drawdown\" : None , \"annual_return\" : None , \"volatility\" : None , \"baseline\" : None , } # win_rate wr = len ([ t for t in tx if t . profit > 0 ]) / total_tx if not self . _bt_stopped : await self . recalc_assets () # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u76c8\u4e8f\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u591a\u53d6\u4e00\u4e2a\u4ea4\u6613\u65e5\uff0c\u5373start\u4e4b\u524d\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u8d44\u4ea7\u6570\u636e _start = tf . day_shift ( start , - 1 ) total_profit = await self . get_assets ( end ) - await self . get_assets ( _start ) returns = await self . get_returns ( start , end ) mean_return = np . mean ( returns ) sharpe = sharpe_ratio ( returns , rf ) sortino = sortino_ratio ( returns , rf ) calma = calmar_ratio ( returns ) mdd = max_drawdown ( returns ) # \u5e74\u5316\u6536\u76ca\u7387 ar = annual_return ( returns ) # \u5e74\u5316\u6ce2\u52a8\u7387 vr = annual_volatility ( returns ) # \u8ba1\u7b97\u53c2\u8003\u6807\u7684\u7684\u76f8\u5173\u6307\u6807 if baseline is not None : ref_bars = await Stock . get_bars_in_range ( baseline , FrameType . DAY , start , end ) if ref_bars . size < 2 : ref_results = None else : returns = ref_bars [ \"close\" ][ 1 :] / ref_bars [ \"close\" ][: - 1 ] - 1 ref_results = { \"total_profit_rate\" : cum_returns_final ( returns ), \"win_rate\" : np . count_nonzero ( returns > 0 ) / len ( returns ), \"mean_return\" : np . mean ( returns ) . item (), \"sharpe\" : sharpe_ratio ( returns , rf ), \"sortino\" : sortino_ratio ( returns , rf ), \"calmar\" : calmar_ratio ( returns ), \"max_drawdown\" : max_drawdown ( returns ), \"annual_return\" : annual_return ( returns ), \"volatility\" : annual_volatility ( returns ), } else : ref_results = None return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : total_profit , \"total_profit_rate\" : total_profit / self . principal , \"win_rate\" : wr , \"mean_return\" : mean_return , \"sharpe\" : sharpe , \"sortino\" : sortino , \"calmar\" : calma , \"max_drawdown\" : mdd , \"annual_return\" : ar , \"volatility\" : vr , \"baseline\" : ref_results , } recalc_assets ( self , start = None , end = None ) async \u00b6 \u91cd\u65b0\u8ba1\u7b97\u8d26\u6237\u7684\u6bcf\u65e5\u8d44\u4ea7 \u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u8d44\u4ea7\u8868\u5c06\u5305\u62ec\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\uff0c\u5230 end \u65e5\u7684\u8d44\u4ea7\u6570\u636e\u3002\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\u8d77\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u9996\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76ca\u3002 Parameters: Name Type Description Default end Optional[datetime.date] \u8ba1\u7b97\u5230\u54ea\u4e00\u5929\u7684\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u8ba1\u7b97\u5230\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\uff08\u975e\u56de\u6d4b\uff09\uff0c\u6216\u8005\u56de\u6d4b\u7ed3\u675f\u65e5\u3002 None Source code in backtest/trade/broker.py async def recalc_assets ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None ): \"\"\"\u91cd\u65b0\u8ba1\u7b97\u8d26\u6237\u7684\u6bcf\u65e5\u8d44\u4ea7 \u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u8d44\u4ea7\u8868\u5c06\u5305\u62ec\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\uff0c\u5230`end`\u65e5\u7684\u8d44\u4ea7\u6570\u636e\u3002\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\u8d77\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u9996\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76ca\u3002 Args: end: \u8ba1\u7b97\u5230\u54ea\u4e00\u5929\u7684\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u8ba1\u7b97\u5230\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\uff08\u975e\u56de\u6d4b\uff09\uff0c\u6216\u8005\u56de\u6d4b\u7ed3\u675f\u65e5\u3002 \"\"\" if end is None : if self . mode != \"bt\" : # \u975e\u56de\u6d4b\u4e0b\u8ba1\u7b97\u5230\u5f53\u4e0b end = arrow . now () . date () else : # \u56de\u6d4b\u65f6\u8ba1\u7b97\u5230bt_stop end = self . bt_stop # \u628a\u671f\u521d\u8d44\u4ea7\u52a0\u8fdb\u6765 if self . _assets . size == 0 : start = self . account_start_date if start is None : return np . array ([], dtype = rich_assets_dtype ) _before_start = tf . day_shift ( start , - 1 ) self . _assets = np . array ( [( _before_start , self . principal )], dtype = assets_dtype ) start = start or tf . day_shift ( self . _assets [ - 1 ][ \"date\" ], 1 ) if start >= end : return # \u5f85\u8865\u9f50\u7684\u8d44\u4ea7\u65e5 frames = [ tf . int2date ( d ) for d in tf . get_frames ( start , end , FrameType . DAY )] # \u4ece\u6700\u540e\u4e00\u4e2a\u8d44\u4ea7\u65e5\u5230`end`\uff0c\u6301\u4ed3\u5e94\u90fd\u662f\u4e00\u6837\u7684 position = self . get_position ( end , position_dtype ) if position . size == 0 : assets = self . _assets [ - 1 ][ \"assets\" ] self . _assets = np . concatenate ( ( self . _assets , np . array ([( frame , assets ) for frame in frames ], dtype = assets_dtype ), ) ) return secs = position [ position [ \"shares\" ] != 0 ][ \"security\" ] shares = { sec : position [ position [ \"security\" ] == sec ][ \"shares\" ][ 0 ] for sec in secs } if len ( secs ): feed = get_app_context () . feed closes = await feed . batch_get_close_price_in_range ( secs , frames ) for frame in frames : cash = self . get_cash ( frame ) mv = 0 for sec in secs : if closes . get ( sec ) is None : price = position [ position [ \"security\" ] == sec ][ \"price\" ] . item () mv += shares . get ( sec , 0 ) * price else : iclose = self . _index_of ( closes [ sec ], frame , \"frame\" ) mv += closes [ sec ][ iclose ][ \"close\" ] * shares . get ( sec , 0 ) i = self . _index_of ( self . _assets , frame ) if i is None : self . _assets = np . append ( self . _assets , np . array ([( frame , float ( cash + mv ))], dtype = assets_dtype ), axis = 0 , ) else : self . _assets [ i ][ \"assets\" ] = float ( cash + mv ) sell ( self , security , bid_price , bid_shares , bid_time ) async \u00b6 \u5356\u51fa\u59d4\u6258 Parameters: Name Type Description Default security str \u59d4\u6258\u8bc1\u5238\u4ee3\u7801 required bid_price float \u51fa\u552e\u4ef7\u683c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 required bid_shares float \u8be2\u5356\u80a1\u6570\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u9650\u5236\u5fc5\u987b\u4ee5100\u7684\u500d\u6570\u5356\u51fa\u3002 required bid_time datetime.datetime \u59d4\u6258\u65f6\u95f4 required Returns: Type Description List[backtest.trade.trade.Trade] \u6210\u4ea4\u8bb0\u5f55\u5217\u8868,\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a Trade \u5bf9\u8c61 Source code in backtest/trade/broker.py async def sell ( self , security : str , bid_price : Union [ None , float ], bid_shares : float , bid_time : datetime . datetime , ) -> List [ Trade ]: \"\"\"\u5356\u51fa\u59d4\u6258 Args: security str: \u59d4\u6258\u8bc1\u5238\u4ee3\u7801 bid_price float: \u51fa\u552e\u4ef7\u683c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares float: \u8be2\u5356\u80a1\u6570\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u9650\u5236\u5fc5\u987b\u4ee5100\u7684\u500d\u6570\u5356\u51fa\u3002 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: \u6210\u4ea4\u8bb0\u5f55\u5217\u8868,\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a[Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _sell ( security , bid_price , bid_shares , bid_time ) datatypes \u00b6 assets_dtype \u00b6 the assets dtype as the following: 1 2 3 4 5 6 np.dtype( [ (\"date\", \"O\"), (\"assets\", \"<f8\") ] ) daily_position_dtype \u00b6 the position dtype which usually used in backtest server internally: 1 2 3 4 5 6 7 8 9 np.dtype( [ (\"date\", \"O\"), (\"security\", \"O\"), (\"shares\", \"<f8\"), (\"sellable\", \"<f8\"), (\"price\", \"<f8\"), ] ) float_ts_dtype \u00b6 generic date-float dtype as the following: ``` np.dtype( [ (\"date\", \"O\"), (\"value\", \"<f8\") ] ) position_dtype \u00b6 the position dtype which will return back to trader-client 1 2 3 4 5 6 7 8 np.dtype( [ (\"security\", \"O\"), (\"shares\", \"<f8\"), (\"sellable\", \"<f8\"), (\"price\", \"<f8\") ] ) rich_assets_dtype \u00b6 the rich assets dtype as the following: 1 2 3 4 5 6 7 8 np.dtype( [ (\"date\", \"O\"), (\"assets\", \"<f8\"), (\"cash\", \"<f8\"), (\"mv\", \"<f8\") ] ) BidType ( IntEnum ) \u00b6 An enumeration. Source code in backtest/trade/datatypes.py class BidType ( IntEnum ): LIMIT = 1 MARKET = 2 def __str__ ( self ): return { BidType . LIMIT : \"\u9650\u4ef7\u59d4\u6258\" , BidType . MARKET : \"\u5e02\u4ef7\u59d4\u6258\" } . get ( self ) EntrustSide ( IntEnum ) \u00b6 An enumeration. Source code in backtest/trade/datatypes.py class EntrustSide ( IntEnum ): BUY = 1 SELL = - 1 XDXR = 0 def __str__ ( self ): return { EntrustSide . BUY : \"\u4e70\u5165\" , EntrustSide . SELL : \"\u5356\u51fa\" , EntrustSide . XDXR : \"\u5206\u7ea2\u914d\u80a1\" , }[ self ] trade \u00b6 Trade \u00b6 Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u5b8c\u6210\u7684\u59d4\u6258\u3002\u4e00\u4e2a\u59d4\u6258\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2aTrade\uff0c\u7279\u522b\u662f\u5f53\u5356\u51fa\u7684\u65f6\u5019 Source code in backtest/trade/trade.py class Trade : \"\"\"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u5b8c\u6210\u7684\u59d4\u6258\u3002\u4e00\u4e2a\u59d4\u6258\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2aTrade\uff0c\u7279\u522b\u662f\u5f53\u5356\u51fa\u7684\u65f6\u5019\"\"\" def __init__ ( self , eid : str , security : str , price : float , shares : int , fee : float , side : EntrustSide , time : datetime . datetime , ): \"\"\"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u7684\u59d4\u6258\uff08\u5373\u5df2\u5b8c\u6210\u7684\u4ea4\u6613\uff09 Args: eid: \u5bf9\u5e94\u7684\u59d4\u6258\u53f7 security: \u8bc1\u5238\u4ee3\u7801 price: \u4ea4\u6613\u4ef7\u683c shares: \u4ea4\u6613\u6570\u91cf fee: \u4ea4\u6613\u624b\u7eed\u8d39 time: \u4ea4\u6613\u65f6\u95f4 \"\"\" self . eid = eid self . tid = str ( uuid . uuid4 ()) self . security = security self . fee = fee self . price = price self . shares = shares self . time = time self . side = side # only for buying trade self . _unsell = shares self . _unamortized_fee = fee self . closed = False if side == EntrustSide . XDXR : logger . info ( \"XDXR entrust: %s \" , self , date = time ) def __str__ ( self ): return f \"\u8bc1\u5238\u4ee3\u7801: { self . security } \\n \u6210\u4ea4\u65b9\u5411: { self . side } \\n \u6210\u4ea4\u5747\u4ef7: { self . price } \\n \u6570\u91cf: { self . shares } \\n \u624b\u7eed\u8d39: { self . fee } \\n \u59d4\u6258\u53f7: { self . eid } \\n \u6210\u4ea4\u53f7: { self . tid } \\n \u6210\u4ea4\u65f6\u95f4: { self . time } \\n \" def to_dict ( self ) -> dict : \"\"\"\u5c06Trade\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 Returns: Dict: \u8fd4\u56de\u503c\uff0c\u5176key\u4e3a - tid: \u4ea4\u6613\u53f7 - eid: \u59d4\u6258\u53f7 - security: \u8bc1\u5238\u4ee3\u7801 - price: \u4ea4\u6613\u4ef7\u683c - filled: \u5c45\u4ea4\u6570\u91cf - trade_fees: \u4ea4\u6613\u624b\u7eed\u8d39 - order_side: \u4ea4\u6613\u65b9\u5411 - time: \u4ea4\u6613\u65f6\u95f4 \"\"\" return { \"tid\" : str ( self . tid ), \"eid\" : str ( self . eid ), \"security\" : self . security , \"order_side\" : str ( self . side ), \"price\" : self . price , \"filled\" : self . shares , \"time\" : self . time . isoformat (), \"trade_fees\" : self . fee , } def sell ( self , shares : float , price : float , fee : float , close_time : datetime . datetime ): \"\"\"\u4ece\u5f53\u524d\u672a\u552e\u51fa\u80a1\u4e2d\u552e\u51fa\u3002 \u8ba1\u7b97\u65f6\u5c06\u6839\u636e\u552e\u51fa\u7684\u80a1\u6570\uff0c\u5206\u644a\u4e70\u5165\u548c\u5356\u7684\u4ea4\u6613\u6210\u672c\u3002\u8fd4\u56de\u672a\u552e\u51fa\u7684\u80a1\u4efd\u548c\u672a\u5206\u644a\u7684\u6210\u672c\u3002 Args: shares: \u5f85\u51fa\u552e\u80a1\u6570 price: \u51fa\u552e\u4ef7\u683c fee: \u4ea4\u6613\u624b\u7eed\u8d39 close_time: \u6210\u4ea4\u65e5\u671f \"\"\" assert self . side in ( EntrustSide . BUY , EntrustSide . XDXR ) if not self . closed : sec = self . security assert self . _unsell > 0 , str ( self ) + \"\u72b6\u6001\u9519\u8bef\uff0c\u65e0\u6cd5\u552e\u51fa\uff0c\u8bf7\u68c0\u67e5\u4ee3\u7801\" sellable = min ( shares , self . _unsell ) # \u8ba1\u7b97\u672c\u6b21\u4ea4\u6613\u7684\u6536\u76ca\uff0c\u5e76\u5206\u644a\u4ea4\u6613\u6210\u672c amortized_buy_fee = self . fee * sellable / self . shares amortized_sell_fee = fee * sellable / shares self . _unsell -= sellable self . _unamortized_fee -= amortized_buy_fee if self . _unsell == 0 : logger . debug ( \"\u4ea4\u6613 %s ( %s )\u5df2close.\" , self . security , self . tid , date = close_time ) self . closed = True trade = Trade ( self . eid , sec , price , sellable , amortized_sell_fee , EntrustSide . SELL , close_time , ) tx = Transaction ( sec , self . time , close_time , self . price , price , sellable , amortized_buy_fee + amortized_sell_fee , ) return shares - sellable , fee - amortized_sell_fee , trade , tx __init__ ( self , eid , security , price , shares , fee , side , time ) special \u00b6 Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u7684\u59d4\u6258\uff08\u5373\u5df2\u5b8c\u6210\u7684\u4ea4\u6613\uff09 Parameters: Name Type Description Default eid str \u5bf9\u5e94\u7684\u59d4\u6258\u53f7 required security str \u8bc1\u5238\u4ee3\u7801 required price float \u4ea4\u6613\u4ef7\u683c required shares int \u4ea4\u6613\u6570\u91cf required fee float \u4ea4\u6613\u624b\u7eed\u8d39 required time datetime \u4ea4\u6613\u65f6\u95f4 required Source code in backtest/trade/trade.py def __init__ ( self , eid : str , security : str , price : float , shares : int , fee : float , side : EntrustSide , time : datetime . datetime , ): \"\"\"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u7684\u59d4\u6258\uff08\u5373\u5df2\u5b8c\u6210\u7684\u4ea4\u6613\uff09 Args: eid: \u5bf9\u5e94\u7684\u59d4\u6258\u53f7 security: \u8bc1\u5238\u4ee3\u7801 price: \u4ea4\u6613\u4ef7\u683c shares: \u4ea4\u6613\u6570\u91cf fee: \u4ea4\u6613\u624b\u7eed\u8d39 time: \u4ea4\u6613\u65f6\u95f4 \"\"\" self . eid = eid self . tid = str ( uuid . uuid4 ()) self . security = security self . fee = fee self . price = price self . shares = shares self . time = time self . side = side # only for buying trade self . _unsell = shares self . _unamortized_fee = fee self . closed = False if side == EntrustSide . XDXR : logger . info ( \"XDXR entrust: %s \" , self , date = time ) sell ( self , shares , price , fee , close_time ) \u00b6 \u4ece\u5f53\u524d\u672a\u552e\u51fa\u80a1\u4e2d\u552e\u51fa\u3002 \u8ba1\u7b97\u65f6\u5c06\u6839\u636e\u552e\u51fa\u7684\u80a1\u6570\uff0c\u5206\u644a\u4e70\u5165\u548c\u5356\u7684\u4ea4\u6613\u6210\u672c\u3002\u8fd4\u56de\u672a\u552e\u51fa\u7684\u80a1\u4efd\u548c\u672a\u5206\u644a\u7684\u6210\u672c\u3002 Parameters: Name Type Description Default shares float \u5f85\u51fa\u552e\u80a1\u6570 required price float \u51fa\u552e\u4ef7\u683c required fee float \u4ea4\u6613\u624b\u7eed\u8d39 required close_time datetime \u6210\u4ea4\u65e5\u671f required Source code in backtest/trade/trade.py def sell ( self , shares : float , price : float , fee : float , close_time : datetime . datetime ): \"\"\"\u4ece\u5f53\u524d\u672a\u552e\u51fa\u80a1\u4e2d\u552e\u51fa\u3002 \u8ba1\u7b97\u65f6\u5c06\u6839\u636e\u552e\u51fa\u7684\u80a1\u6570\uff0c\u5206\u644a\u4e70\u5165\u548c\u5356\u7684\u4ea4\u6613\u6210\u672c\u3002\u8fd4\u56de\u672a\u552e\u51fa\u7684\u80a1\u4efd\u548c\u672a\u5206\u644a\u7684\u6210\u672c\u3002 Args: shares: \u5f85\u51fa\u552e\u80a1\u6570 price: \u51fa\u552e\u4ef7\u683c fee: \u4ea4\u6613\u624b\u7eed\u8d39 close_time: \u6210\u4ea4\u65e5\u671f \"\"\" assert self . side in ( EntrustSide . BUY , EntrustSide . XDXR ) if not self . closed : sec = self . security assert self . _unsell > 0 , str ( self ) + \"\u72b6\u6001\u9519\u8bef\uff0c\u65e0\u6cd5\u552e\u51fa\uff0c\u8bf7\u68c0\u67e5\u4ee3\u7801\" sellable = min ( shares , self . _unsell ) # \u8ba1\u7b97\u672c\u6b21\u4ea4\u6613\u7684\u6536\u76ca\uff0c\u5e76\u5206\u644a\u4ea4\u6613\u6210\u672c amortized_buy_fee = self . fee * sellable / self . shares amortized_sell_fee = fee * sellable / shares self . _unsell -= sellable self . _unamortized_fee -= amortized_buy_fee if self . _unsell == 0 : logger . debug ( \"\u4ea4\u6613 %s ( %s )\u5df2close.\" , self . security , self . tid , date = close_time ) self . closed = True trade = Trade ( self . eid , sec , price , sellable , amortized_sell_fee , EntrustSide . SELL , close_time , ) tx = Transaction ( sec , self . time , close_time , self . price , price , sellable , amortized_buy_fee + amortized_sell_fee , ) return shares - sellable , fee - amortized_sell_fee , trade , tx to_dict ( self ) \u00b6 \u5c06Trade\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 Returns: Type Description Dict \u8fd4\u56de\u503c\uff0c\u5176key\u4e3a tid: \u4ea4\u6613\u53f7 eid: \u59d4\u6258\u53f7 security: \u8bc1\u5238\u4ee3\u7801 price: \u4ea4\u6613\u4ef7\u683c filled: \u5c45\u4ea4\u6570\u91cf trade_fees: \u4ea4\u6613\u624b\u7eed\u8d39 order_side: \u4ea4\u6613\u65b9\u5411 time: \u4ea4\u6613\u65f6\u95f4 Source code in backtest/trade/trade.py def to_dict ( self ) -> dict : \"\"\"\u5c06Trade\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 Returns: Dict: \u8fd4\u56de\u503c\uff0c\u5176key\u4e3a - tid: \u4ea4\u6613\u53f7 - eid: \u59d4\u6258\u53f7 - security: \u8bc1\u5238\u4ee3\u7801 - price: \u4ea4\u6613\u4ef7\u683c - filled: \u5c45\u4ea4\u6570\u91cf - trade_fees: \u4ea4\u6613\u624b\u7eed\u8d39 - order_side: \u4ea4\u6613\u65b9\u5411 - time: \u4ea4\u6613\u65f6\u95f4 \"\"\" return { \"tid\" : str ( self . tid ), \"eid\" : str ( self . eid ), \"security\" : self . security , \"order_side\" : str ( self . side ), \"price\" : self . price , \"filled\" : self . shares , \"time\" : self . time . isoformat (), \"trade_fees\" : self . fee , } transaction \u00b6 Transaction \u00b6 \u5305\u62ec\u4e86\u4e70\u548c\u5356\u7684\u4e00\u6b21\u5b8c\u6574\u4ea4\u6613 Source code in backtest/trade/transaction.py class Transaction : \"\"\"\u5305\u62ec\u4e86\u4e70\u548c\u5356\u7684\u4e00\u6b21\u5b8c\u6574\u4ea4\u6613\"\"\" def __init__ ( self , sec : str , entry_time : datetime . datetime , exit_time : datetime . datetime , entry_price : float , exit_price : float , shares : float , fee : float , ): self . sec = sec self . entry_time = entry_time self . exit_time = exit_time self . entry_price = entry_price self . exit_price = exit_price self . shares = shares self . fee = fee self . profit = ( exit_price - entry_price ) * shares - fee self . pprofit = self . profit / ( entry_price * shares ) try : # \u5982\u679comicron\u672a\u521d\u59cb\u5316\uff0c\u5219\u4e0d\u8ba1\u7b97\u8d44\u4ea7\u66b4\u9732\u7a97\u53e3 self . window = tf . count_day_frames ( entry_time , exit_time ) except Exception : pass def __str__ ( self ): return f \" { self . sec } { self . entry_time } \u4e70\u5165( { self . entry_price } , { self . exit_time } \u5356\u51fa( { self . exit_price } ), profit { self . exit_price / self . entry_price - 1 : .2% } \"","title":"Trade"},{"location":"api/trade/#backtest.trade.broker","text":"Broker\u662f\u4e00\u4e2a\u4ea4\u6613\u4ee3\u7406\u3002\u6bcf\u4e00\u4e2a\u4ea4\u6613\u4ee3\u7406\u5bf9\u5e94\u4e00\u4e2a\u8d26\u6237\uff0c\u8bb0\u5f55\u4e86\u8be5\u8d26\u6237\u4e0b\u7684\u4ea4\u6613\u8bb0\u5f55\u3001\u6bcf\u65e5\u6301\u4ed3\u8bb0\u5f55\u548c\u6bcf\u65e5\u5e02\u503c\u8bb0\u5f55\u7b49\u6570\u636e\uff0c\u5e76\u63d0\u4f9b\u4ea4\u6613\u64ae\u5408\u7684\u5177\u4f53\u5b9e\u73b0\u3002","title":"broker"},{"location":"api/trade/#backtest.trade.broker.Broker","text":"Source code in backtest/trade/broker.py class Broker : def __init__ ( self , account_name : str , principal : float , commission : float , bt_start : Optional [ datetime . date ] = None , bt_end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u4e00\u4e2aBroker\u5bf9\u8c61 Args: account_name : \u8d26\u53f7/\u7b56\u7565\u540d principal : \u521d\u59cb\u672c\u91d1 commission : \u4f63\u91d1\u7387 start : \u5f00\u59cb\u65e5\u671f(\u56de\u6d4b\u65f6\u4f7f\u7528) end : \u7ed3\u675f\u65e5\u671f\uff08\u56de\u6d4b\u65f6\u4f7f\u7528\uff09 \"\"\" if bt_start is not None and bt_end is not None : self . mode = \"bt\" self . bt_start = bt_start self . bt_stop = bt_end # \u56de\u6d4b\u662f\u5426\u7ec8\u6b62\uff1f self . _bt_stopped = False else : self . mode = \"mock\" self . _bt_stopped = False self . bt_start = None self . bt_stop = None # \u6700\u540e\u4ea4\u6613\u65f6\u95f4 self . _last_trade_time : Optional [ datetime . datetime ] = None self . _first_trade_time : Optional [ datetime . datetime ] = None self . account_name = account_name self . commission = commission # \u521d\u59cb\u672c\u91d1 self . principal = principal # \u6bcf\u65e5\u76d8\u540e\u53ef\u7528\u8d44\u91d1 self . _cash = np . array ([], dtype = cash_dtype ) # \u6bcf\u65e5\u603b\u8d44\u4ea7, \u5305\u62ec\u672c\u91d1\u548c\u6301\u4ed3\u8d44\u4ea7 self . _assets = np . array ([], dtype = assets_dtype ) self . _positions = np . array ([], dtype = daily_position_dtype ) # \u6bcf\u65e5\u6301\u4ed3 self . _unclosed_trades = {} # \u672a\u5e73\u4ed3\u7684\u4ea4\u6613 # \u59d4\u6258\u5217\u8868\uff0c\u5305\u62ec\u5e9f\u5355\u548c\u672a\u6210\u4ea4\u59d4\u6258 self . entrusts = {} # \u6240\u6709\u7684\u6210\u4ea4\u5217\u8868\uff0c\u5305\u62ec\u4e70\u5165\u548c\u5356\u51fa\uff0c\u5df2\u5173\u95ed\u548c\u672a\u5173\u95ed\u7684 self . trades = {} # trasaction = buy + sell trade self . transactions : List [ Transaction ] = [] self . _lock = asyncio . Lock () def __getstate__ ( self ): # self._lock is not pickable state = self . __dict__ . copy () del state [ \"_lock\" ] return state def __setstate__ ( self , state ): self . __dict__ . update ( state ) self . _lock = asyncio . Lock () @property def lock ( self ): return self . _lock @property def cash ( self ): if self . _cash . size == 0 : return self . principal return self . _cash [ - 1 ][ \"cash\" ] . item () @property def account_start_date ( self ) -> Optional [ datetime . date ]: if self . mode == \"bt\" : return self . bt_start else : return ( None if self . _first_trade_time is None else self . _first_trade_time . date () ) @property def account_end_date ( self ) -> Optional [ datetime . date ]: if self . mode == \"bt\" : return self . bt_stop else : return ( None if self . _last_trade_time is None else self . _last_trade_time . date () ) @property def last_trade_date ( self ): return None if self . _last_trade_time is None else self . _last_trade_time . date () @property def first_trade_date ( self ): return None if self . _first_trade_time is None else self . _first_trade_time . date () def get_cash ( self , dt : datetime . date ) -> float : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u7684\u53ef\u7528\u8d44\u91d1 \u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Args: dt (datetime.date): \u65e5\u671f Returns: float: \u67d0\u65e5\u53ef\u7528\u8d44\u91d1 \"\"\" if self . _cash . size == 0 : return self . principal if dt > self . _cash [ - 1 ][ \"date\" ]: return self . _cash [ - 1 ][ \"cash\" ] . item () elif dt < self . _cash [ 0 ][ \"date\" ]: return self . principal result = self . _cash [ self . _cash [ \"date\" ] == dt ][ \"cash\" ] if result . size == 0 : raise BadParamsError ( f \"date { dt } not found\" ) else : return result . item () def get_unclosed_trades ( self , dt : datetime . date ) -> set : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u672a\u5e73\u4ed3\u7684\u4ea4\u6613 \u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 \"\"\" if len ( self . _unclosed_trades ) == 0 : return set () result = self . _unclosed_trades . get ( dt ) if result is None : start = sorted ( self . _unclosed_trades . keys ())[ 0 ] if dt < start : return set () else : self . _fillup_unclosed_trades ( dt ) return self . _unclosed_trades . get ( dt ) def get_position ( self , dt : datetime . date , dtype = position_dtype ) -> np . ndarray : \"\"\"\u83b7\u53d6`dt`\u65e5\u6301\u4ed3 \u5982\u679c\u4f20\u5165\u7684`dt`\u5927\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u6700\u540e\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u6700\u540e\u4e00\u5929\u7684\u6301\u4ed3\u6570\u636e,\u5e76\u4e14\u6240\u6709\u6301\u4ed3\u5747\u4e3a\u53ef\u552e\u72b6\u6001 \u5982\u679c\u4f20\u5165\u7684`dt`\u5c0f\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u7b2c\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u7a7a\u3002 Args: dt : \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u6301\u4ed3 dtype : \u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4e3a[position_dtype][backtest.trade.datatypes.position_dtype]\u6216[daily_position_dtype][backtest.trade.datatypes.daily_position_dtype]\uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa Returns: \u8fd4\u56de\u7ed3\u679c\u4e3adtype\u4e3a`dtype`\u7684\u4e00\u7ef4numpy structured array\uff0c\u5176\u4e2dprice\u4e3a\u8be5\u6279\u6301\u4ed3\u7684\u5747\u4ef7\u3002 \"\"\" if self . _positions . size == 0 : return np . array ([], dtype = dtype ) if dt < self . _positions [ 0 ][ \"date\" ]: return np . array ([], dtype = dtype ) last_date = self . _positions [ - 1 ][ \"date\" ] if dt > last_date : result = self . _positions [ self . _positions [ \"date\" ] == last_date ] result [ \"sellable\" ] = result [ \"shares\" ] return result [ list ( dtype . names )] . astype ( dtype ) result = self . _positions [ self . _positions [ \"date\" ] == dt ] if result . size == 0 : raise BadParamsError ( f \"param dt { dt } not found\" ) return result [ list ( dtype . names )] . astype ( dtype ) async def recalc_assets ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None ): \"\"\"\u91cd\u65b0\u8ba1\u7b97\u8d26\u6237\u7684\u6bcf\u65e5\u8d44\u4ea7 \u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u8d44\u4ea7\u8868\u5c06\u5305\u62ec\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\uff0c\u5230`end`\u65e5\u7684\u8d44\u4ea7\u6570\u636e\u3002\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\u8d77\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u9996\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76ca\u3002 Args: end: \u8ba1\u7b97\u5230\u54ea\u4e00\u5929\u7684\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u8ba1\u7b97\u5230\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\uff08\u975e\u56de\u6d4b\uff09\uff0c\u6216\u8005\u56de\u6d4b\u7ed3\u675f\u65e5\u3002 \"\"\" if end is None : if self . mode != \"bt\" : # \u975e\u56de\u6d4b\u4e0b\u8ba1\u7b97\u5230\u5f53\u4e0b end = arrow . now () . date () else : # \u56de\u6d4b\u65f6\u8ba1\u7b97\u5230bt_stop end = self . bt_stop # \u628a\u671f\u521d\u8d44\u4ea7\u52a0\u8fdb\u6765 if self . _assets . size == 0 : start = self . account_start_date if start is None : return np . array ([], dtype = rich_assets_dtype ) _before_start = tf . day_shift ( start , - 1 ) self . _assets = np . array ( [( _before_start , self . principal )], dtype = assets_dtype ) start = start or tf . day_shift ( self . _assets [ - 1 ][ \"date\" ], 1 ) if start >= end : return # \u5f85\u8865\u9f50\u7684\u8d44\u4ea7\u65e5 frames = [ tf . int2date ( d ) for d in tf . get_frames ( start , end , FrameType . DAY )] # \u4ece\u6700\u540e\u4e00\u4e2a\u8d44\u4ea7\u65e5\u5230`end`\uff0c\u6301\u4ed3\u5e94\u90fd\u662f\u4e00\u6837\u7684 position = self . get_position ( end , position_dtype ) if position . size == 0 : assets = self . _assets [ - 1 ][ \"assets\" ] self . _assets = np . concatenate ( ( self . _assets , np . array ([( frame , assets ) for frame in frames ], dtype = assets_dtype ), ) ) return secs = position [ position [ \"shares\" ] != 0 ][ \"security\" ] shares = { sec : position [ position [ \"security\" ] == sec ][ \"shares\" ][ 0 ] for sec in secs } if len ( secs ): feed = get_app_context () . feed closes = await feed . batch_get_close_price_in_range ( secs , frames ) for frame in frames : cash = self . get_cash ( frame ) mv = 0 for sec in secs : if closes . get ( sec ) is None : price = position [ position [ \"security\" ] == sec ][ \"price\" ] . item () mv += shares . get ( sec , 0 ) * price else : iclose = self . _index_of ( closes [ sec ], frame , \"frame\" ) mv += closes [ sec ][ iclose ][ \"close\" ] * shares . get ( sec , 0 ) i = self . _index_of ( self . _assets , frame ) if i is None : self . _assets = np . append ( self . _assets , np . array ([( frame , float ( cash + mv ))], dtype = assets_dtype ), axis = 0 , ) else : self . _assets [ i ][ \"assets\" ] = float ( cash + mv ) async def info ( self , dt : datetime . date = None ) -> Dict : \"\"\"`dt`\u65e5\u7684\u8d26\u53f7\u76f8\u5173\u4fe1\u606f Returns: Dict: \u8d26\u53f7\u76f8\u5173\u4fe1\u606f\uff1a - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, `dt`\u65e5\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548 - bt_stopped: \u56de\u6d4b\u662f\u5426\u7ed3\u675f\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548\u3002 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, `dt`\u65e5\u53ef\u7528\u8d44\u91d1 - market_value: `dt`\u65e5\u80a1\u7968\u5e02\u503c - pnl: `dt`\u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" dt = dt or self . last_trade_date cash = self . get_cash ( dt ) assets = await self . get_assets ( dt ) return { \"name\" : self . account_name , \"principal\" : self . principal , \"start\" : self . account_start_date , \"end\" : self . bt_stop , \"bt_stopped\" : self . _bt_stopped , \"last_trade\" : self . last_trade_date , \"assets\" : assets , \"available\" : cash , \"market_value\" : assets - cash , \"pnl\" : assets - self . principal , \"ppnl\" : assets / self . principal - 1 , \"positions\" : self . get_position ( dt ), } async def get_returns ( self , start_date : datetime . date = None , end_date : datetime . date = None ) -> np . ndarray : \"\"\"\u6c42\u622a\u6b62`end_date`\u65f6\u7684\u6bcf\u65e5\u56de\u62a5 Args: start_date: \u8ba1\u7b97\u56de\u62a5\u7684\u8d77\u59cb\u65e5\u671f end_date : \u8ba1\u7b97\u56de\u62a5\u7684\u7ed3\u675f\u65e5\u671f Returns: \u4ee5\u767e\u5206\u6bd4\u4e3a\u5355\u4f4d\u7684\u6bcf\u65e5\u56de\u62a5\u7387,\u7d22\u5f15\u4e3a\u5bf9\u5e94\u65e5\u671f \"\"\" start = start_date or self . account_start_date # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u6bcf\u65e5\u56de\u62a5\u65f6\uff0c\u9700\u8981\u53d6\u591a\u4e00\u65e5\uff0c\u5373`start`\u4e4b\u524d\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 _start = tf . day_shift ( start , - 1 ) end = end_date or self . account_end_date assert self . account_start_date <= start <= end assert start <= end <= self . account_end_date if not self . _bt_stopped : await self . recalc_assets () assets = self . _assets [ ( self . _assets [ \"date\" ] >= _start ) & ( self . _assets [ \"date\" ] <= end ) ] if assets . size == 0 : raise TradeError ( f \"date range error: { start } - { end } contains no data\" , with_stack = True ) return assets [ \"assets\" ][ 1 :] / assets [ \"assets\" ][: - 1 ] - 1 @property def assets ( self ) -> float : \"\"\"\u5f53\u524d\u603b\u8d44\u4ea7\u3002 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u603b\u8d44\u4ea7\uff0c\u8bf7\u4f7f\u7528`get_assets`\u65b9\u6cd5\u3002 \"\"\" if self . _assets . size == 0 : return self . principal else : return self . _assets [ - 1 ][ \"assets\" ] async def get_assets ( self , date : datetime . date ) -> float : \"\"\"\u67e5\u8be2\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u5f53\u65e5\u603b\u8d44\u4ea7 = \u5f53\u65e5\u53ef\u7528\u8d44\u91d1 + \u6301\u4ed3\u5e02\u503c Args: date: \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 Returns: \u8fd4\u56de\u67d0\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 \"\"\" if self . _assets . size == 0 : return self . principal if date is None : return self . _assets [ - 1 ][ \"assets\" ] result = self . _assets [ self . _assets [ \"date\" ] == date ] if result . size == 1 : return result [ \"assets\" ] . item () assets , * _ = await self . _calc_assets ( date ) return assets def _index_of ( self , arr : np . ndarray , date : datetime . date , index : str = \"date\" ) -> int : \"\"\"\u67e5\u627e`arr`\u4e2d\u5176`index`\u5b57\u6bb5\u7b49\u4e8e`date`\u7684\u7d22\u5f15 \u6ce8\u610f\u6570\u7ec4\u4e2d`date`\u5b57\u6bb5\u53d6\u503c\u5fc5\u987b\u60df\u4e00\u3002 Args: arr: numpy array, \u9700\u8981\u5b58\u5728`index`\u5b57\u6bb5 date: datetime.date, \u67e5\u627e\u7684\u65e5\u671f Returns: \u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56deNone \"\"\" pos = np . argwhere ( arr [ index ] == date ) . ravel () assert len ( pos ) <= 1 , \"date should be unique\" if len ( pos ) == 0 : return None return pos [ 0 ] async def _calc_assets ( self , date : datetime . date ) -> Tuple [ float ]: \"\"\"\u8ba1\u7b97\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u6b64\u51fd\u6570\u4e0d\u66f4\u65b0\u8d44\u4ea7\u8868\uff0c\u4ee5\u907f\u514d\u8d44\u4ea7\u8868\u4e2d\u7559\u4e0b\u7a7a\u6d1e\u3002\u6bd4\u5982\uff1a \u5f53\u524d\u6700\u540e\u4ea4\u6613\u65e5\u4e3a4\u670810\u65e5\uff0c4\u670817\u65e5\u53d1\u751f\u4e00\u7b14\u59d4\u5356\uff0c\u5bfc\u81f4cash/position\u8bb0\u5f55\u66f4\u65b0\u52304/17\uff0c\u4f46\u8d44\u4ea7\u8868\u4ecd\u7136\u4fdd\u6301\u57284\u670810\u65e5\uff0c\u6b64\u65f6\u5982\u679c\u7f13\u5b58\u8be5\u8bb0\u5f55\uff0c\u5c06\u5bfc\u81f4\u8d44\u4ea7\u8868\u4e2d\u7559\u4e0b\u7a7a\u6d1e\u3002 Args: date: \u8ba1\u7b97\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 Returns: \u8fd4\u56de\u603b\u8d44\u4ea7, \u53ef\u7528\u8d44\u91d1, \u6301\u4ed3\u5e02\u503c \"\"\" if date < self . account_start_date : return self . principal , 0 , 0 if ( self . mode == \"bt\" and date > self . bt_stop ) or date > arrow . now () . date (): raise BadParamsError ( f \"wrong date: { date } , date must be before { self . bt_stop } or { arrow . now () . date () } \" ) cash = self . get_cash ( date ) positions = self . get_position ( date ) # this also exclude empty entry (which security is None) heldings = positions [ positions [ \"shares\" ] > 0 ][ \"security\" ] market_value = 0 if heldings . size > 0 : feed = get_app_context () . feed for sec in heldings : shares = positions [ positions [ \"security\" ] == sec ][ \"shares\" ] . item () price = await feed . get_close_price ( sec , date ) if price is not None : market_value += shares * price else : price = positions [ positions [ \"security\" ] == sec ][ \"price\" ] . item () market_value += shares * price assets = cash + market_value return assets , cash , market_value @property def position ( self ) -> np . ndarray : \"\"\"\u83b7\u53d6\u5f53\u524d\u6301\u4ed3 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u6301\u4ed3\uff0c\u8bf7\u4f7f\u7528`get_position`\u65b9\u6cd5\u3002 \u5982\u679c\u5f53\u5929\u4e2a\u80a1\u66fe\u6709\u6301\u4ed3\uff0c\u4f46\u88ab\u6e05\u4ed3\uff0c\u6301\u4ed3\u8868\u4ecd\u4fdd\u7559entry\uff0c\u4f46shares\u5c06\u7f6e\u4e3a\u7a7a\u3002\u5982\u679c\u5f53\u5929\u6ca1\u6709\u4efb\u4f55\u6301\u4ed3\uff08\u4e0d\u5305\u62ec\u5f53\u5929\u6e05\u7a7a\u7684\u60c5\u51b5\uff09\uff0c\u5219\u4f1a\u7559\u4e00\u4e2a`security`\u5b57\u6bb5\u4e3aNone\u7684\u7a7aentry\u3002 Returns: \u8fd4\u56dedtype\u4e3a[position_dtype][backtest.trade.datatypes.position_dtype]\u7684numpy structure array \"\"\" if self . _positions . size == 0 : return np . array ([], dtype = position_dtype ) last_day = self . _positions [ - 1 ][ \"date\" ] result = self . _positions [ self . _positions [ \"date\" ] == last_day ] return result [ list ( position_dtype . names )] . astype ( position_dtype ) def __str__ ( self ): s = ( f \"\u8d26\u6237\uff1a { self . account_name } : \\n \" + f \" \u603b\u8d44\u4ea7\uff1a { self . assets : ,.2f } \\n \" + f \" \u672c\u91d1\uff1a { self . principal : ,.2f } \\n \" + f \" \u53ef\u7528\u8d44\u91d1\uff1a { self . cash : ,.2f } \\n \" + f \" \u6301\u4ed3\uff1a { self . position } \\n \" ) return s def __repr__ ( self ) -> str : return f \"< { self . __class__ . __name__ } > { self } \" async def _calendar_validation ( self , bid_time : datetime . datetime ): \"\"\"\u66f4\u65b0\u548c\u6821\u51c6\u4ea4\u6613\u65e5\u671f \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5728\u8fdb\u5165_bt_stopped\u72b6\u6001\u65f6,\u8fd8\u8981\u5b8c\u6574\u8ba1\u7b97\u4e00\u6b21assets,\u6b64\u540e\u4e0d\u518d\u91cd\u590d\u8ba1\u7b97\u3002 Args: bid_time : \u4ea4\u6613\u53d1\u751f\u7684\u65f6\u95f4 \"\"\" if self . mode == \"bt\" and self . _bt_stopped : logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u8d85\u8fc7\u56de\u6d4b\u7ed3\u675f\u65f6\u95f4: %s , %s \" , bid_time , self . bt_stop , date = bid_time ) raise AccountStoppedError ( bid_time , self . bt_stop , with_stack = True ) if self . _first_trade_time is None : self . _first_trade_time = bid_time elif bid_time < self . _first_trade_time : logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u5fc5\u987b\u9012\u589e\u51fa\u73b0: %s -> %s \" , self . _first_trade_time , bid_time , date = bid_time ) raise TimeRewindError ( bid_time , self . _first_trade_time , with_stack = True ) if self . _last_trade_time is None or bid_time >= self . _last_trade_time : self . _last_trade_time = bid_time else : logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u5fc5\u987b\u9012\u589e\u51fa\u73b0\uff1a %s -> %s \" , self . _last_trade_time , bid_time , date = bid_time ) raise TimeRewindError ( bid_time , self . _last_trade_time , with_stack = True ) if self . mode == \"bt\" and bid_time . date () > self . bt_stop : self . _bt_stopped = True await self . recalc_assets () logger . warning ( \"\u59d4\u6258\u65f6\u95f4\u8d85\u8fc7\u56de\u6d4b\u7ed3\u675f\u65f6\u95f4: %s , %s \" , bid_time , self . bt_stop , date = bid_time ) raise AccountStoppedError ( bid_time , self . bt_stop , with_stack = True ) async def buy ( self , security : str , bid_price : Union [ int , float ], bid_shares : int , bid_time : datetime . datetime , ) -> Trade : \"\"\"\u4e70\u5165\u59d4\u6258 \u4e70\u5165\u4ee5\u5c3d\u53ef\u80fd\u5b9e\u73b0\u59d4\u6258\u4e3a\u76ee\u6807\u3002\u5982\u679c\u53ef\u7528\u8d44\u91d1\u4e0d\u8db3\uff0c\u4f46\u80fd\u4e70\u5165\u90e8\u5206\u80a1\u7968\uff0c\u5219\u90e8\u5206\u4e70\u5165\u3002 \u5982\u679cbid_price\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6da8\u505c\u4ef7\u4e70\u5165\u3002 Args: security str: \u8bc1\u5238\u4ee3\u7801 bid_price float: \u59d4\u6258\u4ef7\u683c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares int: \u8be2\u4e70\u7684\u80a1\u6570 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: [Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _buy ( security , bid_price , bid_shares , bid_time ) async def _buy ( self , security : str , bid_price : float , bid_shares : Union [ float , int ], bid_time : datetime . datetime , ) -> Trade : entrustlog . info ( f \" { bid_time } \\t { security } \\t { bid_shares } \\t { bid_price } \\t { EntrustSide . BUY } \" ) assert ( type ( bid_time ) is datetime . datetime ), f \" { bid_time } is not type of datetime\" await self . _before_trade ( bid_time ) feed = get_app_context () . feed en = Entrust ( security , EntrustSide . BUY , bid_shares , bid_price , bid_time , BidType . LIMIT if bid_price is not None else BidType . MARKET , ) logger . info ( \"\u4e70\u5165\u59d4\u6258: %s %d %s , \u5355\u53f7\uff1a %s \" , security , bid_shares , bid_price , en . eid , date = bid_time , ) self . entrusts [ en . eid ] = en _ , buy_limit_price , _ = await feed . get_trade_price_limits ( security , bid_time . date () ) bid_price = bid_price or buy_limit_price # \u83b7\u53d6\u7528\u4ee5\u64ae\u5408\u7684\u6570\u636e bars = await feed . get_price_for_match ( security , bid_time ) if bars . size == 0 : logger . warning ( \"failed to match %s , no data at %s \" , security , bid_time , date = bid_time ) raise NoDataForMatch ( security , bid_time , with_stack = True ) # \u79fb\u9664\u6389\u6da8\u505c\u548c\u4ef7\u683c\u9ad8\u4e8e\u59d4\u4e70\u4ef7\u7684bar\u540e\uff0c\u770b\u8fd8\u80fd\u4e70\u591a\u5c11\u80a1 bars = self . _remove_for_buy ( security , bid_time , bars , bid_price , buy_limit_price ) # \u5c06\u4e70\u5165\u6570\u9650\u5236\u5728\u53ef\u7528\u8d44\u91d1\u8303\u56f4\u5185 shares_to_buy = min ( bid_shares , self . cash // ( bid_price * ( 1 + self . commission )) ) # \u5fc5\u987b\u4ee5\u624b\u4e3a\u5355\u4f4d\u4e70\u5165\uff0c\u5426\u5219\u59d4\u6258\u4f1a\u5931\u8d25 shares_to_buy = shares_to_buy // 100 * 100 if shares_to_buy < 100 : logger . info ( \"\u59d4\u4e70\u5931\u8d25\uff1a %s ( %s ), \u8d44\u91d1( %s )\u4e0d\u8db3\" , security , self . cash , en . eid , date = bid_time ) raise CashError ( self . account_name , 100 * shares_to_buy * bid_price , self . cash , with_stack = True , ) mean_price , filled , close_time = self . _match_buy ( bars , shares_to_buy ) if filled == 0 : raise VolumeNotMeet ( security , bid_price , with_stack = True ) return await self . _fill_buy_order ( en , mean_price , filled , close_time ) def _match_buy ( self , bid_queue , shares_to_buy ) -> Tuple [ float , float , datetime . datetime ]: \"\"\"\u8ba1\u7b97\u6b64\u6b21\u4e70\u5165\u7684\u6210\u4ea4\u5747\u4ef7\u548c\u6210\u4ea4\u91cf Args: bid_queue : \u64ae\u5408\u6570\u636e shares_to_buy : \u8981\u4e70\u5165\u7684\u80a1\u6570 Returns: \u6210\u4ea4\u5747\u4ef7\u3001\u53ef\u57cb\u5355\u80a1\u6570\u548c\u6700\u540e\u6210\u4ea4\u65f6\u95f4 \"\"\" c , v = bid_queue [ \"price\" ], bid_queue [ \"volume\" ] cum_v = np . cumsum ( v ) # until i the order can be filled where_total_filled = np . argwhere ( cum_v >= shares_to_buy ) if len ( where_total_filled ) == 0 : i = len ( v ) - 1 else : i = np . min ( where_total_filled ) # \u4e5f\u8bb8\u5230\u5f53\u5929\u7ed3\u675f\uff0c\u90fd\u6ca1\u6709\u8db3\u591f\u7684\u80a1\u7968 filled = min ( cum_v [ i ], shares_to_buy ) // 100 * 100 # \u6700\u540e\u4e00\u5468\u671f\uff0c\u53ea\u9700\u8981\u6210\u4ea4\u5269\u4f59\u7684\u90e8\u5206 vol = v [: i + 1 ] . copy () vol [ - 1 ] = filled - np . sum ( vol [: - 1 ]) money = sum ( c [: i + 1 ] * vol ) mean_price = money / filled return mean_price , filled , bid_queue [ \"frame\" ][ i ] def _fillup_unclosed_trades ( self , dt : datetime . date ): if len ( self . _unclosed_trades ) != 0 and self . _unclosed_trades . get ( dt ) is None : days = sorted ( list ( self . _unclosed_trades . keys ())) frames = tf . get_frames ( days [ - 1 ], dt , FrameType . DAY ) for src , dst in zip ( frames [: - 1 ], frames [ 1 :]): src = tf . int2date ( src ) dst = tf . int2date ( dst ) self . _unclosed_trades [ dst ] = self . _unclosed_trades [ src ] . copy () def _update_unclosed_trades ( self , tid , date : datetime . date ): \"\"\"\u8bb0\u5f55\u6bcf\u65e5\u6301\u6709\u7684\u672a\u5e73\u4ed3\u4ea4\u6613 Args: trades: \u4ea4\u6613\u5217\u8868 \"\"\" unclosed = self . _unclosed_trades . get ( date , []) if len ( unclosed ): unclosed . append ( tid ) return if len ( self . _unclosed_trades ) == 0 : self . _unclosed_trades [ date ] = [ tid ] return # \u8bb0\u5f55\u8fd8\u672a\u521b\u5efa\uff0c\u9700\u8981\u590d\u5236\u524d\u4e00\u65e5\u8bb0\u5f55 self . _fillup_unclosed_trades ( date ) self . _unclosed_trades [ date ] . append ( tid ) async def _fill_buy_order ( self , en : Entrust , price : float , filled : float , close_time : datetime . datetime ) -> Trade : \"\"\"\u751f\u6210trade,\u66f4\u65b0\u4ea4\u6613\u3001\u6301\u4ed3\u548cassets Args: en : _description_ price : _description_ filled : _description_ close_time : _description_ Returns: \u6210\u4ea4\u8bb0\u5f55 \"\"\" money = price * filled fee = math_round ( money * self . commission , 2 ) trade = Trade ( en . eid , en . security , price , filled , fee , en . side , close_time ) self . trades [ trade . tid ] = trade self . _update_unclosed_trades ( trade . tid , close_time . date ()) await self . _update_positions ( trade , close_time . date ()) logger . info ( \"\u4e70\u5165\u6210\u4ea4: %s ( %d %.2f %.2f ),\u59d4\u5355\u53f7: %s , \u6210\u4ea4\u53f7: %s \" , en . security , filled , price , fee , en . eid , trade . tid , date = close_time , ) tradelog . info ( f \" { en . bid_time . date () } \\t { en . side } \\t { en . security } \\t { filled } \\t { price } \\t { fee } \" ) logger . info ( \"\u4e70\u5165\u540e\u6301\u4ed3: \\n %s \" , tabulate_numpy_array ( self . get_position ( close_time . date (), daily_position_dtype ) ), date = close_time , ) # \u5f53\u53d1\u751f\u65b0\u7684\u4e70\u5165\u65f6\uff0c\u66f4\u65b0\u8d44\u4ea7 cash_change = - 1 * ( money + fee ) await self . _update_assets ( cash_change , close_time ) await emit . emit ( E_BACKTEST , { \"buy\" : jsonify ( trade )}) return trade async def _before_trade ( self , bid_time : datetime . datetime ): \"\"\"\u4ea4\u6613\u524d\u7684\u51c6\u5907\u5de5\u4f5c \u5728\u6bcf\u6b21\u4ea4\u6613\u524d\uff0c\u8865\u9f50\u6bcf\u65e5\u73b0\u91d1\u6570\u636e\u548c\u6301\u4ed3\u6570\u636e\u5230`bid_time`\uff0c\u66f4\u65b0\u8d26\u6237\u751f\u547d\u671f\u7b49\u3002 Args: bid_time: \u59d4\u6258\u65f6\u95f4 Returns: \u65e0 \"\"\" logger . info ( \"before trade\" , date = bid_time ) await self . _calendar_validation ( bid_time ) # \u8865\u9f50\u53ef\u7528\u5c06\u8d44\u91d1\u8868 if self . _cash . size == 0 : start = tf . day_shift ( self . account_start_date , - 1 ) end = bid_time . date () frames = tf . get_frames ( start , end , FrameType . DAY ) _cash = [( tf . int2date ( frame ), self . principal ) for frame in frames ] self . _cash = np . array ( _cash , dtype = cash_dtype ) else : prev , cash = self . _cash [ - 1 ] frames = tf . get_frames ( prev , bid_time , FrameType . DAY )[ 1 :] if len ( frames ) > 0 : recs = [( tf . int2date ( date ), cash ) for date in frames ] self . _cash = np . concatenate ( ( self . _cash , np . array ( recs , dtype = cash_dtype )) ) await self . _fillup_positions ( bid_time ) async def _fillup_positions ( self , bid_time : datetime . datetime ): # \u8865\u9f50\u6301\u4ed3\u8868(\u9700\u8981\u5904\u7406\u590d\u6743) feed = get_app_context () . feed if self . _positions . size == 0 : return prev = self . _positions [ - 1 ][ \"date\" ] logger . info ( \"handling positions fillup from %s to %s \" , prev , bid_time , date = bid_time ) frames = [ tf . int2date ( frame ) for frame in tf . get_frames ( prev , bid_time , FrameType . DAY ) ] if len ( frames ) == 1 : return last_day_position = self . _positions [ self . _positions [ \"date\" ] == prev ] if np . all ( last_day_position [ \"security\" ] is None ): # empty entries, no need to be extended return last_held_position = last_day_position [ last_day_position [ \"shares\" ] != 0 ] if last_held_position . size == 0 : empty = np . array ( [( frame , None , 0 , 0 , 0 ) for frame in frames [ 1 :]], dtype = daily_position_dtype , ) self . _positions = np . hstack (( self . _positions , empty )) return # \u5df2\u6e05\u7a7a\u80a1\u7968\u4e0d\u9700\u8981\u5c55\u4ed3, issue 9 secs = last_held_position [ \"security\" ] . tolist () dr_info = await feed . get_dr_factor ( secs , frames ) padding_positions = [] for position in last_held_position : sec = position [ \"security\" ] if sec in dr_info : dr = dr_info [ sec ] else : dr = None paddings = np . array ( [ position . item ()] * len ( frames ), dtype = daily_position_dtype ) paddings [ \"date\" ] = frames if dr is not None : adjust_shares = array_math_round ( paddings [ \"shares\" ][ 1 :] * np . diff ( dr ), 2 ) paddings [ \"shares\" ] = paddings [ \"shares\" ] * dr paddings [ \"price\" ] = paddings [ \"price\" ] / dr # \u6a21\u62df\u4e00\u7b14\u4e70\u5355\uff0c\u4ee5\u4fbf\u6b64\u540e\u5356\u51fa\u65f6\u80fd\u5bf9\u5e94\u5230\u4e70\u5355\u3002\u5426\u5219\uff0c\u5c06\u5356\u4e0d\u51fa\u53bb\u3002 # https://github.com/zillionare/trader-client/issues/10 for i , adjust_share in enumerate ( adjust_shares ): if abs ( adjust_share ) < 1e-5 : continue order_time = tf . combine_time ( frames [ i + 1 ], 15 ) trade = Trade ( uuid . uuid4 (), sec , paddings [ \"price\" ][ i + 1 ] . item (), adjust_share , 0 , EntrustSide . XDXR , order_time , ) self . trades [ trade . tid ] = trade self . _update_unclosed_trades ( trade . tid , bid_time . date ()) paddings [ \"sellable\" ][ 1 :] = paddings [ \"shares\" ][: - 1 ] padding_positions . extend ( paddings [ 1 :]) if len ( padding_positions ): padding_positions . sort ( key = lambda x : x [ 0 ]) self . _positions = np . concatenate (( self . _positions , padding_positions )) async def _update_positions ( self , trade : Trade , bid_date : datetime . date ): \"\"\"\u66f4\u65b0\u6301\u4ed3\u4fe1\u606f \u6301\u4ed3\u4fe1\u606f\u4e3a\u4e00\u7ef4numpy\u6570\u7ec4\uff0c\u5176\u7c7b\u578b\u4e3adaily_position_dtype\u3002\u5982\u679c\u67d0\u652f\u80a1\u7968\u5728\u67d0\u65e5\u88ab\u6e05\u7a7a\uff0c\u5219\u5f53\u65e5\u6301\u4ed3\u8868\u4fdd\u7559\u8bb0\u5f55\uff0c\u7f6eshares\u4e3a\u96f6\uff0c\u65b9\u4fbf\u901a\u8fc7\u6301\u4ed3\u8868\u770b\u51fa\u80a1\u7968\u7684\u8fdb\u573a\u51fa\u573a\u65f6\u95f4\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4e0d\u4fdd\u7559\u8fd9\u6761\u8bb0\u5f55\uff08\u800c\u662f\u5220\u9664\uff09\uff0c\u5219\u5728\u6240\u6709\u80a1\u7968\u90fd\u88ab\u6e05\u7a7a\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5bfc\u81f4\u6301\u4ed3\u8868\u51fa\u73b0\u7a7a\u6d1e\uff0c\u4ece\u800c\u5bfc\u81f4\u4e0b\u4e00\u6b21\u4ea4\u6613\u65f6\uff0c\u8bef\u5c06\u66f4\u65e9\u4e4b\u524d\u7684\u6301\u4ed3\u8bb0\u5f55\u590d\u5236\u5230\u5f53\u65e5\u7684\u6301\u4ed3\u8868\u4e2d\uff08\u5728_before_trade\u4e2d\uff09\uff0c\u800c\u8fd9\u4e9b\u6301\u4ed3\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u6e05\u7a7a\u3002 Args: trade: \u4ea4\u6613\u4fe1\u606f bid_date: \u4e70\u5165/\u5356\u51fa\u65e5\u671f \"\"\" if type ( bid_date ) == datetime . datetime : bid_date = bid_date . date () if self . _positions . size == 0 : self . _positions = np . array ( [( bid_date , trade . security , trade . shares , 0 , trade . price )], dtype = daily_position_dtype , ) return # find if the security is already in the position (same day) pos = np . argwhere ( ( self . _positions [ \"security\" ] == trade . security ) & ( self . _positions [ \"date\" ] == bid_date ) ) if pos . size == 0 : self . _positions = np . append ( self . _positions , np . array ( [( bid_date , trade . security , trade . shares , 0 , trade . price )], dtype = daily_position_dtype , ), ) else : i = pos [ 0 ] . item () * _ , old_shares , old_sellable , old_price = self . _positions [ i ] new_shares , new_price = trade . shares , trade . price if trade . side == EntrustSide . BUY : self . _positions [ i ] = ( bid_date , trade . security , old_shares + trade . shares , old_sellable , ( old_price * old_shares + new_shares * new_price ) / ( old_shares + new_shares ), ) else : shares = old_shares - trade . shares sellable = old_sellable - trade . shares if shares <= 0.1 : old_price = 0 shares = 0 sellable = 0 self . _positions [ i ] = ( bid_date , trade . security , shares , sellable , old_price , # \u5356\u51fa\u65f6\u6210\u672c\u4e0d\u53d8\uff0c\u9664\u975e\u5df2\u6e05\u7a7a ) return async def _update_assets ( self , cash_change : float , bid_time : datetime . datetime ): \"\"\"\u66f4\u65b0\u5f53\u524d\u8d44\u4ea7\uff08\u542b\u6301\u4ed3\uff09 \u5728\u6bcf\u6b21\u8d44\u4ea7\u53d8\u52a8\u65f6\u8fdb\u884c\u8ba1\u7b97\u548c\u66f4\u65b0\uff0c\u5e76\u5bf9\u4e4b\u524d\u7684\u8d44\u4ea7\u8868\u8fdb\u884c\u8865\u5168\u3002 Args: cash_change : \u53d8\u52a8\u7684\u73b0\u91d1 bid_time: \u59d4\u6258\u65f6\u95f4 \"\"\" logger . info ( \"cash change: %s \" , cash_change , date = bid_time ) # \u8865\u9f50\u8d44\u4ea7\u8868\u5230\u4e0a\u4e00\u4e2a\u4ea4\u6613\u65e5 if self . _assets . size == 0 : _before_start = tf . day_shift ( self . account_start_date , - 1 ) self . _assets = np . array ( [( _before_start , self . principal )], dtype = assets_dtype ) start = tf . day_shift ( self . _assets [ - 1 ][ \"date\" ], 1 ) end = tf . day_shift ( bid_time , - 1 ) if start < end : await self . recalc_assets ( start , end ) bid_date = bid_time . date () # _before_trade\u5e94\u8be5\u5df2\u7ecf\u4e3a\u5f53\u65e5\u4ea4\u6613\u51c6\u5907\u597d\u4e86\u53ef\u7528\u8d44\u91d1\u6570\u636e assert self . _cash [ - 1 ][ \"date\" ] == bid_date self . _cash [ - 1 ][ \"cash\" ] += cash_change assets , cash , mv = await self . _calc_assets ( bid_date ) i = self . _index_of ( self . _assets , bid_date ) if i is None : self . _assets = np . append ( self . _assets , np . array ([( bid_date , assets )], dtype = assets_dtype ) ) else : # don't use self._assets[self._assets[\"date\"] == date], this always return copy self . _assets [ i ][ \"assets\" ] = assets info = np . array ( [( bid_date , assets , cash , mv , cash_change )], dtype = [ ( \"date\" , \"O\" ), ( \"assets\" , float ), ( \"cash\" , float ), ( \"market value\" , float ), ( \"change\" , float ), ], ) logger . info ( \" \\n %s \" , tabulate_numpy_array ( info ), date = bid_date ) async def _fill_sell_order ( self , en : Entrust , price : float , to_sell : float ) -> List [ Trade ]: \"\"\"\u4ecepositions\u4e2d\u6263\u51cf\u80a1\u7968\u3001\u589e\u52a0\u53ef\u7528\u73b0\u91d1 Args: en : \u59d4\u5356\u5355 price : \u6210\u4ea4\u5747\u4ef7 filled : \u56de\u62a5\u7684\u5356\u51fa\u6570\u91cf Returns: \u6210\u4ea4\u8bb0\u5f55\u5217\u8868 \"\"\" dt = en . bid_time . date () money = price * to_sell fee = math_round ( money * self . commission , 2 ) security = en . security unclosed_trades = self . get_unclosed_trades ( dt ) closed_trades = [] exit_trades = [] refund = 0 while to_sell > 0 : for tid in unclosed_trades : trade : Trade = self . trades [ tid ] if trade . security != security : continue if trade . time . date () >= dt : # not T + 1 continue to_sell , fee , exit_trade , tx = trade . sell ( to_sell , price , fee , en . bid_time ) logger . info ( \"\u5356\u51fa\u6210\u4ea4: %s ( %d %.2f %.2f ),\u59d4\u5355\u53f7: %s , \u6210\u4ea4\u53f7: %s \" , en . security , exit_trade . shares , exit_trade . price , exit_trade . fee , en . eid , exit_trade . tid , date = exit_trade . time , ) tradelog . info ( f \" { en . bid_time . date () } \\t { exit_trade . side } \\t { exit_trade . security } \\t { exit_trade . shares } \\t { exit_trade . price } \\t { exit_trade . fee } \" ) await self . _update_positions ( exit_trade , exit_trade . time ) exit_trades . append ( exit_trade ) self . trades [ exit_trade . tid ] = exit_trade self . transactions . append ( tx ) refund += exit_trade . shares * exit_trade . price - exit_trade . fee if trade . closed : closed_trades . append ( tid ) if to_sell == 0 : break else : # no more unclosed trades, even if to_sell > 0 break unclosed_trades = [ tid for tid in unclosed_trades if tid not in closed_trades ] self . _unclosed_trades [ dt ] = unclosed_trades logger . info ( \"\u5356\u51fa\u540e\u6301\u4ed3: \\n %s \" , tabulate_numpy_array ( self . get_position ( dt , daily_position_dtype )), date = dt , ) await self . _update_assets ( refund , en . bid_time ) await emit . emit ( E_BACKTEST , { \"sell\" : jsonify ( exit_trades )}) return exit_trades async def sell ( self , security : str , bid_price : Union [ None , float ], bid_shares : float , bid_time : datetime . datetime , ) -> List [ Trade ]: \"\"\"\u5356\u51fa\u59d4\u6258 Args: security str: \u59d4\u6258\u8bc1\u5238\u4ee3\u7801 bid_price float: \u51fa\u552e\u4ef7\u683c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares float: \u8be2\u5356\u80a1\u6570\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u9650\u5236\u5fc5\u987b\u4ee5100\u7684\u500d\u6570\u5356\u51fa\u3002 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: \u6210\u4ea4\u8bb0\u5f55\u5217\u8868,\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a[Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _sell ( security , bid_price , bid_shares , bid_time ) async def _sell ( self , security : str , bid_price : Union [ None , float ], bid_shares : float , bid_time : datetime . datetime , ) -> List [ Trade ]: await self . _before_trade ( bid_time ) feed = get_app_context () . feed entrustlog . info ( f \" { bid_time } \\t { security } \\t { bid_shares } \\t { bid_price } \\t { EntrustSide . SELL } \" ) logger . info ( \"\u5356\u51fa\u59d4\u6258: %s %s %s \" , security , bid_price , bid_shares , date = bid_time ) _ , _ , sell_limit_price = await feed . get_trade_price_limits ( security , bid_time . date () ) if bid_price is None : bid_type = BidType . MARKET bid_price = sell_limit_price else : bid_type = BidType . LIMIT # fill the order, get mean price bars = await feed . get_price_for_match ( security , bid_time ) if bars . size == 0 : logger . warning ( \"failed to match: %s , no data at %s \" , security , bid_time , date = bid_time ) raise NoDataForMatch ( security , bid_time , with_stacks = True ) bars = self . _remove_for_sell ( security , bid_time , bars , bid_price , sell_limit_price ) c , v = bars [ \"price\" ], bars [ \"volume\" ] cum_v = np . cumsum ( v ) shares_to_sell = self . _get_sellable_shares ( security , bid_shares , bid_time ) if shares_to_sell == 0 : logger . info ( \"\u5356\u51fa\u5931\u8d25: %s %s , \u53ef\u7528\u80a1\u6570\u4e3a0\" , security , bid_shares , date = bid_time ) logger . info ( \" %s \" , self . get_unclosed_trades ( bid_time . date ()), date = bid_time ) raise PositionError ( security , bid_time , with_stack = True ) # until i the order can be filled where_total_filled = np . argwhere ( cum_v >= shares_to_sell ) if len ( where_total_filled ) == 0 : i = len ( v ) - 1 else : i = np . min ( where_total_filled ) close_time = bars [ i ][ \"frame\" ] # \u4e5f\u8bb8\u5230\u5f53\u5929\u7ed3\u675f\uff0c\u90fd\u6ca1\u6709\u8db3\u591f\u7684\u80a1\u7968 filled = min ( cum_v [ i ], shares_to_sell ) # \u6700\u540e\u4e00\u5468\u671f\uff0c\u53ea\u9700\u8981\u6210\u4ea4\u5269\u4f59\u7684\u90e8\u5206 vol = v [: i + 1 ] . copy () vol [ - 1 ] = filled - np . sum ( vol [: - 1 ]) money = sum ( c [: i + 1 ] * vol ) mean_price = money / filled en = Entrust ( security , EntrustSide . SELL , bid_shares , bid_price , bid_time , bid_type ) logger . info ( \"\u59d4\u5356 %s ( %s ), \u6210\u4ea4 %s \u80a1\uff0c\u5747\u4ef7 %.2f \" , en . security , en . eid , filled , mean_price , date = close_time , ) return await self . _fill_sell_order ( en , mean_price , filled ) def _get_sellable_shares ( self , security : str , shares_asked : int , bid_time : datetime . datetime ) -> int : \"\"\"\u83b7\u53d6\u53ef\u5356\u80a1\u6570 \u5982\u679cshares_asked\u4e0e\u53ef\u552e\u4e4b\u95f4\u7684\u5dee\u4e0d\u8db31\u80a1\uff0c\u5219\u81ea\u52a8\u52a0\u4e0a\u96f6\u5934\uff0c\u786e\u4fdd\u53ef\u4ee5\u5356\u5b8c\u3002 Args: security: \u8bc1\u5238\u4ee3\u7801 Returns: \u53ef\u5356\u80a1\u6570 \"\"\" shares = 0 for tid in self . get_unclosed_trades ( bid_time . date ()): t = self . trades [ tid ] if t . security == security and t . time . date () < bid_time . date (): assert t . closed is False shares += t . _unsell if shares - shares_asked < 100 : return shares return min ( shares_asked , shares ) def _remove_for_buy ( self , security : str , order_time : datetime . datetime , bars : np . ndarray , price : float , limit_price : float , ) -> np . ndarray : \"\"\" \u53bb\u6389\u5df2\u8fbe\u5230\u6da8\u505c\u65f6\u7684\u5206\u949f\u7ebf\uff0c\u6216\u8005\u4ef7\u683c\u9ad8\u4e8e\u4e70\u5165\u4ef7\u7684bars \"\"\" reach_limit = array_price_equal ( bars [ \"price\" ], limit_price ) bars = bars [( ~ reach_limit )] if bars . size == 0 : raise BuylimitError ( security , order_time , with_stack = True ) bars = bars [( bars [ \"price\" ] <= price )] if bars . size == 0 : raise PriceNotMeet ( security , price , order_time , with_stack = True ) return bars def _remove_for_sell ( self , security : str , order_time : datetime . datetime , bars : np . ndarray , price : float , limit_price : float , ) -> np . ndarray : \"\"\"\u53bb\u6389\u5f53\u524d\u4ef7\u683c\u4f4e\u4e8eprice\uff0c\u6216\u8005\u5df2\u7ecf\u8fbe\u5230\u8dcc\u505c\u65f6\u7684bars,\u8fd9\u4e9bbars\u4e0a\u65e0\u6cd5\u6210\u4ea4\"\"\" reach_limit = array_price_equal ( bars [ \"price\" ], limit_price ) bars = bars [( ~ reach_limit )] if bars . size == 0 : raise SellLimitError ( security , order_time , with_stack = True ) bars = bars [( bars [ \"price\" ] >= price )] if bars . size == 0 : raise PriceNotMeet ( security , price , order_time , with_stack = True ) return bars def freeze ( self ): \"\"\"\u51bb\u7ed3\u8d26\u6237\uff0c\u505c\u6b62\u63a5\u6536\u65b0\u7684\u59d4\u6258\"\"\" self . _bt_stopped = True async def metrics ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , baseline : Optional [ str ] = \"399300.XSHE\" , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5\u7684\u8d26\u6237\u6307\u6807 Args: start: \u5f00\u59cb\u65f6\u95f4 end: \u7ed3\u675f\u65f6\u95f4 baseline: \u53c2\u8003\u6807\u7684 Returns: Dict: \u6307\u6807\u5b57\u5178\uff0c\u5176key\u4e3a - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" try : rf = cfg . metrics . risk_free_rate / cfg . metrics . annual_days except Exception : rf = 0 start = min ( start or self . account_start_date , self . account_start_date ) end = max ( end or self . account_end_date , self . account_end_date ) tx = [] logger . info ( \" %s tx in total\" , len ( self . transactions )) for t in self . transactions : if t . entry_time . date () >= start and t . exit_time . date () <= end : tx . append ( t ) else : logger . info ( \"tx %s not in range, start: %s , end: %s \" , t . sec , t . entry_time , t . exit_time , ) # \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 window = tf . count_day_frames ( start , end ) total_tx = len ( tx ) if total_tx == 0 : return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : None , \"total_profit_rate\" : None , \"win_rate\" : None , \"mean_return\" : None , \"sharpe\" : None , \"sortino\" : None , \"calmar\" : None , \"max_drawdown\" : None , \"annual_return\" : None , \"volatility\" : None , \"baseline\" : None , } # win_rate wr = len ([ t for t in tx if t . profit > 0 ]) / total_tx if not self . _bt_stopped : await self . recalc_assets () # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u76c8\u4e8f\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u591a\u53d6\u4e00\u4e2a\u4ea4\u6613\u65e5\uff0c\u5373start\u4e4b\u524d\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u8d44\u4ea7\u6570\u636e _start = tf . day_shift ( start , - 1 ) total_profit = await self . get_assets ( end ) - await self . get_assets ( _start ) returns = await self . get_returns ( start , end ) mean_return = np . mean ( returns ) sharpe = sharpe_ratio ( returns , rf ) sortino = sortino_ratio ( returns , rf ) calma = calmar_ratio ( returns ) mdd = max_drawdown ( returns ) # \u5e74\u5316\u6536\u76ca\u7387 ar = annual_return ( returns ) # \u5e74\u5316\u6ce2\u52a8\u7387 vr = annual_volatility ( returns ) # \u8ba1\u7b97\u53c2\u8003\u6807\u7684\u7684\u76f8\u5173\u6307\u6807 if baseline is not None : ref_bars = await Stock . get_bars_in_range ( baseline , FrameType . DAY , start , end ) if ref_bars . size < 2 : ref_results = None else : returns = ref_bars [ \"close\" ][ 1 :] / ref_bars [ \"close\" ][: - 1 ] - 1 ref_results = { \"total_profit_rate\" : cum_returns_final ( returns ), \"win_rate\" : np . count_nonzero ( returns > 0 ) / len ( returns ), \"mean_return\" : np . mean ( returns ) . item (), \"sharpe\" : sharpe_ratio ( returns , rf ), \"sortino\" : sortino_ratio ( returns , rf ), \"calmar\" : calmar_ratio ( returns ), \"max_drawdown\" : max_drawdown ( returns ), \"annual_return\" : annual_return ( returns ), \"volatility\" : annual_volatility ( returns ), } else : ref_results = None return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : total_profit , \"total_profit_rate\" : total_profit / self . principal , \"win_rate\" : wr , \"mean_return\" : mean_return , \"sharpe\" : sharpe , \"sortino\" : sortino , \"calmar\" : calma , \"max_drawdown\" : mdd , \"annual_return\" : ar , \"volatility\" : vr , \"baseline\" : ref_results , }","title":"Broker"},{"location":"api/trade/#backtest.trade.broker.Broker.assets","text":"\u5f53\u524d\u603b\u8d44\u4ea7\u3002 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u603b\u8d44\u4ea7\uff0c\u8bf7\u4f7f\u7528 get_assets \u65b9\u6cd5\u3002","title":"assets"},{"location":"api/trade/#backtest.trade.broker.Broker.position","text":"\u83b7\u53d6\u5f53\u524d\u6301\u4ed3 \u5982\u679c\u8981\u83b7\u53d6\u5386\u53f2\u4e0a\u67d0\u5929\u7684\u6301\u4ed3\uff0c\u8bf7\u4f7f\u7528 get_position \u65b9\u6cd5\u3002 \u5982\u679c\u5f53\u5929\u4e2a\u80a1\u66fe\u6709\u6301\u4ed3\uff0c\u4f46\u88ab\u6e05\u4ed3\uff0c\u6301\u4ed3\u8868\u4ecd\u4fdd\u7559entry\uff0c\u4f46shares\u5c06\u7f6e\u4e3a\u7a7a\u3002\u5982\u679c\u5f53\u5929\u6ca1\u6709\u4efb\u4f55\u6301\u4ed3\uff08\u4e0d\u5305\u62ec\u5f53\u5929\u6e05\u7a7a\u7684\u60c5\u51b5\uff09\uff0c\u5219\u4f1a\u7559\u4e00\u4e2a security \u5b57\u6bb5\u4e3aNone\u7684\u7a7aentry\u3002 Returns: Type Description ndarray \u8fd4\u56dedtype\u4e3a position_dtype \u7684numpy structure array","title":"position"},{"location":"api/trade/#backtest.trade.broker.Broker.__init__","text":"\u521b\u5efa\u4e00\u4e2aBroker\u5bf9\u8c61 Parameters: Name Type Description Default account_name \u8d26\u53f7/\u7b56\u7565\u540d required principal \u521d\u59cb\u672c\u91d1 required commission \u4f63\u91d1\u7387 required start \u5f00\u59cb\u65e5\u671f(\u56de\u6d4b\u65f6\u4f7f\u7528) required end \u7ed3\u675f\u65e5\u671f\uff08\u56de\u6d4b\u65f6\u4f7f\u7528\uff09 required Source code in backtest/trade/broker.py def __init__ ( self , account_name : str , principal : float , commission : float , bt_start : Optional [ datetime . date ] = None , bt_end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u4e00\u4e2aBroker\u5bf9\u8c61 Args: account_name : \u8d26\u53f7/\u7b56\u7565\u540d principal : \u521d\u59cb\u672c\u91d1 commission : \u4f63\u91d1\u7387 start : \u5f00\u59cb\u65e5\u671f(\u56de\u6d4b\u65f6\u4f7f\u7528) end : \u7ed3\u675f\u65e5\u671f\uff08\u56de\u6d4b\u65f6\u4f7f\u7528\uff09 \"\"\" if bt_start is not None and bt_end is not None : self . mode = \"bt\" self . bt_start = bt_start self . bt_stop = bt_end # \u56de\u6d4b\u662f\u5426\u7ec8\u6b62\uff1f self . _bt_stopped = False else : self . mode = \"mock\" self . _bt_stopped = False self . bt_start = None self . bt_stop = None # \u6700\u540e\u4ea4\u6613\u65f6\u95f4 self . _last_trade_time : Optional [ datetime . datetime ] = None self . _first_trade_time : Optional [ datetime . datetime ] = None self . account_name = account_name self . commission = commission # \u521d\u59cb\u672c\u91d1 self . principal = principal # \u6bcf\u65e5\u76d8\u540e\u53ef\u7528\u8d44\u91d1 self . _cash = np . array ([], dtype = cash_dtype ) # \u6bcf\u65e5\u603b\u8d44\u4ea7, \u5305\u62ec\u672c\u91d1\u548c\u6301\u4ed3\u8d44\u4ea7 self . _assets = np . array ([], dtype = assets_dtype ) self . _positions = np . array ([], dtype = daily_position_dtype ) # \u6bcf\u65e5\u6301\u4ed3 self . _unclosed_trades = {} # \u672a\u5e73\u4ed3\u7684\u4ea4\u6613 # \u59d4\u6258\u5217\u8868\uff0c\u5305\u62ec\u5e9f\u5355\u548c\u672a\u6210\u4ea4\u59d4\u6258 self . entrusts = {} # \u6240\u6709\u7684\u6210\u4ea4\u5217\u8868\uff0c\u5305\u62ec\u4e70\u5165\u548c\u5356\u51fa\uff0c\u5df2\u5173\u95ed\u548c\u672a\u5173\u95ed\u7684 self . trades = {} # trasaction = buy + sell trade self . transactions : List [ Transaction ] = [] self . _lock = asyncio . Lock ()","title":"__init__()"},{"location":"api/trade/#backtest.trade.broker.Broker.buy","text":"\u4e70\u5165\u59d4\u6258 \u4e70\u5165\u4ee5\u5c3d\u53ef\u80fd\u5b9e\u73b0\u59d4\u6258\u4e3a\u76ee\u6807\u3002\u5982\u679c\u53ef\u7528\u8d44\u91d1\u4e0d\u8db3\uff0c\u4f46\u80fd\u4e70\u5165\u90e8\u5206\u80a1\u7968\uff0c\u5219\u90e8\u5206\u4e70\u5165\u3002 \u5982\u679cbid_price\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6da8\u505c\u4ef7\u4e70\u5165\u3002 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required bid_price float \u59d4\u6258\u4ef7\u683c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 required bid_shares int \u8be2\u4e70\u7684\u80a1\u6570 required bid_time datetime.datetime \u59d4\u6258\u65f6\u95f4 required Returns: Type Description Trade Trade \u5bf9\u8c61 Source code in backtest/trade/broker.py async def buy ( self , security : str , bid_price : Union [ int , float ], bid_shares : int , bid_time : datetime . datetime , ) -> Trade : \"\"\"\u4e70\u5165\u59d4\u6258 \u4e70\u5165\u4ee5\u5c3d\u53ef\u80fd\u5b9e\u73b0\u59d4\u6258\u4e3a\u76ee\u6807\u3002\u5982\u679c\u53ef\u7528\u8d44\u91d1\u4e0d\u8db3\uff0c\u4f46\u80fd\u4e70\u5165\u90e8\u5206\u80a1\u7968\uff0c\u5219\u90e8\u5206\u4e70\u5165\u3002 \u5982\u679cbid_price\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6da8\u505c\u4ef7\u4e70\u5165\u3002 Args: security str: \u8bc1\u5238\u4ee3\u7801 bid_price float: \u59d4\u6258\u4ef7\u683c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares int: \u8be2\u4e70\u7684\u80a1\u6570 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: [Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _buy ( security , bid_price , bid_shares , bid_time )","title":"buy()"},{"location":"api/trade/#backtest.trade.broker.Broker.freeze","text":"\u51bb\u7ed3\u8d26\u6237\uff0c\u505c\u6b62\u63a5\u6536\u65b0\u7684\u59d4\u6258 Source code in backtest/trade/broker.py def freeze ( self ): \"\"\"\u51bb\u7ed3\u8d26\u6237\uff0c\u505c\u6b62\u63a5\u6536\u65b0\u7684\u59d4\u6258\"\"\" self . _bt_stopped = True","title":"freeze()"},{"location":"api/trade/#backtest.trade.broker.Broker.get_assets","text":"\u67e5\u8be2\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u5f53\u65e5\u603b\u8d44\u4ea7 = \u5f53\u65e5\u53ef\u7528\u8d44\u91d1 + \u6301\u4ed3\u5e02\u503c Parameters: Name Type Description Default date date \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 required Returns: Type Description float \u8fd4\u56de\u67d0\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 Source code in backtest/trade/broker.py async def get_assets ( self , date : datetime . date ) -> float : \"\"\"\u67e5\u8be2\u67d0\u65e5\u7684\u603b\u8d44\u4ea7 \u5f53\u65e5\u603b\u8d44\u4ea7 = \u5f53\u65e5\u53ef\u7528\u8d44\u91d1 + \u6301\u4ed3\u5e02\u503c Args: date: \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u8d44\u4ea7 Returns: \u8fd4\u56de\u67d0\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 \"\"\" if self . _assets . size == 0 : return self . principal if date is None : return self . _assets [ - 1 ][ \"assets\" ] result = self . _assets [ self . _assets [ \"date\" ] == date ] if result . size == 1 : return result [ \"assets\" ] . item () assets , * _ = await self . _calc_assets ( date ) return assets","title":"get_assets()"},{"location":"api/trade/#backtest.trade.broker.Broker.get_cash","text":"\u83b7\u53d6 dt \u5f53\u5929\u7684\u53ef\u7528\u8d44\u91d1 \u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c dt \u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Parameters: Name Type Description Default dt datetime.date \u65e5\u671f required Returns: Type Description float \u67d0\u65e5\u53ef\u7528\u8d44\u91d1 Source code in backtest/trade/broker.py def get_cash ( self , dt : datetime . date ) -> float : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u7684\u53ef\u7528\u8d44\u91d1 \u5728\u67e5\u8be2\u65f6\uff0c\u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Args: dt (datetime.date): \u65e5\u671f Returns: float: \u67d0\u65e5\u53ef\u7528\u8d44\u91d1 \"\"\" if self . _cash . size == 0 : return self . principal if dt > self . _cash [ - 1 ][ \"date\" ]: return self . _cash [ - 1 ][ \"cash\" ] . item () elif dt < self . _cash [ 0 ][ \"date\" ]: return self . principal result = self . _cash [ self . _cash [ \"date\" ] == dt ][ \"cash\" ] if result . size == 0 : raise BadParamsError ( f \"date { dt } not found\" ) else : return result . item ()","title":"get_cash()"},{"location":"api/trade/#backtest.trade.broker.Broker.get_position","text":"\u83b7\u53d6 dt \u65e5\u6301\u4ed3 \u5982\u679c\u4f20\u5165\u7684 dt \u5927\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u6700\u540e\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u6700\u540e\u4e00\u5929\u7684\u6301\u4ed3\u6570\u636e,\u5e76\u4e14\u6240\u6709\u6301\u4ed3\u5747\u4e3a\u53ef\u552e\u72b6\u6001 \u5982\u679c\u4f20\u5165\u7684 dt \u5c0f\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u7b2c\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u7a7a\u3002 Parameters: Name Type Description Default dt \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u6301\u4ed3 required dtype \u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4e3a position_dtype \u6216 daily_position_dtype \uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa dtype([('security', 'O'), ('shares', '<f8'), ('sellable', '<f8'), ('price', '<f8')]) Returns: Type Description ndarray \u8fd4\u56de\u7ed3\u679c\u4e3adtype\u4e3a dtype \u7684\u4e00\u7ef4numpy structured array\uff0c\u5176\u4e2dprice\u4e3a\u8be5\u6279\u6301\u4ed3\u7684\u5747\u4ef7\u3002 Source code in backtest/trade/broker.py def get_position ( self , dt : datetime . date , dtype = position_dtype ) -> np . ndarray : \"\"\"\u83b7\u53d6`dt`\u65e5\u6301\u4ed3 \u5982\u679c\u4f20\u5165\u7684`dt`\u5927\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u6700\u540e\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u6700\u540e\u4e00\u5929\u7684\u6301\u4ed3\u6570\u636e,\u5e76\u4e14\u6240\u6709\u6301\u4ed3\u5747\u4e3a\u53ef\u552e\u72b6\u6001 \u5982\u679c\u4f20\u5165\u7684`dt`\u5c0f\u4e8e\u6301\u4ed3\u6570\u636e\u7684\u7b2c\u4e00\u5929\uff0c\u5c06\u8fd4\u56de\u7a7a\u3002 Args: dt : \u67e5\u8be2\u54ea\u4e00\u5929\u7684\u6301\u4ed3 dtype : \u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4e3a[position_dtype][backtest.trade.datatypes.position_dtype]\u6216[daily_position_dtype][backtest.trade.datatypes.daily_position_dtype]\uff0c\u540e\u8005\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa Returns: \u8fd4\u56de\u7ed3\u679c\u4e3adtype\u4e3a`dtype`\u7684\u4e00\u7ef4numpy structured array\uff0c\u5176\u4e2dprice\u4e3a\u8be5\u6279\u6301\u4ed3\u7684\u5747\u4ef7\u3002 \"\"\" if self . _positions . size == 0 : return np . array ([], dtype = dtype ) if dt < self . _positions [ 0 ][ \"date\" ]: return np . array ([], dtype = dtype ) last_date = self . _positions [ - 1 ][ \"date\" ] if dt > last_date : result = self . _positions [ self . _positions [ \"date\" ] == last_date ] result [ \"sellable\" ] = result [ \"shares\" ] return result [ list ( dtype . names )] . astype ( dtype ) result = self . _positions [ self . _positions [ \"date\" ] == dt ] if result . size == 0 : raise BadParamsError ( f \"param dt { dt } not found\" ) return result [ list ( dtype . names )] . astype ( dtype )","title":"get_position()"},{"location":"api/trade/#backtest.trade.broker.Broker.get_returns","text":"\u6c42\u622a\u6b62 end_date \u65f6\u7684\u6bcf\u65e5\u56de\u62a5 Parameters: Name Type Description Default start_date date \u8ba1\u7b97\u56de\u62a5\u7684\u8d77\u59cb\u65e5\u671f None end_date \u8ba1\u7b97\u56de\u62a5\u7684\u7ed3\u675f\u65e5\u671f None Returns: Type Description ndarray \u4ee5\u767e\u5206\u6bd4\u4e3a\u5355\u4f4d\u7684\u6bcf\u65e5\u56de\u62a5\u7387,\u7d22\u5f15\u4e3a\u5bf9\u5e94\u65e5\u671f Source code in backtest/trade/broker.py async def get_returns ( self , start_date : datetime . date = None , end_date : datetime . date = None ) -> np . ndarray : \"\"\"\u6c42\u622a\u6b62`end_date`\u65f6\u7684\u6bcf\u65e5\u56de\u62a5 Args: start_date: \u8ba1\u7b97\u56de\u62a5\u7684\u8d77\u59cb\u65e5\u671f end_date : \u8ba1\u7b97\u56de\u62a5\u7684\u7ed3\u675f\u65e5\u671f Returns: \u4ee5\u767e\u5206\u6bd4\u4e3a\u5355\u4f4d\u7684\u6bcf\u65e5\u56de\u62a5\u7387,\u7d22\u5f15\u4e3a\u5bf9\u5e94\u65e5\u671f \"\"\" start = start_date or self . account_start_date # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u6bcf\u65e5\u56de\u62a5\u65f6\uff0c\u9700\u8981\u53d6\u591a\u4e00\u65e5\uff0c\u5373`start`\u4e4b\u524d\u4e00\u65e5\u7684\u603b\u8d44\u4ea7 _start = tf . day_shift ( start , - 1 ) end = end_date or self . account_end_date assert self . account_start_date <= start <= end assert start <= end <= self . account_end_date if not self . _bt_stopped : await self . recalc_assets () assets = self . _assets [ ( self . _assets [ \"date\" ] >= _start ) & ( self . _assets [ \"date\" ] <= end ) ] if assets . size == 0 : raise TradeError ( f \"date range error: { start } - { end } contains no data\" , with_stack = True ) return assets [ \"assets\" ][ 1 :] / assets [ \"assets\" ][: - 1 ] - 1","title":"get_returns()"},{"location":"api/trade/#backtest.trade.broker.Broker.get_unclosed_trades","text":"\u83b7\u53d6 dt \u5f53\u5929\u672a\u5e73\u4ed3\u7684\u4ea4\u6613 \u5982\u679c dt \u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 Source code in backtest/trade/broker.py def get_unclosed_trades ( self , dt : datetime . date ) -> set : \"\"\"\u83b7\u53d6`dt`\u5f53\u5929\u672a\u5e73\u4ed3\u7684\u4ea4\u6613 \u5982\u679c`dt`\u5c0f\u4e8e\u9996\u6b21\u4ea4\u6613\u65e5\uff0c\u5219\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\uff0c\u5982\u679c\u5f53\u65e5\u65e0\u6570\u636e\uff0c\u5c06\u4ece\u4e0a\u4e00\u4e2a\u6709\u6570\u636e\u4e4b\u65e5\u8d77\uff0c\u8fdb\u884c\u8865\u9f50\u586b\u5145\u3002 \"\"\" if len ( self . _unclosed_trades ) == 0 : return set () result = self . _unclosed_trades . get ( dt ) if result is None : start = sorted ( self . _unclosed_trades . keys ())[ 0 ] if dt < start : return set () else : self . _fillup_unclosed_trades ( dt ) return self . _unclosed_trades . get ( dt )","title":"get_unclosed_trades()"},{"location":"api/trade/#backtest.trade.broker.Broker.info","text":"dt \u65e5\u7684\u8d26\u53f7\u76f8\u5173\u4fe1\u606f Returns: Type Description Dict \u8d26\u53f7\u76f8\u5173\u4fe1\u606f\uff1a name: str, \u8d26\u6237\u540d principal: float, \u521d\u59cb\u8d44\u91d1 assets: float, dt \u65e5\u8d44\u4ea7 start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548 bt_stopped: \u56de\u6d4b\u662f\u5426\u7ed3\u675f\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548\u3002 last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 available: float, dt \u65e5\u53ef\u7528\u8d44\u91d1 market_value: dt \u65e5\u80a1\u7968\u5e02\u503c pnl: dt \u76c8\u4e8f(\u7edd\u5bf9\u503c) ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array Source code in backtest/trade/broker.py async def info ( self , dt : datetime . date = None ) -> Dict : \"\"\"`dt`\u65e5\u7684\u8d26\u53f7\u76f8\u5173\u4fe1\u606f Returns: Dict: \u8d26\u53f7\u76f8\u5173\u4fe1\u606f\uff1a - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, `dt`\u65e5\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548 - bt_stopped: \u56de\u6d4b\u662f\u5426\u7ed3\u675f\uff0c\u4ec5\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u6709\u6548\u3002 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, `dt`\u65e5\u53ef\u7528\u8d44\u91d1 - market_value: `dt`\u65e5\u80a1\u7968\u5e02\u503c - pnl: `dt`\u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" dt = dt or self . last_trade_date cash = self . get_cash ( dt ) assets = await self . get_assets ( dt ) return { \"name\" : self . account_name , \"principal\" : self . principal , \"start\" : self . account_start_date , \"end\" : self . bt_stop , \"bt_stopped\" : self . _bt_stopped , \"last_trade\" : self . last_trade_date , \"assets\" : assets , \"available\" : cash , \"market_value\" : assets - cash , \"pnl\" : assets - self . principal , \"ppnl\" : assets / self . principal - 1 , \"positions\" : self . get_position ( dt ), }","title":"info()"},{"location":"api/trade/#backtest.trade.broker.Broker.metrics","text":"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5\u7684\u8d26\u6237\u6307\u6807 Parameters: Name Type Description Default start Optional[datetime.date] \u5f00\u59cb\u65f6\u95f4 None end Optional[datetime.date] \u7ed3\u675f\u65f6\u95f4 None baseline Optional[str] \u53c2\u8003\u6807\u7684 '399300.XSHE' Returns: Type Description Dict \u6307\u6807\u5b57\u5178\uff0c\u5176key\u4e3a start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 total_profit \u603b\u76c8\u4e8f total_profit_rate \u603b\u76c8\u4e8f\u7387 win_rate \u80dc\u7387 mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 sharpe \u590f\u666e\u6bd4\u7387 max_drawdown \u6700\u5927\u56de\u64a4 sortino calmar annual_return \u5e74\u5316\u6536\u76ca\u7387 volatility \u6ce2\u52a8\u7387 baseline: dict win_rate sharpe max_drawdown sortino annual_return total_profit_rate volatility Source code in backtest/trade/broker.py async def metrics ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , baseline : Optional [ str ] = \"399300.XSHE\" , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5\u7684\u8d26\u6237\u6307\u6807 Args: start: \u5f00\u59cb\u65f6\u95f4 end: \u7ed3\u675f\u65f6\u95f4 baseline: \u53c2\u8003\u6807\u7684 Returns: Dict: \u6307\u6807\u5b57\u5178\uff0c\u5176key\u4e3a - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" try : rf = cfg . metrics . risk_free_rate / cfg . metrics . annual_days except Exception : rf = 0 start = min ( start or self . account_start_date , self . account_start_date ) end = max ( end or self . account_end_date , self . account_end_date ) tx = [] logger . info ( \" %s tx in total\" , len ( self . transactions )) for t in self . transactions : if t . entry_time . date () >= start and t . exit_time . date () <= end : tx . append ( t ) else : logger . info ( \"tx %s not in range, start: %s , end: %s \" , t . sec , t . entry_time , t . exit_time , ) # \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 window = tf . count_day_frames ( start , end ) total_tx = len ( tx ) if total_tx == 0 : return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : None , \"total_profit_rate\" : None , \"win_rate\" : None , \"mean_return\" : None , \"sharpe\" : None , \"sortino\" : None , \"calmar\" : None , \"max_drawdown\" : None , \"annual_return\" : None , \"volatility\" : None , \"baseline\" : None , } # win_rate wr = len ([ t for t in tx if t . profit > 0 ]) / total_tx if not self . _bt_stopped : await self . recalc_assets () # \u5f53\u8ba1\u7b97[start, end]\u4e4b\u95f4\u7684\u76c8\u4e8f\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u8981\u591a\u53d6\u4e00\u4e2a\u4ea4\u6613\u65e5\uff0c\u5373start\u4e4b\u524d\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u8d44\u4ea7\u6570\u636e _start = tf . day_shift ( start , - 1 ) total_profit = await self . get_assets ( end ) - await self . get_assets ( _start ) returns = await self . get_returns ( start , end ) mean_return = np . mean ( returns ) sharpe = sharpe_ratio ( returns , rf ) sortino = sortino_ratio ( returns , rf ) calma = calmar_ratio ( returns ) mdd = max_drawdown ( returns ) # \u5e74\u5316\u6536\u76ca\u7387 ar = annual_return ( returns ) # \u5e74\u5316\u6ce2\u52a8\u7387 vr = annual_volatility ( returns ) # \u8ba1\u7b97\u53c2\u8003\u6807\u7684\u7684\u76f8\u5173\u6307\u6807 if baseline is not None : ref_bars = await Stock . get_bars_in_range ( baseline , FrameType . DAY , start , end ) if ref_bars . size < 2 : ref_results = None else : returns = ref_bars [ \"close\" ][ 1 :] / ref_bars [ \"close\" ][: - 1 ] - 1 ref_results = { \"total_profit_rate\" : cum_returns_final ( returns ), \"win_rate\" : np . count_nonzero ( returns > 0 ) / len ( returns ), \"mean_return\" : np . mean ( returns ) . item (), \"sharpe\" : sharpe_ratio ( returns , rf ), \"sortino\" : sortino_ratio ( returns , rf ), \"calmar\" : calmar_ratio ( returns ), \"max_drawdown\" : max_drawdown ( returns ), \"annual_return\" : annual_return ( returns ), \"volatility\" : annual_volatility ( returns ), } else : ref_results = None return { \"start\" : start , \"end\" : end , \"window\" : window , \"total_tx\" : total_tx , \"total_profit\" : total_profit , \"total_profit_rate\" : total_profit / self . principal , \"win_rate\" : wr , \"mean_return\" : mean_return , \"sharpe\" : sharpe , \"sortino\" : sortino , \"calmar\" : calma , \"max_drawdown\" : mdd , \"annual_return\" : ar , \"volatility\" : vr , \"baseline\" : ref_results , }","title":"metrics()"},{"location":"api/trade/#backtest.trade.broker.Broker.recalc_assets","text":"\u91cd\u65b0\u8ba1\u7b97\u8d26\u6237\u7684\u6bcf\u65e5\u8d44\u4ea7 \u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u8d44\u4ea7\u8868\u5c06\u5305\u62ec\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\uff0c\u5230 end \u65e5\u7684\u8d44\u4ea7\u6570\u636e\u3002\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\u8d77\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u9996\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76ca\u3002 Parameters: Name Type Description Default end Optional[datetime.date] \u8ba1\u7b97\u5230\u54ea\u4e00\u5929\u7684\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u8ba1\u7b97\u5230\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\uff08\u975e\u56de\u6d4b\uff09\uff0c\u6216\u8005\u56de\u6d4b\u7ed3\u675f\u65e5\u3002 None Source code in backtest/trade/broker.py async def recalc_assets ( self , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None ): \"\"\"\u91cd\u65b0\u8ba1\u7b97\u8d26\u6237\u7684\u6bcf\u65e5\u8d44\u4ea7 \u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u8d44\u4ea7\u8868\u5c06\u5305\u62ec\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\uff0c\u5230`end`\u65e5\u7684\u8d44\u4ea7\u6570\u636e\u3002\u4ece\u8d26\u6237\u5f00\u59cb\u524d\u4e00\u65e5\u8d77\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u9996\u4e2a\u4ea4\u6613\u65e5\u7684\u6536\u76ca\u3002 Args: end: \u8ba1\u7b97\u5230\u54ea\u4e00\u5929\u7684\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u8ba1\u7b97\u5230\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\uff08\u975e\u56de\u6d4b\uff09\uff0c\u6216\u8005\u56de\u6d4b\u7ed3\u675f\u65e5\u3002 \"\"\" if end is None : if self . mode != \"bt\" : # \u975e\u56de\u6d4b\u4e0b\u8ba1\u7b97\u5230\u5f53\u4e0b end = arrow . now () . date () else : # \u56de\u6d4b\u65f6\u8ba1\u7b97\u5230bt_stop end = self . bt_stop # \u628a\u671f\u521d\u8d44\u4ea7\u52a0\u8fdb\u6765 if self . _assets . size == 0 : start = self . account_start_date if start is None : return np . array ([], dtype = rich_assets_dtype ) _before_start = tf . day_shift ( start , - 1 ) self . _assets = np . array ( [( _before_start , self . principal )], dtype = assets_dtype ) start = start or tf . day_shift ( self . _assets [ - 1 ][ \"date\" ], 1 ) if start >= end : return # \u5f85\u8865\u9f50\u7684\u8d44\u4ea7\u65e5 frames = [ tf . int2date ( d ) for d in tf . get_frames ( start , end , FrameType . DAY )] # \u4ece\u6700\u540e\u4e00\u4e2a\u8d44\u4ea7\u65e5\u5230`end`\uff0c\u6301\u4ed3\u5e94\u90fd\u662f\u4e00\u6837\u7684 position = self . get_position ( end , position_dtype ) if position . size == 0 : assets = self . _assets [ - 1 ][ \"assets\" ] self . _assets = np . concatenate ( ( self . _assets , np . array ([( frame , assets ) for frame in frames ], dtype = assets_dtype ), ) ) return secs = position [ position [ \"shares\" ] != 0 ][ \"security\" ] shares = { sec : position [ position [ \"security\" ] == sec ][ \"shares\" ][ 0 ] for sec in secs } if len ( secs ): feed = get_app_context () . feed closes = await feed . batch_get_close_price_in_range ( secs , frames ) for frame in frames : cash = self . get_cash ( frame ) mv = 0 for sec in secs : if closes . get ( sec ) is None : price = position [ position [ \"security\" ] == sec ][ \"price\" ] . item () mv += shares . get ( sec , 0 ) * price else : iclose = self . _index_of ( closes [ sec ], frame , \"frame\" ) mv += closes [ sec ][ iclose ][ \"close\" ] * shares . get ( sec , 0 ) i = self . _index_of ( self . _assets , frame ) if i is None : self . _assets = np . append ( self . _assets , np . array ([( frame , float ( cash + mv ))], dtype = assets_dtype ), axis = 0 , ) else : self . _assets [ i ][ \"assets\" ] = float ( cash + mv )","title":"recalc_assets()"},{"location":"api/trade/#backtest.trade.broker.Broker.sell","text":"\u5356\u51fa\u59d4\u6258 Parameters: Name Type Description Default security str \u59d4\u6258\u8bc1\u5238\u4ee3\u7801 required bid_price float \u51fa\u552e\u4ef7\u683c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 required bid_shares float \u8be2\u5356\u80a1\u6570\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u9650\u5236\u5fc5\u987b\u4ee5100\u7684\u500d\u6570\u5356\u51fa\u3002 required bid_time datetime.datetime \u59d4\u6258\u65f6\u95f4 required Returns: Type Description List[backtest.trade.trade.Trade] \u6210\u4ea4\u8bb0\u5f55\u5217\u8868,\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a Trade \u5bf9\u8c61 Source code in backtest/trade/broker.py async def sell ( self , security : str , bid_price : Union [ None , float ], bid_shares : float , bid_time : datetime . datetime , ) -> List [ Trade ]: \"\"\"\u5356\u51fa\u59d4\u6258 Args: security str: \u59d4\u6258\u8bc1\u5238\u4ee3\u7801 bid_price float: \u51fa\u552e\u4ef7\u683c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e3a\u5e02\u4ef7\u59d4\u6258 bid_shares float: \u8be2\u5356\u80a1\u6570\u3002\u6ce8\u610f\u6211\u4eec\u4e0d\u9650\u5236\u5fc5\u987b\u4ee5100\u7684\u500d\u6570\u5356\u51fa\u3002 bid_time datetime.datetime: \u59d4\u6258\u65f6\u95f4 Returns: \u6210\u4ea4\u8bb0\u5f55\u5217\u8868,\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a[Trade][backtest.trade.trade.Trade]\u5bf9\u8c61 \"\"\" # \u540c\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1\u7684\u4e70\u5355\u548c\u5356\u5355\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u4e32\u884c\u5316 async with self . lock : return await self . _sell ( security , bid_price , bid_shares , bid_time )","title":"sell()"},{"location":"api/trade/#backtest.trade.datatypes","text":"","title":"datatypes"},{"location":"api/trade/#backtest.trade.datatypes.assets_dtype","text":"the assets dtype as the following: 1 2 3 4 5 6 np.dtype( [ (\"date\", \"O\"), (\"assets\", \"<f8\") ] )","title":"assets_dtype"},{"location":"api/trade/#backtest.trade.datatypes.daily_position_dtype","text":"the position dtype which usually used in backtest server internally: 1 2 3 4 5 6 7 8 9 np.dtype( [ (\"date\", \"O\"), (\"security\", \"O\"), (\"shares\", \"<f8\"), (\"sellable\", \"<f8\"), (\"price\", \"<f8\"), ] )","title":"daily_position_dtype"},{"location":"api/trade/#backtest.trade.datatypes.float_ts_dtype","text":"generic date-float dtype as the following: ``` np.dtype( [ (\"date\", \"O\"), (\"value\", \"<f8\") ] )","title":"float_ts_dtype"},{"location":"api/trade/#backtest.trade.datatypes.position_dtype","text":"the position dtype which will return back to trader-client 1 2 3 4 5 6 7 8 np.dtype( [ (\"security\", \"O\"), (\"shares\", \"<f8\"), (\"sellable\", \"<f8\"), (\"price\", \"<f8\") ] )","title":"position_dtype"},{"location":"api/trade/#backtest.trade.datatypes.rich_assets_dtype","text":"the rich assets dtype as the following: 1 2 3 4 5 6 7 8 np.dtype( [ (\"date\", \"O\"), (\"assets\", \"<f8\"), (\"cash\", \"<f8\"), (\"mv\", \"<f8\") ] )","title":"rich_assets_dtype"},{"location":"api/trade/#backtest.trade.datatypes.BidType","text":"An enumeration. Source code in backtest/trade/datatypes.py class BidType ( IntEnum ): LIMIT = 1 MARKET = 2 def __str__ ( self ): return { BidType . LIMIT : \"\u9650\u4ef7\u59d4\u6258\" , BidType . MARKET : \"\u5e02\u4ef7\u59d4\u6258\" } . get ( self )","title":"BidType"},{"location":"api/trade/#backtest.trade.datatypes.EntrustSide","text":"An enumeration. Source code in backtest/trade/datatypes.py class EntrustSide ( IntEnum ): BUY = 1 SELL = - 1 XDXR = 0 def __str__ ( self ): return { EntrustSide . BUY : \"\u4e70\u5165\" , EntrustSide . SELL : \"\u5356\u51fa\" , EntrustSide . XDXR : \"\u5206\u7ea2\u914d\u80a1\" , }[ self ]","title":"EntrustSide"},{"location":"api/trade/#backtest.trade.trade","text":"","title":"trade"},{"location":"api/trade/#backtest.trade.trade.Trade","text":"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u5b8c\u6210\u7684\u59d4\u6258\u3002\u4e00\u4e2a\u59d4\u6258\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2aTrade\uff0c\u7279\u522b\u662f\u5f53\u5356\u51fa\u7684\u65f6\u5019 Source code in backtest/trade/trade.py class Trade : \"\"\"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u5b8c\u6210\u7684\u59d4\u6258\u3002\u4e00\u4e2a\u59d4\u6258\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2aTrade\uff0c\u7279\u522b\u662f\u5f53\u5356\u51fa\u7684\u65f6\u5019\"\"\" def __init__ ( self , eid : str , security : str , price : float , shares : int , fee : float , side : EntrustSide , time : datetime . datetime , ): \"\"\"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u7684\u59d4\u6258\uff08\u5373\u5df2\u5b8c\u6210\u7684\u4ea4\u6613\uff09 Args: eid: \u5bf9\u5e94\u7684\u59d4\u6258\u53f7 security: \u8bc1\u5238\u4ee3\u7801 price: \u4ea4\u6613\u4ef7\u683c shares: \u4ea4\u6613\u6570\u91cf fee: \u4ea4\u6613\u624b\u7eed\u8d39 time: \u4ea4\u6613\u65f6\u95f4 \"\"\" self . eid = eid self . tid = str ( uuid . uuid4 ()) self . security = security self . fee = fee self . price = price self . shares = shares self . time = time self . side = side # only for buying trade self . _unsell = shares self . _unamortized_fee = fee self . closed = False if side == EntrustSide . XDXR : logger . info ( \"XDXR entrust: %s \" , self , date = time ) def __str__ ( self ): return f \"\u8bc1\u5238\u4ee3\u7801: { self . security } \\n \u6210\u4ea4\u65b9\u5411: { self . side } \\n \u6210\u4ea4\u5747\u4ef7: { self . price } \\n \u6570\u91cf: { self . shares } \\n \u624b\u7eed\u8d39: { self . fee } \\n \u59d4\u6258\u53f7: { self . eid } \\n \u6210\u4ea4\u53f7: { self . tid } \\n \u6210\u4ea4\u65f6\u95f4: { self . time } \\n \" def to_dict ( self ) -> dict : \"\"\"\u5c06Trade\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 Returns: Dict: \u8fd4\u56de\u503c\uff0c\u5176key\u4e3a - tid: \u4ea4\u6613\u53f7 - eid: \u59d4\u6258\u53f7 - security: \u8bc1\u5238\u4ee3\u7801 - price: \u4ea4\u6613\u4ef7\u683c - filled: \u5c45\u4ea4\u6570\u91cf - trade_fees: \u4ea4\u6613\u624b\u7eed\u8d39 - order_side: \u4ea4\u6613\u65b9\u5411 - time: \u4ea4\u6613\u65f6\u95f4 \"\"\" return { \"tid\" : str ( self . tid ), \"eid\" : str ( self . eid ), \"security\" : self . security , \"order_side\" : str ( self . side ), \"price\" : self . price , \"filled\" : self . shares , \"time\" : self . time . isoformat (), \"trade_fees\" : self . fee , } def sell ( self , shares : float , price : float , fee : float , close_time : datetime . datetime ): \"\"\"\u4ece\u5f53\u524d\u672a\u552e\u51fa\u80a1\u4e2d\u552e\u51fa\u3002 \u8ba1\u7b97\u65f6\u5c06\u6839\u636e\u552e\u51fa\u7684\u80a1\u6570\uff0c\u5206\u644a\u4e70\u5165\u548c\u5356\u7684\u4ea4\u6613\u6210\u672c\u3002\u8fd4\u56de\u672a\u552e\u51fa\u7684\u80a1\u4efd\u548c\u672a\u5206\u644a\u7684\u6210\u672c\u3002 Args: shares: \u5f85\u51fa\u552e\u80a1\u6570 price: \u51fa\u552e\u4ef7\u683c fee: \u4ea4\u6613\u624b\u7eed\u8d39 close_time: \u6210\u4ea4\u65e5\u671f \"\"\" assert self . side in ( EntrustSide . BUY , EntrustSide . XDXR ) if not self . closed : sec = self . security assert self . _unsell > 0 , str ( self ) + \"\u72b6\u6001\u9519\u8bef\uff0c\u65e0\u6cd5\u552e\u51fa\uff0c\u8bf7\u68c0\u67e5\u4ee3\u7801\" sellable = min ( shares , self . _unsell ) # \u8ba1\u7b97\u672c\u6b21\u4ea4\u6613\u7684\u6536\u76ca\uff0c\u5e76\u5206\u644a\u4ea4\u6613\u6210\u672c amortized_buy_fee = self . fee * sellable / self . shares amortized_sell_fee = fee * sellable / shares self . _unsell -= sellable self . _unamortized_fee -= amortized_buy_fee if self . _unsell == 0 : logger . debug ( \"\u4ea4\u6613 %s ( %s )\u5df2close.\" , self . security , self . tid , date = close_time ) self . closed = True trade = Trade ( self . eid , sec , price , sellable , amortized_sell_fee , EntrustSide . SELL , close_time , ) tx = Transaction ( sec , self . time , close_time , self . price , price , sellable , amortized_buy_fee + amortized_sell_fee , ) return shares - sellable , fee - amortized_sell_fee , trade , tx","title":"Trade"},{"location":"api/trade/#backtest.trade.trade.Trade.__init__","text":"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u7684\u59d4\u6258\uff08\u5373\u5df2\u5b8c\u6210\u7684\u4ea4\u6613\uff09 Parameters: Name Type Description Default eid str \u5bf9\u5e94\u7684\u59d4\u6258\u53f7 required security str \u8bc1\u5238\u4ee3\u7801 required price float \u4ea4\u6613\u4ef7\u683c required shares int \u4ea4\u6613\u6570\u91cf required fee float \u4ea4\u6613\u624b\u7eed\u8d39 required time datetime \u4ea4\u6613\u65f6\u95f4 required Source code in backtest/trade/trade.py def __init__ ( self , eid : str , security : str , price : float , shares : int , fee : float , side : EntrustSide , time : datetime . datetime , ): \"\"\"Trade\u5bf9\u8c61\u4ee3\u8868\u4e86\u4e00\u7b14\u5df2\u6210\u529f\u7684\u59d4\u6258\uff08\u5373\u5df2\u5b8c\u6210\u7684\u4ea4\u6613\uff09 Args: eid: \u5bf9\u5e94\u7684\u59d4\u6258\u53f7 security: \u8bc1\u5238\u4ee3\u7801 price: \u4ea4\u6613\u4ef7\u683c shares: \u4ea4\u6613\u6570\u91cf fee: \u4ea4\u6613\u624b\u7eed\u8d39 time: \u4ea4\u6613\u65f6\u95f4 \"\"\" self . eid = eid self . tid = str ( uuid . uuid4 ()) self . security = security self . fee = fee self . price = price self . shares = shares self . time = time self . side = side # only for buying trade self . _unsell = shares self . _unamortized_fee = fee self . closed = False if side == EntrustSide . XDXR : logger . info ( \"XDXR entrust: %s \" , self , date = time )","title":"__init__()"},{"location":"api/trade/#backtest.trade.trade.Trade.sell","text":"\u4ece\u5f53\u524d\u672a\u552e\u51fa\u80a1\u4e2d\u552e\u51fa\u3002 \u8ba1\u7b97\u65f6\u5c06\u6839\u636e\u552e\u51fa\u7684\u80a1\u6570\uff0c\u5206\u644a\u4e70\u5165\u548c\u5356\u7684\u4ea4\u6613\u6210\u672c\u3002\u8fd4\u56de\u672a\u552e\u51fa\u7684\u80a1\u4efd\u548c\u672a\u5206\u644a\u7684\u6210\u672c\u3002 Parameters: Name Type Description Default shares float \u5f85\u51fa\u552e\u80a1\u6570 required price float \u51fa\u552e\u4ef7\u683c required fee float \u4ea4\u6613\u624b\u7eed\u8d39 required close_time datetime \u6210\u4ea4\u65e5\u671f required Source code in backtest/trade/trade.py def sell ( self , shares : float , price : float , fee : float , close_time : datetime . datetime ): \"\"\"\u4ece\u5f53\u524d\u672a\u552e\u51fa\u80a1\u4e2d\u552e\u51fa\u3002 \u8ba1\u7b97\u65f6\u5c06\u6839\u636e\u552e\u51fa\u7684\u80a1\u6570\uff0c\u5206\u644a\u4e70\u5165\u548c\u5356\u7684\u4ea4\u6613\u6210\u672c\u3002\u8fd4\u56de\u672a\u552e\u51fa\u7684\u80a1\u4efd\u548c\u672a\u5206\u644a\u7684\u6210\u672c\u3002 Args: shares: \u5f85\u51fa\u552e\u80a1\u6570 price: \u51fa\u552e\u4ef7\u683c fee: \u4ea4\u6613\u624b\u7eed\u8d39 close_time: \u6210\u4ea4\u65e5\u671f \"\"\" assert self . side in ( EntrustSide . BUY , EntrustSide . XDXR ) if not self . closed : sec = self . security assert self . _unsell > 0 , str ( self ) + \"\u72b6\u6001\u9519\u8bef\uff0c\u65e0\u6cd5\u552e\u51fa\uff0c\u8bf7\u68c0\u67e5\u4ee3\u7801\" sellable = min ( shares , self . _unsell ) # \u8ba1\u7b97\u672c\u6b21\u4ea4\u6613\u7684\u6536\u76ca\uff0c\u5e76\u5206\u644a\u4ea4\u6613\u6210\u672c amortized_buy_fee = self . fee * sellable / self . shares amortized_sell_fee = fee * sellable / shares self . _unsell -= sellable self . _unamortized_fee -= amortized_buy_fee if self . _unsell == 0 : logger . debug ( \"\u4ea4\u6613 %s ( %s )\u5df2close.\" , self . security , self . tid , date = close_time ) self . closed = True trade = Trade ( self . eid , sec , price , sellable , amortized_sell_fee , EntrustSide . SELL , close_time , ) tx = Transaction ( sec , self . time , close_time , self . price , price , sellable , amortized_buy_fee + amortized_sell_fee , ) return shares - sellable , fee - amortized_sell_fee , trade , tx","title":"sell()"},{"location":"api/trade/#backtest.trade.trade.Trade.to_dict","text":"\u5c06Trade\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 Returns: Type Description Dict \u8fd4\u56de\u503c\uff0c\u5176key\u4e3a tid: \u4ea4\u6613\u53f7 eid: \u59d4\u6258\u53f7 security: \u8bc1\u5238\u4ee3\u7801 price: \u4ea4\u6613\u4ef7\u683c filled: \u5c45\u4ea4\u6570\u91cf trade_fees: \u4ea4\u6613\u624b\u7eed\u8d39 order_side: \u4ea4\u6613\u65b9\u5411 time: \u4ea4\u6613\u65f6\u95f4 Source code in backtest/trade/trade.py def to_dict ( self ) -> dict : \"\"\"\u5c06Trade\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 Returns: Dict: \u8fd4\u56de\u503c\uff0c\u5176key\u4e3a - tid: \u4ea4\u6613\u53f7 - eid: \u59d4\u6258\u53f7 - security: \u8bc1\u5238\u4ee3\u7801 - price: \u4ea4\u6613\u4ef7\u683c - filled: \u5c45\u4ea4\u6570\u91cf - trade_fees: \u4ea4\u6613\u624b\u7eed\u8d39 - order_side: \u4ea4\u6613\u65b9\u5411 - time: \u4ea4\u6613\u65f6\u95f4 \"\"\" return { \"tid\" : str ( self . tid ), \"eid\" : str ( self . eid ), \"security\" : self . security , \"order_side\" : str ( self . side ), \"price\" : self . price , \"filled\" : self . shares , \"time\" : self . time . isoformat (), \"trade_fees\" : self . fee , }","title":"to_dict()"},{"location":"api/trade/#backtest.trade.transaction","text":"","title":"transaction"},{"location":"api/trade/#backtest.trade.transaction.Transaction","text":"\u5305\u62ec\u4e86\u4e70\u548c\u5356\u7684\u4e00\u6b21\u5b8c\u6574\u4ea4\u6613 Source code in backtest/trade/transaction.py class Transaction : \"\"\"\u5305\u62ec\u4e86\u4e70\u548c\u5356\u7684\u4e00\u6b21\u5b8c\u6574\u4ea4\u6613\"\"\" def __init__ ( self , sec : str , entry_time : datetime . datetime , exit_time : datetime . datetime , entry_price : float , exit_price : float , shares : float , fee : float , ): self . sec = sec self . entry_time = entry_time self . exit_time = exit_time self . entry_price = entry_price self . exit_price = exit_price self . shares = shares self . fee = fee self . profit = ( exit_price - entry_price ) * shares - fee self . pprofit = self . profit / ( entry_price * shares ) try : # \u5982\u679comicron\u672a\u521d\u59cb\u5316\uff0c\u5219\u4e0d\u8ba1\u7b97\u8d44\u4ea7\u66b4\u9732\u7a97\u53e3 self . window = tf . count_day_frames ( entry_time , exit_time ) except Exception : pass def __str__ ( self ): return f \" { self . sec } { self . entry_time } \u4e70\u5165( { self . entry_price } , { self . exit_time } \u5356\u51fa( { self . exit_price } ), profit { self . exit_price / self . entry_price - 1 : .2% } \"","title":"Transaction"},{"location":"api/web/","text":"\u672cmodule\u63d0\u4f9b\u670d\u52a1\u7aef\u70b9\u7684\u54cd\u5e94\u5904\u7406 accounts \u00b6 \u7b80\u6613\u8d26\u6237\u7ba1\u7406 \u63d0\u4f9b\u4e86\u521b\u5efa\u8d26\u6237\u3001\u67e5\u8be2\u8d26\u6237\u3001\u5220\u9664\u8d26\u6237\u548c\u72b6\u6001\u6301\u4e45\u5316\u5b9e\u73b0\u3002 Accounts \u00b6 Source code in backtest/web/accounts.py class Accounts : _brokers = {} def on_startup ( self ): token = cfg . auth . admin self . _brokers [ token ] = Broker ( \"admin\" , 0 , 0.0 ) state_file = os . path . join ( home_dir (), \"state.pkl\" ) try : with open ( state_file , \"rb\" ) as f : self . _brokers = pickle . load ( f ) except FileNotFoundError : pass except Exception as e : logger . exception ( e ) def on_exit ( self ): state_file = os . path . join ( home_dir (), \"state.pkl\" ) with open ( state_file , \"wb\" ) as f : pickle . dump ( self . _brokers , f ) def get_broker ( self , token ): return self . _brokers . get ( token ) def is_valid ( self , token : str ): return token in self . _brokers def is_admin ( self , token : str ): cfg = cfg4py . get_instance () return token == cfg . auth . admin def create_account ( self , name : str , token : str , principal : float , commission : float , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u65b0\u8d26\u6237 \u4e00\u4e2a\u8d26\u6237\u7531`name`\u548c`token`\u7684\u7ec4\u5408\u60df\u4e00\u786e\u5b9a\u3002\u5982\u679c\u524d\u8ff0\u7ec4\u5408\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 Args: name (str): \u8d26\u6237/\u7b56\u7565\u540d\u79f0 token (str): \u8d26\u6237token principal (float): \u8d26\u6237\u8d77\u59cb\u8d44\u91d1 commission (float): \u8d26\u6237\u624b\u7eed\u8d39 start (datetime.date, optional): \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a end (datetime.date, optional): \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a \"\"\" if token in self . _brokers : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) for broker in self . _brokers . values (): if broker . account_name == name : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) broker = Broker ( name , principal , commission , start , end ) self . _brokers [ token ] = broker logger . info ( \"\u65b0\u5efa\u8d26\u6237: %s , %s \" , name , token ) return { \"account_name\" : name , \"token\" : token , \"account_start_date\" : broker . account_start_date , \"principal\" : broker . principal , } def list_accounts ( self , mode : str ): if mode != \"all\" : filtered = { token : broker for token , broker in self . _brokers . items () if broker . mode == mode and broker . account_name != \"admin\" } else : filtered = { token : broker for token , broker in self . _brokers . items () if broker . account_name != \"admin\" } return [ { \"account_name\" : broker . account_name , \"token\" : token , \"account_start_date\" : broker . account_start_date , \"principal\" : broker . principal , } for token , broker in filtered . items () ] def delete_accounts ( self , account_to_delete : str = None ): if account_to_delete is None : self . _brokers = {} self . _brokers [ cfg . auth . admin ] = Broker ( \"admin\" , 0 , 0.0 ) return 0 else : for token , broker in self . _brokers . items (): if broker . account_name == account_to_delete : del self . _brokers [ token ] logger . info ( \"\u8d26\u6237: %s \u5df2\u5220\u9664\" , account_to_delete ) return len ( self . _brokers ) - 1 else : logger . warning ( \"\u8d26\u6237 %s \u4e0d\u5b58\u5728\" , account_to_delete ) return len ( self . _brokers ) create_account ( self , name , token , principal , commission , start = None , end = None ) \u00b6 \u521b\u5efa\u65b0\u8d26\u6237 \u4e00\u4e2a\u8d26\u6237\u7531 name \u548c token \u7684\u7ec4\u5408\u60df\u4e00\u786e\u5b9a\u3002\u5982\u679c\u524d\u8ff0\u7ec4\u5408\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 Parameters: Name Type Description Default name str \u8d26\u6237/\u7b56\u7565\u540d\u79f0 required token str \u8d26\u6237token required principal float \u8d26\u6237\u8d77\u59cb\u8d44\u91d1 required commission float \u8d26\u6237\u624b\u7eed\u8d39 required start datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a None end datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a None Source code in backtest/web/accounts.py def create_account ( self , name : str , token : str , principal : float , commission : float , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u65b0\u8d26\u6237 \u4e00\u4e2a\u8d26\u6237\u7531`name`\u548c`token`\u7684\u7ec4\u5408\u60df\u4e00\u786e\u5b9a\u3002\u5982\u679c\u524d\u8ff0\u7ec4\u5408\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 Args: name (str): \u8d26\u6237/\u7b56\u7565\u540d\u79f0 token (str): \u8d26\u6237token principal (float): \u8d26\u6237\u8d77\u59cb\u8d44\u91d1 commission (float): \u8d26\u6237\u624b\u7eed\u8d39 start (datetime.date, optional): \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a end (datetime.date, optional): \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a \"\"\" if token in self . _brokers : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) for broker in self . _brokers . values (): if broker . account_name == name : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) broker = Broker ( name , principal , commission , start , end ) self . _brokers [ token ] = broker logger . info ( \"\u65b0\u5efa\u8d26\u6237: %s , %s \" , name , token ) return { \"account_name\" : name , \"token\" : token , \"account_start_date\" : broker . account_start_date , \"principal\" : broker . principal , } interfaces \u00b6 bills ( request ) async \u00b6 \u83b7\u53d6\u4ea4\u6613\u8bb0\u5f55 Returns: Type Description Response \u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u62ec\u4ee5\u4e0b\u5b57\u6bb5\uff1a tx: \u914d\u5bf9\u7684\u4ea4\u6613\u8bb0\u5f55 trades: \u6210\u4ea4\u8bb0\u5f55 positions: \u6301\u4ed3\u8bb0\u5f55 assets: \u6bcf\u65e5\u5e02\u503c Source code in backtest/web/interfaces.py @bp . route ( \"bills\" , methods = [ \"GET\" ]) @protected async def bills ( request ): \"\"\"\u83b7\u53d6\u4ea4\u6613\u8bb0\u5f55 Returns: Response: \u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u62ec\u4ee5\u4e0b\u5b57\u6bb5\uff1a - tx: \u914d\u5bf9\u7684\u4ea4\u6613\u8bb0\u5f55 - trades: \u6210\u4ea4\u8bb0\u5f55 - positions: \u6301\u4ed3\u8bb0\u5f55 - assets: \u6bcf\u65e5\u5e02\u503c \"\"\" results = {} broker : Broker = request . ctx . broker results [ \"tx\" ] = broker . transactions results [ \"trades\" ] = broker . trades results [ \"positions\" ] = broker . _positions if not ( broker . mode == \"bt\" and broker . _bt_stopped ): await broker . recalc_assets () results [ \"assets\" ] = broker . _assets return response . json ( jsonify ( results )) buy ( request ) async \u00b6 \u4e70\u5165 Parameters: Name Type Description Default request Request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a security : \u8bc1\u5238\u4ee3\u7801 price: \u4e70\u5165\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u4e70\u5165 volume: \u4e70\u5165\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u4e70\u5165\u7ed3\u679c, \u5b57\u5178\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a tid: str, \u4ea4\u6613id eid: str, \u59d4\u6258id security: str, \u8bc1\u5238\u4ee3\u7801 order_side: str, \u4e70\u5165/\u5356\u51fa price: float, \u6210\u4ea4\u5747\u4ef7 filled: float, \u6210\u4ea4\u6570\u91cf time: str, \u4e0b\u5355\u65f6\u95f4 trade_fees: float, \u624b\u7eed\u8d39 Source code in backtest/web/interfaces.py @bp . route ( \"buy\" , methods = [ \"POST\" ]) @protected async def buy ( request ): \"\"\"\u4e70\u5165 Args: request Request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a - security : \u8bc1\u5238\u4ee3\u7801 - price: \u4e70\u5165\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u4e70\u5165 - volume: \u4e70\u5165\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u4e70\u5165\u7ed3\u679c, \u5b57\u5178\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a - tid: str, \u4ea4\u6613id - eid: str, \u59d4\u6258id - security: str, \u8bc1\u5238\u4ee3\u7801 - order_side: str, \u4e70\u5165/\u5356\u51fa - price: float, \u6210\u4ea4\u5747\u4ef7 - filled: float, \u6210\u4ea4\u6570\u91cf - time: str, \u4e0b\u5355\u65f6\u95f4 - trade_fees: float, \u624b\u7eed\u8d39 \"\"\" params = request . json or {} security = params [ \"security\" ] price = params [ \"price\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . buy ( security , price , volume , order_time ) return response . json ( jsonify ( result )) delete_accounts ( request ) async \u00b6 \u5220\u9664\u8d26\u6237 \u5f53\u63d0\u4f9b\u4e86\u8d26\u6237\u540d name \u548ctoken\uff08\u901a\u8fc7headers\u4f20\u9012)\u65f6\uff0c\u5982\u679cname\u4e0etoken\u80fd\u591f\u5339\u914d\uff0c\u5219\u5220\u9664 name \u8d26\u6237\u3002 Parameters: Name Type Description Default request Request \u901a\u8fc7params\u4f20\u9012\u4ee5\u4e0b\u5b57\u6bb5 name, \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d\u3002\u5982\u679c\u4e3a\u7a7a\uff0c\u4e14\u63d0\u4f9b\u4e86admin token\uff0c\u5219\u5220\u9664\u5168\u90e8\u8d26\u6237\u3002 required Source code in backtest/web/interfaces.py @bp . route ( \"accounts\" , methods = [ \"DELETE\" ]) @protected async def delete_accounts ( request ): \"\"\"\u5220\u9664\u8d26\u6237 \u5f53\u63d0\u4f9b\u4e86\u8d26\u6237\u540d`name`\u548ctoken\uff08\u901a\u8fc7headers\u4f20\u9012)\u65f6\uff0c\u5982\u679cname\u4e0etoken\u80fd\u591f\u5339\u914d\uff0c\u5219\u5220\u9664`name`\u8d26\u6237\u3002 Args: request Request: \u901a\u8fc7params\u4f20\u9012\u4ee5\u4e0b\u5b57\u6bb5 - name, \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d\u3002\u5982\u679c\u4e3a\u7a7a\uff0c\u4e14\u63d0\u4f9b\u4e86admin token\uff0c\u5219\u5220\u9664\u5168\u90e8\u8d26\u6237\u3002 \"\"\" account_to_delete = request . args . get ( \"name\" , None ) accounts = request . app . ctx . accounts if account_to_delete is None : if request . ctx . broker . account_name == \"admin\" : accounts . delete_accounts () else : return response . text ( \"admin account required\" , status = 403 ) if account_to_delete == request . ctx . broker . account_name : accounts . delete_accounts ( account_to_delete ) get_assets ( request ) async \u00b6 \u83b7\u53d6\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f \u672c\u65b9\u6cd5\u4e3b\u8981\u4e3a\u7ed8\u5236\u8d44\u4ea7\u6536\u76ca\u66f2\u7ebf\u63d0\u4f9b\u6570\u636e\u3002 Parameters: Name Type Description Default request Request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 start: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u8d26\u6237\u8d77\u59cb\u65e5 end: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u6700\u540e\u4ea4\u6613\u65e5 required Returns: Type Description Response \u4ece start \u5230 end \u671f\u95f4\u7684\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f\uff0c\u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003 backtest.trade.datatypes.rich_assets_dtype Source code in backtest/web/interfaces.py @bp . route ( \"assets\" , methods = [ \"GET\" ]) @protected async def get_assets ( request ): \"\"\"\u83b7\u53d6\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f \u672c\u65b9\u6cd5\u4e3b\u8981\u4e3a\u7ed8\u5236\u8d44\u4ea7\u6536\u76ca\u66f2\u7ebf\u63d0\u4f9b\u6570\u636e\u3002 Args: request Request: \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - start: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u8d26\u6237\u8d77\u59cb\u65e5 - end: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u6700\u540e\u4ea4\u6613\u65e5 Returns: Response: \u4ece`start`\u5230`end`\u671f\u95f4\u7684\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f\uff0c\u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003[backtest.trade.datatypes.rich_assets_dtype][] \"\"\" broker : Broker = request . ctx . broker start = request . args . get ( \"start\" ) if start : start = arrow . get ( start ) . date () else : start = broker . account_start_date end = request . args . get ( \"end\" ) if end : end = arrow . get ( end ) . date () else : end = broker . account_end_date if not ( broker . mode == \"bt\" and broker . _bt_stopped ): await broker . recalc_assets ( end ) if broker . _assets . size == 0 : return response . raw ( pickle . dump ( np . empty ( 0 , dtype = rich_assets_dtype ))) # cash may be shorter than assets if broker . _cash . size == 0 : cash = broker . _assets . astype ( cash_dtype ) elif broker . _cash . size < broker . _assets . size : n = broker . _assets . size - broker . _cash . size cash = np . pad ( broker . _cash , ( 0 , n ), \"edge\" ) cash [ \"date\" ] = broker . _assets [ \"date\" ] else : cash = broker . _cash cash = cash [( cash [ \"date\" ] <= end ) & ( cash [ \"date\" ] >= start )] assets = broker . _assets assets = assets [( assets [ \"date\" ] <= end ) & ( assets [ \"date\" ] >= start )] mv = assets [ \"assets\" ] - cash [ \"cash\" ] # both _cash and _assets has been moved backward one day result = numpy_append_fields ( assets , [ \"cash\" , \"mv\" ], [ cash [ \"cash\" ], mv ], [( \"cash\" , \"f8\" ), ( \"mv\" , \"f8\" )] ) . astype ( rich_assets_dtype ) return response . raw ( pickle . dumps ( result )) info ( request ) async \u00b6 \u83b7\u53d6\u8d26\u6237\u4fe1\u606f Parameters: Name Type Description Default request Request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u610f\u5473\u7740\u53d6\u5f53\u524d\u65e5\u671f\u7684\u8d26\u6237\u4fe1\u606f required Returns: Type Description Response \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2adict\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a name: str, \u8d26\u6237\u540d principal: float, \u521d\u59cb\u8d44\u91d1 assets: float, \u5f53\u524d\u8d44\u4ea7 start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 last_trade: datetime.date, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65e5\u671f end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5bf9\u56de\u6d4b\u6a21\u5f0f\u6709\u6548 available: float, \u53ef\u7528\u8d44\u91d1 market_value: \u80a1\u7968\u5e02\u503c pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3a backtest.trade.datatypes.position_dtype \u7684numpy structured array Source code in backtest/web/interfaces.py @bp . route ( \"info\" , methods = [ \"GET\" ]) @protected async def info ( request ): \"\"\"\u83b7\u53d6\u8d26\u6237\u4fe1\u606f Args: request Request: \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u610f\u5473\u7740\u53d6\u5f53\u524d\u65e5\u671f\u7684\u8d26\u6237\u4fe1\u606f Returns: Response: \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2adict\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.date, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65e5\u671f - end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5bf9\u56de\u6d4b\u6a21\u5f0f\u6709\u6548 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3a[backtest.trade.datatypes.position_dtype][]\u7684numpy structured array \"\"\" date = request . args . get ( \"date\" ) result = await request . ctx . broker . info ( date ) return response . raw ( pickle . dumps ( result )) market_buy ( request ) async \u00b6 \u5e02\u4ef7\u4e70\u5165 Parameters: Name Type Description Default request Request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b security: \u8bc1\u5238\u4ee3\u7801 volume: \u4e70\u5165\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u4e70\u5165\u7ed3\u679c, \u8bf7\u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"market_buy\" , methods = [ \"POST\" ]) @protected async def market_buy ( request ): \"\"\"\u5e02\u4ef7\u4e70\u5165 Args: request Request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b - security: \u8bc1\u5238\u4ee3\u7801 - volume: \u4e70\u5165\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u4e70\u5165\u7ed3\u679c, \u8bf7\u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . buy ( security , None , volume , order_time ) return response . json ( jsonify ( result )) market_sell ( request ) async \u00b6 \u4ee5\u5e02\u4ef7\u5356\u51fa\u8bc1\u5238 Parameters: Name Type Description Default request \u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 security : \u8bc1\u5238\u4ee3\u7801 volume: \u5356\u51fa\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"market_sell\" , methods = [ \"POST\" ]) @protected async def market_sell ( request ): \"\"\"\u4ee5\u5e02\u4ef7\u5356\u51fa\u8bc1\u5238 Args: request : \u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - security : \u8bc1\u5238\u4ee3\u7801 - volume: \u5356\u51fa\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . sell ( security , None , volume , order_time ) return response . json ( jsonify ( result )) metrics ( request ) async \u00b6 \u83b7\u53d6\u56de\u6d4b\u7684\u8bc4\u4f30\u6307\u6807\u4fe1\u606f Parameters: Name Type Description Default request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 start: \u5f00\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD end: \u7ed3\u675f\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD baseline: str, \u7528\u6765\u505a\u5bf9\u6bd4\u7684\u8bc1\u5238\u4ee3\u7801\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u4e0d\u505a\u5bf9\u6bd4 required Returns: Type Description Response \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003 backtest.trade.broker.Broker.metrics Source code in backtest/web/interfaces.py @bp . route ( \"metrics\" , methods = [ \"GET\" ]) @protected async def metrics ( request ): \"\"\"\u83b7\u53d6\u56de\u6d4b\u7684\u8bc4\u4f30\u6307\u6807\u4fe1\u606f Args: request : \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - start: \u5f00\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD - end: \u7ed3\u675f\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD - baseline: str, \u7528\u6765\u505a\u5bf9\u6bd4\u7684\u8bc1\u5238\u4ee3\u7801\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u4e0d\u505a\u5bf9\u6bd4 Returns: Response: \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003[backtest.trade.broker.Broker.metrics][] \"\"\" start = request . args . get ( \"start\" ) end = request . args . get ( \"end\" ) baseline = request . args . get ( \"baseline\" ) if start : start = arrow . get ( start ) . date () if end : end = arrow . get ( end ) . date () metrics = await request . ctx . broker . metrics ( start , end , baseline ) return response . raw ( pickle . dumps ( metrics )) positions ( request ) async \u00b6 \u83b7\u53d6\u6301\u4ed3\u4fe1\u606f Parameters: Name Type Description Default request Request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5: date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f\u7684\u65e5\u671f required Returns: Type Description Response \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2anumpy structured array\u6570\u7ec4\uff0c\u5176dtype\u4e3a backtest.trade.datatypes.daily_position_dtype Source code in backtest/web/interfaces.py @bp . route ( \"positions\" , methods = [ \"GET\" ]) @protected async def positions ( request ) -> NDArray [ daily_position_dtype ]: \"\"\"\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f Args: request Request:\u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5: - date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f\u7684\u65e5\u671f Returns: Response: \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2anumpy structured array\u6570\u7ec4\uff0c\u5176dtype\u4e3a[backtest.trade.datatypes.daily_position_dtype][] \"\"\" date = request . args . get ( \"date\" ) if date is None : position = request . ctx . broker . position else : date = arrow . get ( date ) . date () position = request . ctx . broker . get_position ( date ) position = position [ position [ \"shares\" ] != 0 ] return response . raw ( pickle . dumps ( position )) sell ( request ) async \u00b6 \u5356\u51fa\u8bc1\u5238 Parameters: Name Type Description Default request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a security : \u8bc1\u5238\u4ee3\u7801 price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa volume: \u5356\u51fa\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"sell\" , methods = [ \"POST\" ]) @protected async def sell ( request ): \"\"\"\u5356\u51fa\u8bc1\u5238 Args: request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a - security : \u8bc1\u5238\u4ee3\u7801 - price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa - volume: \u5356\u51fa\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] price = params [ \"price\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . sell ( security , price , volume , order_time ) return response . json ( jsonify ( result )) sell_percent ( request ) async \u00b6 \u5356\u51fa\u8bc1\u5238 Parameters: Name Type Description Default request Request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b security: \u8bc1\u5238\u4ee3\u7801 percent: \u5356\u51fa\u6bd4\u4f8b order_time: \u4e0b\u5355\u65f6\u95f4 price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa required Returns: Type Description Response \u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"sell_percent\" , methods = [ \"POST\" ]) @protected async def sell_percent ( request ): \"\"\"\u5356\u51fa\u8bc1\u5238 Args: request Request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b - security: \u8bc1\u5238\u4ee3\u7801 - percent: \u5356\u51fa\u6bd4\u4f8b - order_time: \u4e0b\u5355\u65f6\u95f4 - price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa Returns: Response: \u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] price = params [ \"price\" ] percent = params [ \"percent\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive assert 0 < percent <= 1.0 , \"percent must be between 0 and 1.0\" broker : Broker = request . ctx . broker position = broker . get_position ( order_time . date ()) sellable = position [ position [ \"security\" ] == security ] if sellable . size == 0 : raise PositionError ( security , order_time , with_stack = True ) sellable = sellable [ 0 ][ \"sellable\" ] * percent result = await request . ctx . broker . sell ( security , price , sellable , order_time ) return response . json ( jsonify ( result )) start_backtest ( request ) async \u00b6 \u542f\u52a8\u56de\u6d4b \u542f\u52a8\u56de\u6d4b\u65f6\uff0c\u5c06\u4e3a\u63a5\u4e0b\u6765\u7684\u56de\u6d4b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d26\u6237\u3002 Parameters: Name Type Description Default request Request \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8bf7\u6c42\u5bf9\u8c61 name, \u8d26\u6237\u540d\u79f0 token,\u8d26\u6237token principal,\u8d26\u6237\u521d\u59cb\u8d44\u91d1 commission,\u8d26\u6237\u624b\u7eed\u8d39\u7387 start,\u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD end,\u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD required Returns: Type Description json \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684json\u5bf9\u8c61 account_name, str token, str account_start_date, str principal, float Source code in backtest/web/interfaces.py @bp . route ( \"start_backtest\" , methods = [ \"POST\" ]) async def start_backtest ( request ): \"\"\"\u542f\u52a8\u56de\u6d4b \u542f\u52a8\u56de\u6d4b\u65f6\uff0c\u5c06\u4e3a\u63a5\u4e0b\u6765\u7684\u56de\u6d4b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d26\u6237\u3002 Args: request Request: \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8bf7\u6c42\u5bf9\u8c61 - name, \u8d26\u6237\u540d\u79f0 - token,\u8d26\u6237token - principal,\u8d26\u6237\u521d\u59cb\u8d44\u91d1 - commission,\u8d26\u6237\u624b\u7eed\u8d39\u7387 - start,\u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD - end,\u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD Returns: json: \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684json\u5bf9\u8c61 - account_name, str - token, str - account_start_date, str - principal, float \"\"\" params = request . json or {} try : name = params [ \"name\" ] token = params [ \"token\" ] start = arrow . get ( params [ \"start\" ]) . date () end = arrow . get ( params [ \"end\" ]) . date () principal = params [ \"principal\" ] commission = params [ \"commission\" ] except KeyError as e : logger . warning ( f \"parameter { e } is required\" ) error = BadParamsError ( f \"parameter { e } is required\" ) return response . json ( error . as_json (), status = 499 ) except Exception as e : logger . exception ( e ) error = TradeError ( \"parameter error: name, token, start, end, principal, commission\" , with_stack = True , ) return response . json ( error . as_json (), status = 499 ) accounts = request . app . ctx . accounts try : result = accounts . create_account ( name , token , principal , commission , start = start , end = end ) logger . info ( \"backtest account created:\" , result ) return response . json ( jsonify ( result )) except AccountConflictError as e : return response . json ( e . as_json (), status = 499 ) stop_backtest ( request ) async \u00b6 \u7ed3\u675f\u56de\u6d4b \u7ed3\u675f\u56de\u6d4b\u540e\uff0c\u8d26\u6237\u5c06\u88ab\u51bb\u7ed3\uff0c\u6b64\u540e\u5c06\u4e0d\u5141\u8bb8\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c todo: \u589e\u52a0\u6301\u4e45\u5316\u64cd\u4f5c \u00b6 Source code in backtest/web/interfaces.py @bp . route ( \"stop_backtest\" , methods = [ \"POST\" ]) @protected async def stop_backtest ( request ): \"\"\"\u7ed3\u675f\u56de\u6d4b \u7ed3\u675f\u56de\u6d4b\u540e\uff0c\u8d26\u6237\u5c06\u88ab\u51bb\u7ed3\uff0c\u6b64\u540e\u5c06\u4e0d\u5141\u8bb8\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c # todo: \u589e\u52a0\u6301\u4e45\u5316\u64cd\u4f5c \"\"\" broker = request . ctx . broker if broker . mode != \"bt\" : raise TradeError ( \"\u5728\u975e\u56de\u6d4b\u8d26\u6237\u4e0a\u8bd5\u56fe\u6267\u884c\u4e0d\u5141\u8bb8\u7684\u64cd\u4f5c\" , with_stack = True ) if not broker . _bt_stopped : broker . _bt_stopped = True await broker . recalc_assets () return response . text ( \"ok\" )","title":"Web"},{"location":"api/web/#backtest.web.accounts","text":"\u7b80\u6613\u8d26\u6237\u7ba1\u7406 \u63d0\u4f9b\u4e86\u521b\u5efa\u8d26\u6237\u3001\u67e5\u8be2\u8d26\u6237\u3001\u5220\u9664\u8d26\u6237\u548c\u72b6\u6001\u6301\u4e45\u5316\u5b9e\u73b0\u3002","title":"accounts"},{"location":"api/web/#backtest.web.accounts.Accounts","text":"Source code in backtest/web/accounts.py class Accounts : _brokers = {} def on_startup ( self ): token = cfg . auth . admin self . _brokers [ token ] = Broker ( \"admin\" , 0 , 0.0 ) state_file = os . path . join ( home_dir (), \"state.pkl\" ) try : with open ( state_file , \"rb\" ) as f : self . _brokers = pickle . load ( f ) except FileNotFoundError : pass except Exception as e : logger . exception ( e ) def on_exit ( self ): state_file = os . path . join ( home_dir (), \"state.pkl\" ) with open ( state_file , \"wb\" ) as f : pickle . dump ( self . _brokers , f ) def get_broker ( self , token ): return self . _brokers . get ( token ) def is_valid ( self , token : str ): return token in self . _brokers def is_admin ( self , token : str ): cfg = cfg4py . get_instance () return token == cfg . auth . admin def create_account ( self , name : str , token : str , principal : float , commission : float , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u65b0\u8d26\u6237 \u4e00\u4e2a\u8d26\u6237\u7531`name`\u548c`token`\u7684\u7ec4\u5408\u60df\u4e00\u786e\u5b9a\u3002\u5982\u679c\u524d\u8ff0\u7ec4\u5408\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 Args: name (str): \u8d26\u6237/\u7b56\u7565\u540d\u79f0 token (str): \u8d26\u6237token principal (float): \u8d26\u6237\u8d77\u59cb\u8d44\u91d1 commission (float): \u8d26\u6237\u624b\u7eed\u8d39 start (datetime.date, optional): \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a end (datetime.date, optional): \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a \"\"\" if token in self . _brokers : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) for broker in self . _brokers . values (): if broker . account_name == name : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) broker = Broker ( name , principal , commission , start , end ) self . _brokers [ token ] = broker logger . info ( \"\u65b0\u5efa\u8d26\u6237: %s , %s \" , name , token ) return { \"account_name\" : name , \"token\" : token , \"account_start_date\" : broker . account_start_date , \"principal\" : broker . principal , } def list_accounts ( self , mode : str ): if mode != \"all\" : filtered = { token : broker for token , broker in self . _brokers . items () if broker . mode == mode and broker . account_name != \"admin\" } else : filtered = { token : broker for token , broker in self . _brokers . items () if broker . account_name != \"admin\" } return [ { \"account_name\" : broker . account_name , \"token\" : token , \"account_start_date\" : broker . account_start_date , \"principal\" : broker . principal , } for token , broker in filtered . items () ] def delete_accounts ( self , account_to_delete : str = None ): if account_to_delete is None : self . _brokers = {} self . _brokers [ cfg . auth . admin ] = Broker ( \"admin\" , 0 , 0.0 ) return 0 else : for token , broker in self . _brokers . items (): if broker . account_name == account_to_delete : del self . _brokers [ token ] logger . info ( \"\u8d26\u6237: %s \u5df2\u5220\u9664\" , account_to_delete ) return len ( self . _brokers ) - 1 else : logger . warning ( \"\u8d26\u6237 %s \u4e0d\u5b58\u5728\" , account_to_delete ) return len ( self . _brokers )","title":"Accounts"},{"location":"api/web/#backtest.web.accounts.Accounts.create_account","text":"\u521b\u5efa\u65b0\u8d26\u6237 \u4e00\u4e2a\u8d26\u6237\u7531 name \u548c token \u7684\u7ec4\u5408\u60df\u4e00\u786e\u5b9a\u3002\u5982\u679c\u524d\u8ff0\u7ec4\u5408\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 Parameters: Name Type Description Default name str \u8d26\u6237/\u7b56\u7565\u540d\u79f0 required token str \u8d26\u6237token required principal float \u8d26\u6237\u8d77\u59cb\u8d44\u91d1 required commission float \u8d26\u6237\u624b\u7eed\u8d39 required start datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a None end datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a None Source code in backtest/web/accounts.py def create_account ( self , name : str , token : str , principal : float , commission : float , start : Optional [ datetime . date ] = None , end : Optional [ datetime . date ] = None , ): \"\"\"\u521b\u5efa\u65b0\u8d26\u6237 \u4e00\u4e2a\u8d26\u6237\u7531`name`\u548c`token`\u7684\u7ec4\u5408\u60df\u4e00\u786e\u5b9a\u3002\u5982\u679c\u524d\u8ff0\u7ec4\u5408\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5931\u8d25\u3002 Args: name (str): \u8d26\u6237/\u7b56\u7565\u540d\u79f0 token (str): \u8d26\u6237token principal (float): \u8d26\u6237\u8d77\u59cb\u8d44\u91d1 commission (float): \u8d26\u6237\u624b\u7eed\u8d39 start (datetime.date, optional): \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a end (datetime.date, optional): \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5982\u679c\u662f\u6a21\u62df\u76d8\uff0c\u5219\u53ef\u4e3a\u7a7a \"\"\" if token in self . _brokers : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) for broker in self . _brokers . values (): if broker . account_name == name : msg = f \"\u8d26\u6237 { name } : { token } \u5df2\u7ecf\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u521b\u5efa\u3002\" raise AccountConflictError ( msg , with_stack = True ) broker = Broker ( name , principal , commission , start , end ) self . _brokers [ token ] = broker logger . info ( \"\u65b0\u5efa\u8d26\u6237: %s , %s \" , name , token ) return { \"account_name\" : name , \"token\" : token , \"account_start_date\" : broker . account_start_date , \"principal\" : broker . principal , }","title":"create_account()"},{"location":"api/web/#backtest.web.interfaces","text":"","title":"interfaces"},{"location":"api/web/#backtest.web.interfaces.bills","text":"\u83b7\u53d6\u4ea4\u6613\u8bb0\u5f55 Returns: Type Description Response \u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u62ec\u4ee5\u4e0b\u5b57\u6bb5\uff1a tx: \u914d\u5bf9\u7684\u4ea4\u6613\u8bb0\u5f55 trades: \u6210\u4ea4\u8bb0\u5f55 positions: \u6301\u4ed3\u8bb0\u5f55 assets: \u6bcf\u65e5\u5e02\u503c Source code in backtest/web/interfaces.py @bp . route ( \"bills\" , methods = [ \"GET\" ]) @protected async def bills ( request ): \"\"\"\u83b7\u53d6\u4ea4\u6613\u8bb0\u5f55 Returns: Response: \u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u62ec\u4ee5\u4e0b\u5b57\u6bb5\uff1a - tx: \u914d\u5bf9\u7684\u4ea4\u6613\u8bb0\u5f55 - trades: \u6210\u4ea4\u8bb0\u5f55 - positions: \u6301\u4ed3\u8bb0\u5f55 - assets: \u6bcf\u65e5\u5e02\u503c \"\"\" results = {} broker : Broker = request . ctx . broker results [ \"tx\" ] = broker . transactions results [ \"trades\" ] = broker . trades results [ \"positions\" ] = broker . _positions if not ( broker . mode == \"bt\" and broker . _bt_stopped ): await broker . recalc_assets () results [ \"assets\" ] = broker . _assets return response . json ( jsonify ( results ))","title":"bills()"},{"location":"api/web/#backtest.web.interfaces.buy","text":"\u4e70\u5165 Parameters: Name Type Description Default request Request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a security : \u8bc1\u5238\u4ee3\u7801 price: \u4e70\u5165\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u4e70\u5165 volume: \u4e70\u5165\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u4e70\u5165\u7ed3\u679c, \u5b57\u5178\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a tid: str, \u4ea4\u6613id eid: str, \u59d4\u6258id security: str, \u8bc1\u5238\u4ee3\u7801 order_side: str, \u4e70\u5165/\u5356\u51fa price: float, \u6210\u4ea4\u5747\u4ef7 filled: float, \u6210\u4ea4\u6570\u91cf time: str, \u4e0b\u5355\u65f6\u95f4 trade_fees: float, \u624b\u7eed\u8d39 Source code in backtest/web/interfaces.py @bp . route ( \"buy\" , methods = [ \"POST\" ]) @protected async def buy ( request ): \"\"\"\u4e70\u5165 Args: request Request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a - security : \u8bc1\u5238\u4ee3\u7801 - price: \u4e70\u5165\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u4e70\u5165 - volume: \u4e70\u5165\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u4e70\u5165\u7ed3\u679c, \u5b57\u5178\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a - tid: str, \u4ea4\u6613id - eid: str, \u59d4\u6258id - security: str, \u8bc1\u5238\u4ee3\u7801 - order_side: str, \u4e70\u5165/\u5356\u51fa - price: float, \u6210\u4ea4\u5747\u4ef7 - filled: float, \u6210\u4ea4\u6570\u91cf - time: str, \u4e0b\u5355\u65f6\u95f4 - trade_fees: float, \u624b\u7eed\u8d39 \"\"\" params = request . json or {} security = params [ \"security\" ] price = params [ \"price\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . buy ( security , price , volume , order_time ) return response . json ( jsonify ( result ))","title":"buy()"},{"location":"api/web/#backtest.web.interfaces.delete_accounts","text":"\u5220\u9664\u8d26\u6237 \u5f53\u63d0\u4f9b\u4e86\u8d26\u6237\u540d name \u548ctoken\uff08\u901a\u8fc7headers\u4f20\u9012)\u65f6\uff0c\u5982\u679cname\u4e0etoken\u80fd\u591f\u5339\u914d\uff0c\u5219\u5220\u9664 name \u8d26\u6237\u3002 Parameters: Name Type Description Default request Request \u901a\u8fc7params\u4f20\u9012\u4ee5\u4e0b\u5b57\u6bb5 name, \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d\u3002\u5982\u679c\u4e3a\u7a7a\uff0c\u4e14\u63d0\u4f9b\u4e86admin token\uff0c\u5219\u5220\u9664\u5168\u90e8\u8d26\u6237\u3002 required Source code in backtest/web/interfaces.py @bp . route ( \"accounts\" , methods = [ \"DELETE\" ]) @protected async def delete_accounts ( request ): \"\"\"\u5220\u9664\u8d26\u6237 \u5f53\u63d0\u4f9b\u4e86\u8d26\u6237\u540d`name`\u548ctoken\uff08\u901a\u8fc7headers\u4f20\u9012)\u65f6\uff0c\u5982\u679cname\u4e0etoken\u80fd\u591f\u5339\u914d\uff0c\u5219\u5220\u9664`name`\u8d26\u6237\u3002 Args: request Request: \u901a\u8fc7params\u4f20\u9012\u4ee5\u4e0b\u5b57\u6bb5 - name, \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d\u3002\u5982\u679c\u4e3a\u7a7a\uff0c\u4e14\u63d0\u4f9b\u4e86admin token\uff0c\u5219\u5220\u9664\u5168\u90e8\u8d26\u6237\u3002 \"\"\" account_to_delete = request . args . get ( \"name\" , None ) accounts = request . app . ctx . accounts if account_to_delete is None : if request . ctx . broker . account_name == \"admin\" : accounts . delete_accounts () else : return response . text ( \"admin account required\" , status = 403 ) if account_to_delete == request . ctx . broker . account_name : accounts . delete_accounts ( account_to_delete )","title":"delete_accounts()"},{"location":"api/web/#backtest.web.interfaces.get_assets","text":"\u83b7\u53d6\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f \u672c\u65b9\u6cd5\u4e3b\u8981\u4e3a\u7ed8\u5236\u8d44\u4ea7\u6536\u76ca\u66f2\u7ebf\u63d0\u4f9b\u6570\u636e\u3002 Parameters: Name Type Description Default request Request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 start: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u8d26\u6237\u8d77\u59cb\u65e5 end: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u6700\u540e\u4ea4\u6613\u65e5 required Returns: Type Description Response \u4ece start \u5230 end \u671f\u95f4\u7684\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f\uff0c\u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003 backtest.trade.datatypes.rich_assets_dtype Source code in backtest/web/interfaces.py @bp . route ( \"assets\" , methods = [ \"GET\" ]) @protected async def get_assets ( request ): \"\"\"\u83b7\u53d6\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f \u672c\u65b9\u6cd5\u4e3b\u8981\u4e3a\u7ed8\u5236\u8d44\u4ea7\u6536\u76ca\u66f2\u7ebf\u63d0\u4f9b\u6570\u636e\u3002 Args: request Request: \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - start: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u8d26\u6237\u8d77\u59cb\u65e5 - end: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u53d6\u6700\u540e\u4ea4\u6613\u65e5 Returns: Response: \u4ece`start`\u5230`end`\u671f\u95f4\u7684\u8d26\u6237\u8d44\u4ea7\u4fe1\u606f\uff0c\u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003[backtest.trade.datatypes.rich_assets_dtype][] \"\"\" broker : Broker = request . ctx . broker start = request . args . get ( \"start\" ) if start : start = arrow . get ( start ) . date () else : start = broker . account_start_date end = request . args . get ( \"end\" ) if end : end = arrow . get ( end ) . date () else : end = broker . account_end_date if not ( broker . mode == \"bt\" and broker . _bt_stopped ): await broker . recalc_assets ( end ) if broker . _assets . size == 0 : return response . raw ( pickle . dump ( np . empty ( 0 , dtype = rich_assets_dtype ))) # cash may be shorter than assets if broker . _cash . size == 0 : cash = broker . _assets . astype ( cash_dtype ) elif broker . _cash . size < broker . _assets . size : n = broker . _assets . size - broker . _cash . size cash = np . pad ( broker . _cash , ( 0 , n ), \"edge\" ) cash [ \"date\" ] = broker . _assets [ \"date\" ] else : cash = broker . _cash cash = cash [( cash [ \"date\" ] <= end ) & ( cash [ \"date\" ] >= start )] assets = broker . _assets assets = assets [( assets [ \"date\" ] <= end ) & ( assets [ \"date\" ] >= start )] mv = assets [ \"assets\" ] - cash [ \"cash\" ] # both _cash and _assets has been moved backward one day result = numpy_append_fields ( assets , [ \"cash\" , \"mv\" ], [ cash [ \"cash\" ], mv ], [( \"cash\" , \"f8\" ), ( \"mv\" , \"f8\" )] ) . astype ( rich_assets_dtype ) return response . raw ( pickle . dumps ( result ))","title":"get_assets()"},{"location":"api/web/#backtest.web.interfaces.info","text":"\u83b7\u53d6\u8d26\u6237\u4fe1\u606f Parameters: Name Type Description Default request Request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u610f\u5473\u7740\u53d6\u5f53\u524d\u65e5\u671f\u7684\u8d26\u6237\u4fe1\u606f required Returns: Type Description Response \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2adict\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a name: str, \u8d26\u6237\u540d principal: float, \u521d\u59cb\u8d44\u91d1 assets: float, \u5f53\u524d\u8d44\u4ea7 start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 last_trade: datetime.date, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65e5\u671f end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5bf9\u56de\u6d4b\u6a21\u5f0f\u6709\u6548 available: float, \u53ef\u7528\u8d44\u91d1 market_value: \u80a1\u7968\u5e02\u503c pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3a backtest.trade.datatypes.position_dtype \u7684numpy structured array Source code in backtest/web/interfaces.py @bp . route ( \"info\" , methods = [ \"GET\" ]) @protected async def info ( request ): \"\"\"\u83b7\u53d6\u8d26\u6237\u4fe1\u606f Args: request Request: \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u8d26\u6237\u4fe1\u606f\u7684\u65e5\u671f\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u610f\u5473\u7740\u53d6\u5f53\u524d\u65e5\u671f\u7684\u8d26\u6237\u4fe1\u606f Returns: Response: \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2adict\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.date, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65e5\u671f - end: \u8d26\u6237\u7ed3\u675f\u65f6\u95f4\uff0c\u4ec5\u5bf9\u56de\u6d4b\u6a21\u5f0f\u6709\u6548 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3a[backtest.trade.datatypes.position_dtype][]\u7684numpy structured array \"\"\" date = request . args . get ( \"date\" ) result = await request . ctx . broker . info ( date ) return response . raw ( pickle . dumps ( result ))","title":"info()"},{"location":"api/web/#backtest.web.interfaces.market_buy","text":"\u5e02\u4ef7\u4e70\u5165 Parameters: Name Type Description Default request Request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b security: \u8bc1\u5238\u4ee3\u7801 volume: \u4e70\u5165\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u4e70\u5165\u7ed3\u679c, \u8bf7\u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"market_buy\" , methods = [ \"POST\" ]) @protected async def market_buy ( request ): \"\"\"\u5e02\u4ef7\u4e70\u5165 Args: request Request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b - security: \u8bc1\u5238\u4ee3\u7801 - volume: \u4e70\u5165\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u4e70\u5165\u7ed3\u679c, \u8bf7\u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . buy ( security , None , volume , order_time ) return response . json ( jsonify ( result ))","title":"market_buy()"},{"location":"api/web/#backtest.web.interfaces.market_sell","text":"\u4ee5\u5e02\u4ef7\u5356\u51fa\u8bc1\u5238 Parameters: Name Type Description Default request \u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 security : \u8bc1\u5238\u4ee3\u7801 volume: \u5356\u51fa\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"market_sell\" , methods = [ \"POST\" ]) @protected async def market_sell ( request ): \"\"\"\u4ee5\u5e02\u4ef7\u5356\u51fa\u8bc1\u5238 Args: request : \u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - security : \u8bc1\u5238\u4ee3\u7801 - volume: \u5356\u51fa\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . sell ( security , None , volume , order_time ) return response . json ( jsonify ( result ))","title":"market_sell()"},{"location":"api/web/#backtest.web.interfaces.metrics","text":"\u83b7\u53d6\u56de\u6d4b\u7684\u8bc4\u4f30\u6307\u6807\u4fe1\u606f Parameters: Name Type Description Default request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 start: \u5f00\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD end: \u7ed3\u675f\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD baseline: str, \u7528\u6765\u505a\u5bf9\u6bd4\u7684\u8bc1\u5238\u4ee3\u7801\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u4e0d\u505a\u5bf9\u6bd4 required Returns: Type Description Response \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003 backtest.trade.broker.Broker.metrics Source code in backtest/web/interfaces.py @bp . route ( \"metrics\" , methods = [ \"GET\" ]) @protected async def metrics ( request ): \"\"\"\u83b7\u53d6\u56de\u6d4b\u7684\u8bc4\u4f30\u6307\u6807\u4fe1\u606f Args: request : \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5 - start: \u5f00\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD - end: \u7ed3\u675f\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD - baseline: str, \u7528\u6765\u505a\u5bf9\u6bd4\u7684\u8bc1\u5238\u4ee3\u7801\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5373\u4e0d\u505a\u5bf9\u6bd4 Returns: Response: \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de,\u53c2\u8003[backtest.trade.broker.Broker.metrics][] \"\"\" start = request . args . get ( \"start\" ) end = request . args . get ( \"end\" ) baseline = request . args . get ( \"baseline\" ) if start : start = arrow . get ( start ) . date () if end : end = arrow . get ( end ) . date () metrics = await request . ctx . broker . metrics ( start , end , baseline ) return response . raw ( pickle . dumps ( metrics ))","title":"metrics()"},{"location":"api/web/#backtest.web.interfaces.positions","text":"\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f Parameters: Name Type Description Default request Request \u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5: date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f\u7684\u65e5\u671f required Returns: Type Description Response \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2anumpy structured array\u6570\u7ec4\uff0c\u5176dtype\u4e3a backtest.trade.datatypes.daily_position_dtype Source code in backtest/web/interfaces.py @bp . route ( \"positions\" , methods = [ \"GET\" ]) @protected async def positions ( request ) -> NDArray [ daily_position_dtype ]: \"\"\"\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f Args: request Request:\u4ee5args\u65b9\u5f0f\u4f20\u5165\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5: - date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD,\u5f85\u83b7\u53d6\u6301\u4ed3\u4fe1\u606f\u7684\u65e5\u671f Returns: Response: \u7ed3\u679c\u4ee5binary\u65b9\u5f0f\u8fd4\u56de\u3002\u7ed3\u679c\u4e3a\u4e00\u4e2anumpy structured array\u6570\u7ec4\uff0c\u5176dtype\u4e3a[backtest.trade.datatypes.daily_position_dtype][] \"\"\" date = request . args . get ( \"date\" ) if date is None : position = request . ctx . broker . position else : date = arrow . get ( date ) . date () position = request . ctx . broker . get_position ( date ) position = position [ position [ \"shares\" ] != 0 ] return response . raw ( pickle . dumps ( position ))","title":"positions()"},{"location":"api/web/#backtest.web.interfaces.sell","text":"\u5356\u51fa\u8bc1\u5238 Parameters: Name Type Description Default request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a security : \u8bc1\u5238\u4ee3\u7801 price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa volume: \u5356\u51fa\u6570\u91cf order_time: \u4e0b\u5355\u65f6\u95f4 required Returns: Type Description Response \u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"sell\" , methods = [ \"POST\" ]) @protected async def sell ( request ): \"\"\"\u5356\u51fa\u8bc1\u5238 Args: request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b\uff1a - security : \u8bc1\u5238\u4ee3\u7801 - price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa - volume: \u5356\u51fa\u6570\u91cf - order_time: \u4e0b\u5355\u65f6\u95f4 Returns: Response: \u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] price = params [ \"price\" ] volume = params [ \"volume\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive result = await request . ctx . broker . sell ( security , price , volume , order_time ) return response . json ( jsonify ( result ))","title":"sell()"},{"location":"api/web/#backtest.web.interfaces.sell_percent","text":"\u5356\u51fa\u8bc1\u5238 Parameters: Name Type Description Default request Request \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b security: \u8bc1\u5238\u4ee3\u7801 percent: \u5356\u51fa\u6bd4\u4f8b order_time: \u4e0b\u5355\u65f6\u95f4 price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa required Returns: Type Description Response \u53c2\u8003 backtest.web.interfaces.buy Source code in backtest/web/interfaces.py @bp . route ( \"sell_percent\" , methods = [ \"POST\" ]) @protected async def sell_percent ( request ): \"\"\"\u5356\u51fa\u8bc1\u5238 Args: request Request: \u53c2\u6570\u4ee5json\u65b9\u5f0f\u4f20\u5165\uff0c \u5305\u542b - security: \u8bc1\u5238\u4ee3\u7801 - percent: \u5356\u51fa\u6bd4\u4f8b - order_time: \u4e0b\u5355\u65f6\u95f4 - price: \u5356\u51fa\u4ef7\u683c,\u5982\u679c\u4e3aNone\uff0c\u5219\u610f\u5473\u7740\u4ee5\u5e02\u4ef7\u5356\u51fa Returns: Response: \u53c2\u8003[backtest.web.interfaces.buy][] \"\"\" params = request . json or {} security = params [ \"security\" ] price = params [ \"price\" ] percent = params [ \"percent\" ] order_time = arrow . get ( params [ \"order_time\" ]) . naive assert 0 < percent <= 1.0 , \"percent must be between 0 and 1.0\" broker : Broker = request . ctx . broker position = broker . get_position ( order_time . date ()) sellable = position [ position [ \"security\" ] == security ] if sellable . size == 0 : raise PositionError ( security , order_time , with_stack = True ) sellable = sellable [ 0 ][ \"sellable\" ] * percent result = await request . ctx . broker . sell ( security , price , sellable , order_time ) return response . json ( jsonify ( result ))","title":"sell_percent()"},{"location":"api/web/#backtest.web.interfaces.start_backtest","text":"\u542f\u52a8\u56de\u6d4b \u542f\u52a8\u56de\u6d4b\u65f6\uff0c\u5c06\u4e3a\u63a5\u4e0b\u6765\u7684\u56de\u6d4b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d26\u6237\u3002 Parameters: Name Type Description Default request Request \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8bf7\u6c42\u5bf9\u8c61 name, \u8d26\u6237\u540d\u79f0 token,\u8d26\u6237token principal,\u8d26\u6237\u521d\u59cb\u8d44\u91d1 commission,\u8d26\u6237\u624b\u7eed\u8d39\u7387 start,\u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD end,\u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD required Returns: Type Description json \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684json\u5bf9\u8c61 account_name, str token, str account_start_date, str principal, float Source code in backtest/web/interfaces.py @bp . route ( \"start_backtest\" , methods = [ \"POST\" ]) async def start_backtest ( request ): \"\"\"\u542f\u52a8\u56de\u6d4b \u542f\u52a8\u56de\u6d4b\u65f6\uff0c\u5c06\u4e3a\u63a5\u4e0b\u6765\u7684\u56de\u6d4b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d26\u6237\u3002 Args: request Request: \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8bf7\u6c42\u5bf9\u8c61 - name, \u8d26\u6237\u540d\u79f0 - token,\u8d26\u6237token - principal,\u8d26\u6237\u521d\u59cb\u8d44\u91d1 - commission,\u8d26\u6237\u624b\u7eed\u8d39\u7387 - start,\u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD - end,\u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u683c\u5f0f\u4e3aYYYY-MM-DD Returns: json: \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684json\u5bf9\u8c61 - account_name, str - token, str - account_start_date, str - principal, float \"\"\" params = request . json or {} try : name = params [ \"name\" ] token = params [ \"token\" ] start = arrow . get ( params [ \"start\" ]) . date () end = arrow . get ( params [ \"end\" ]) . date () principal = params [ \"principal\" ] commission = params [ \"commission\" ] except KeyError as e : logger . warning ( f \"parameter { e } is required\" ) error = BadParamsError ( f \"parameter { e } is required\" ) return response . json ( error . as_json (), status = 499 ) except Exception as e : logger . exception ( e ) error = TradeError ( \"parameter error: name, token, start, end, principal, commission\" , with_stack = True , ) return response . json ( error . as_json (), status = 499 ) accounts = request . app . ctx . accounts try : result = accounts . create_account ( name , token , principal , commission , start = start , end = end ) logger . info ( \"backtest account created:\" , result ) return response . json ( jsonify ( result )) except AccountConflictError as e : return response . json ( e . as_json (), status = 499 )","title":"start_backtest()"},{"location":"api/web/#backtest.web.interfaces.stop_backtest","text":"\u7ed3\u675f\u56de\u6d4b \u7ed3\u675f\u56de\u6d4b\u540e\uff0c\u8d26\u6237\u5c06\u88ab\u51bb\u7ed3\uff0c\u6b64\u540e\u5c06\u4e0d\u5141\u8bb8\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c","title":"stop_backtest()"},{"location":"api/web/#backtest.web.interfaces.stop_backtest--todo-\u589e\u52a0\u6301\u4e45\u5316\u64cd\u4f5c","text":"Source code in backtest/web/interfaces.py @bp . route ( \"stop_backtest\" , methods = [ \"POST\" ]) @protected async def stop_backtest ( request ): \"\"\"\u7ed3\u675f\u56de\u6d4b \u7ed3\u675f\u56de\u6d4b\u540e\uff0c\u8d26\u6237\u5c06\u88ab\u51bb\u7ed3\uff0c\u6b64\u540e\u5c06\u4e0d\u5141\u8bb8\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c # todo: \u589e\u52a0\u6301\u4e45\u5316\u64cd\u4f5c \"\"\" broker = request . ctx . broker if broker . mode != \"bt\" : raise TradeError ( \"\u5728\u975e\u56de\u6d4b\u8d26\u6237\u4e0a\u8bd5\u56fe\u6267\u884c\u4e0d\u5141\u8bb8\u7684\u64cd\u4f5c\" , with_stack = True ) if not broker . _bt_stopped : broker . _bt_stopped = True await broker . recalc_assets () return response . text ( \"ok\" )","title":"todo: \u589e\u52a0\u6301\u4e45\u5316\u64cd\u4f5c"}]}